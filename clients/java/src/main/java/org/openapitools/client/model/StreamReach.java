/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamReach
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class StreamReach {
  public static final String SERIALIZED_NAME_UPSTREAM_LOCATION_NAME = "upstreamLocationName";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_LOCATION_NAME)
  private String upstreamLocationName;

  public static final String SERIALIZED_NAME_DOWNSTREAM_LOCATION_NAME = "downstreamLocationName";
  @SerializedName(SERIALIZED_NAME_DOWNSTREAM_LOCATION_NAME)
  private String downstreamLocationName;

  public static final String SERIALIZED_NAME_STREAM_NAME = "streamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_REACH_NAME = "reachName";
  @SerializedName(SERIALIZED_NAME_REACH_NAME)
  private String reachName;

  public static final String SERIALIZED_NAME_OFFICE_ID = "officeId";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private String _configuration;

  public StreamReach() {
  }

  public StreamReach upstreamLocationName(String upstreamLocationName) {
    
    this.upstreamLocationName = upstreamLocationName;
    return this;
  }

   /**
   * Get upstreamLocationName
   * @return upstreamLocationName
  **/
  @javax.annotation.Nullable

  public String getUpstreamLocationName() {
    return upstreamLocationName;
  }


  public void setUpstreamLocationName(String upstreamLocationName) {
    this.upstreamLocationName = upstreamLocationName;
  }


  public StreamReach downstreamLocationName(String downstreamLocationName) {
    
    this.downstreamLocationName = downstreamLocationName;
    return this;
  }

   /**
   * Get downstreamLocationName
   * @return downstreamLocationName
  **/
  @javax.annotation.Nullable

  public String getDownstreamLocationName() {
    return downstreamLocationName;
  }


  public void setDownstreamLocationName(String downstreamLocationName) {
    this.downstreamLocationName = downstreamLocationName;
  }


  public StreamReach streamName(String streamName) {
    
    this.streamName = streamName;
    return this;
  }

   /**
   * Get streamName
   * @return streamName
  **/
  @javax.annotation.Nullable

  public String getStreamName() {
    return streamName;
  }


  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public StreamReach reachName(String reachName) {
    
    this.reachName = reachName;
    return this;
  }

   /**
   * Get reachName
   * @return reachName
  **/
  @javax.annotation.Nullable

  public String getReachName() {
    return reachName;
  }


  public void setReachName(String reachName) {
    this.reachName = reachName;
  }


  public StreamReach officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public StreamReach comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public StreamReach _configuration(String _configuration) {
    
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nullable

  public String getConfiguration() {
    return _configuration;
  }


  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamReach streamReach = (StreamReach) o;
    return Objects.equals(this.upstreamLocationName, streamReach.upstreamLocationName) &&
        Objects.equals(this.downstreamLocationName, streamReach.downstreamLocationName) &&
        Objects.equals(this.streamName, streamReach.streamName) &&
        Objects.equals(this.reachName, streamReach.reachName) &&
        Objects.equals(this.officeId, streamReach.officeId) &&
        Objects.equals(this.comment, streamReach.comment) &&
        Objects.equals(this._configuration, streamReach._configuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(upstreamLocationName, downstreamLocationName, streamName, reachName, officeId, comment, _configuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamReach {\n");
    sb.append("    upstreamLocationName: ").append(toIndentedString(upstreamLocationName)).append("\n");
    sb.append("    downstreamLocationName: ").append(toIndentedString(downstreamLocationName)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    reachName: ").append(toIndentedString(reachName)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("upstreamLocationName");
    openapiFields.add("downstreamLocationName");
    openapiFields.add("streamName");
    openapiFields.add("reachName");
    openapiFields.add("officeId");
    openapiFields.add("comment");
    openapiFields.add("configuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StreamReach
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StreamReach.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamReach is not found in the empty JSON string", StreamReach.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StreamReach.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamReach` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("upstreamLocationName") != null && !jsonObj.get("upstreamLocationName").isJsonNull()) && !jsonObj.get("upstreamLocationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upstreamLocationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upstreamLocationName").toString()));
      }
      if ((jsonObj.get("downstreamLocationName") != null && !jsonObj.get("downstreamLocationName").isJsonNull()) && !jsonObj.get("downstreamLocationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downstreamLocationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downstreamLocationName").toString()));
      }
      if ((jsonObj.get("streamName") != null && !jsonObj.get("streamName").isJsonNull()) && !jsonObj.get("streamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamName").toString()));
      }
      if ((jsonObj.get("reachName") != null && !jsonObj.get("reachName").isJsonNull()) && !jsonObj.get("reachName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reachName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reachName").toString()));
      }
      if ((jsonObj.get("officeId") != null && !jsonObj.get("officeId").isJsonNull()) && !jsonObj.get("officeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeId").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) && !jsonObj.get("configuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamReach.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamReach' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamReach> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamReach.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamReach>() {
           @Override
           public void write(JsonWriter out, StreamReach value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamReach read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StreamReach given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StreamReach
  * @throws IOException if the JSON string is invalid with respect to StreamReach
  */
  public static StreamReach fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamReach.class);
  }

 /**
  * Convert an instance of StreamReach to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

