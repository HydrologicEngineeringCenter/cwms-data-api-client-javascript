/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ExpressionRating;
import org.openapitools.client.model.TableRating;
import org.openapitools.client.model.TransitionalRating;
import org.openapitools.client.model.UsgsStreamRating;
import org.openapitools.client.model.VerticalDatumInfo;
import org.openapitools.client.model.VirtualRating;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class AbstractRatingMetadata extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AbstractRatingMetadata.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AbstractRatingMetadata.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AbstractRatingMetadata' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExpressionRating> adapterExpressionRating = gson.getDelegateAdapter(this, TypeToken.get(ExpressionRating.class));
            final TypeAdapter<TableRating> adapterTableRating = gson.getDelegateAdapter(this, TypeToken.get(TableRating.class));
            final TypeAdapter<TransitionalRating> adapterTransitionalRating = gson.getDelegateAdapter(this, TypeToken.get(TransitionalRating.class));
            final TypeAdapter<UsgsStreamRating> adapterUsgsStreamRating = gson.getDelegateAdapter(this, TypeToken.get(UsgsStreamRating.class));
            final TypeAdapter<VirtualRating> adapterVirtualRating = gson.getDelegateAdapter(this, TypeToken.get(VirtualRating.class));

            return (TypeAdapter<T>) new TypeAdapter<AbstractRatingMetadata>() {
                @Override
                public void write(JsonWriter out, AbstractRatingMetadata value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ExpressionRating`
                    if (value.getActualInstance() instanceof ExpressionRating) {
                        JsonObject obj = adapterExpressionRating.toJsonTree((ExpressionRating)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TableRating`
                    if (value.getActualInstance() instanceof TableRating) {
                        JsonObject obj = adapterTableRating.toJsonTree((TableRating)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `TransitionalRating`
                    if (value.getActualInstance() instanceof TransitionalRating) {
                        JsonObject obj = adapterTransitionalRating.toJsonTree((TransitionalRating)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `UsgsStreamRating`
                    if (value.getActualInstance() instanceof UsgsStreamRating) {
                        JsonObject obj = adapterUsgsStreamRating.toJsonTree((UsgsStreamRating)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `VirtualRating`
                    if (value.getActualInstance() instanceof VirtualRating) {
                        JsonObject obj = adapterVirtualRating.toJsonTree((VirtualRating)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ExpressionRating, TableRating, TransitionalRating, UsgsStreamRating, VirtualRating");
                }

                @Override
                public AbstractRatingMetadata read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ExpressionRating
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExpressionRating.validateJsonObject(jsonObject);
                        actualAdapter = adapterExpressionRating;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExpressionRating'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExpressionRating failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExpressionRating'", e);
                    }

                    // deserialize TableRating
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TableRating.validateJsonObject(jsonObject);
                        actualAdapter = adapterTableRating;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TableRating'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TableRating failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TableRating'", e);
                    }

                    // deserialize TransitionalRating
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TransitionalRating.validateJsonObject(jsonObject);
                        actualAdapter = adapterTransitionalRating;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TransitionalRating'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TransitionalRating failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TransitionalRating'", e);
                    }

                    // deserialize UsgsStreamRating
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsgsStreamRating.validateJsonObject(jsonObject);
                        actualAdapter = adapterUsgsStreamRating;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsgsStreamRating'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsgsStreamRating failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsgsStreamRating'", e);
                    }

                    // deserialize VirtualRating
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VirtualRating.validateJsonObject(jsonObject);
                        actualAdapter = adapterVirtualRating;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VirtualRating'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VirtualRating failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VirtualRating'", e);
                    }

                    if (match == 1) {
                        AbstractRatingMetadata ret = new AbstractRatingMetadata();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AbstractRatingMetadata: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public AbstractRatingMetadata() {
        super("oneOf", Boolean.FALSE);
    }

    public AbstractRatingMetadata(ExpressionRating o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AbstractRatingMetadata(TableRating o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AbstractRatingMetadata(TransitionalRating o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AbstractRatingMetadata(UsgsStreamRating o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public AbstractRatingMetadata(VirtualRating o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ExpressionRating", new GenericType<ExpressionRating>() {
        });
        schemas.put("TableRating", new GenericType<TableRating>() {
        });
        schemas.put("TransitionalRating", new GenericType<TransitionalRating>() {
        });
        schemas.put("UsgsStreamRating", new GenericType<UsgsStreamRating>() {
        });
        schemas.put("VirtualRating", new GenericType<VirtualRating>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return AbstractRatingMetadata.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ExpressionRating, TableRating, TransitionalRating, UsgsStreamRating, VirtualRating
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ExpressionRating) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TableRating) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransitionalRating) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsgsStreamRating) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VirtualRating) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ExpressionRating, TableRating, TransitionalRating, UsgsStreamRating, VirtualRating");
    }

    /**
     * Get the actual instance, which can be the following:
     * ExpressionRating, TableRating, TransitionalRating, UsgsStreamRating, VirtualRating
     *
     * @return The actual instance (ExpressionRating, TableRating, TransitionalRating, UsgsStreamRating, VirtualRating)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExpressionRating`. If the actual instance is not `ExpressionRating`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExpressionRating`
     * @throws ClassCastException if the instance is not `ExpressionRating`
     */
    public ExpressionRating getExpressionRating() throws ClassCastException {
        return (ExpressionRating)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TableRating`. If the actual instance is not `TableRating`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TableRating`
     * @throws ClassCastException if the instance is not `TableRating`
     */
    public TableRating getTableRating() throws ClassCastException {
        return (TableRating)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TransitionalRating`. If the actual instance is not `TransitionalRating`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransitionalRating`
     * @throws ClassCastException if the instance is not `TransitionalRating`
     */
    public TransitionalRating getTransitionalRating() throws ClassCastException {
        return (TransitionalRating)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsgsStreamRating`. If the actual instance is not `UsgsStreamRating`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsgsStreamRating`
     * @throws ClassCastException if the instance is not `UsgsStreamRating`
     */
    public UsgsStreamRating getUsgsStreamRating() throws ClassCastException {
        return (UsgsStreamRating)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VirtualRating`. If the actual instance is not `VirtualRating`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VirtualRating`
     * @throws ClassCastException if the instance is not `VirtualRating`
     */
    public VirtualRating getVirtualRating() throws ClassCastException {
        return (VirtualRating)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AbstractRatingMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with ExpressionRating
    try {
      ExpressionRating.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ExpressionRating failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TableRating
    try {
      TableRating.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TableRating failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TransitionalRating
    try {
      TransitionalRating.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TransitionalRating failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with UsgsStreamRating
    try {
      UsgsStreamRating.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for UsgsStreamRating failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VirtualRating
    try {
      VirtualRating.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VirtualRating failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for AbstractRatingMetadata with oneOf schemas: ExpressionRating, TableRating, TransitionalRating, UsgsStreamRating, VirtualRating. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of AbstractRatingMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AbstractRatingMetadata
  * @throws IOException if the JSON string is invalid with respect to AbstractRatingMetadata
  */
  public static AbstractRatingMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbstractRatingMetadata.class);
  }

 /**
  * Convert an instance of AbstractRatingMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

