/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Offset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VerticalDatumInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class VerticalDatumInfo {
  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NATIVE_DATUM = "native-datum";
  @SerializedName(SERIALIZED_NAME_NATIVE_DATUM)
  private String nativeDatum;

  public static final String SERIALIZED_NAME_ELEVATION = "elevation";
  @SerializedName(SERIALIZED_NAME_ELEVATION)
  private Double elevation;

  public static final String SERIALIZED_NAME_OFFSETS = "offsets";
  @SerializedName(SERIALIZED_NAME_OFFSETS)
  private List<Offset> offsets;

  public VerticalDatumInfo() {
  }

  public VerticalDatumInfo office(String office) {
    
    this.office = office;
    return this;
  }

   /**
   * Get office
   * @return office
  **/
  @javax.annotation.Nullable

  public String getOffice() {
    return office;
  }


  public void setOffice(String office) {
    this.office = office;
  }


  public VerticalDatumInfo unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    this.unit = unit;
  }


  public VerticalDatumInfo location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    this.location = location;
  }


  public VerticalDatumInfo nativeDatum(String nativeDatum) {
    
    this.nativeDatum = nativeDatum;
    return this;
  }

   /**
   * Get nativeDatum
   * @return nativeDatum
  **/
  @javax.annotation.Nullable

  public String getNativeDatum() {
    return nativeDatum;
  }


  public void setNativeDatum(String nativeDatum) {
    this.nativeDatum = nativeDatum;
  }


  public VerticalDatumInfo elevation(Double elevation) {
    
    this.elevation = elevation;
    return this;
  }

   /**
   * Get elevation
   * @return elevation
  **/
  @javax.annotation.Nullable

  public Double getElevation() {
    return elevation;
  }


  public void setElevation(Double elevation) {
    this.elevation = elevation;
  }


  public VerticalDatumInfo offsets(List<Offset> offsets) {
    
    this.offsets = offsets;
    return this;
  }

  public VerticalDatumInfo addOffsetsItem(Offset offsetsItem) {
    if (this.offsets == null) {
      this.offsets = new ArrayList<>();
    }
    this.offsets.add(offsetsItem);
    return this;
  }

   /**
   * Get offsets
   * @return offsets
  **/
  @javax.annotation.Nullable

  public List<Offset> getOffsets() {
    return offsets;
  }


  public void setOffsets(List<Offset> offsets) {
    this.offsets = offsets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerticalDatumInfo verticalDatumInfo = (VerticalDatumInfo) o;
    return Objects.equals(this.office, verticalDatumInfo.office) &&
        Objects.equals(this.unit, verticalDatumInfo.unit) &&
        Objects.equals(this.location, verticalDatumInfo.location) &&
        Objects.equals(this.nativeDatum, verticalDatumInfo.nativeDatum) &&
        Objects.equals(this.elevation, verticalDatumInfo.elevation) &&
        Objects.equals(this.offsets, verticalDatumInfo.offsets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(office, unit, location, nativeDatum, elevation, offsets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerticalDatumInfo {\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    nativeDatum: ").append(toIndentedString(nativeDatum)).append("\n");
    sb.append("    elevation: ").append(toIndentedString(elevation)).append("\n");
    sb.append("    offsets: ").append(toIndentedString(offsets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("office");
    openapiFields.add("unit");
    openapiFields.add("location");
    openapiFields.add("native-datum");
    openapiFields.add("elevation");
    openapiFields.add("offsets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VerticalDatumInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VerticalDatumInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerticalDatumInfo is not found in the empty JSON string", VerticalDatumInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VerticalDatumInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerticalDatumInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("native-datum") != null && !jsonObj.get("native-datum").isJsonNull()) && !jsonObj.get("native-datum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `native-datum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("native-datum").toString()));
      }
      if (jsonObj.get("offsets") != null && !jsonObj.get("offsets").isJsonNull()) {
        JsonArray jsonArrayoffsets = jsonObj.getAsJsonArray("offsets");
        if (jsonArrayoffsets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offsets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offsets` to be an array in the JSON string but got `%s`", jsonObj.get("offsets").toString()));
          }

          // validate the optional field `offsets` (array)
          for (int i = 0; i < jsonArrayoffsets.size(); i++) {
            Offset.validateJsonObject(jsonArrayoffsets.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerticalDatumInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerticalDatumInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerticalDatumInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerticalDatumInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<VerticalDatumInfo>() {
           @Override
           public void write(JsonWriter out, VerticalDatumInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerticalDatumInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerticalDatumInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerticalDatumInfo
  * @throws IOException if the JSON string is invalid with respect to VerticalDatumInfo
  */
  public static VerticalDatumInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerticalDatumInfo.class);
  }

 /**
  * Convert an instance of VerticalDatumInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

