/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.LocationAlias;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LocationCatalogEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class LocationCatalogEntry {
  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEAREST_CITY = "nearestCity";
  @SerializedName(SERIALIZED_NAME_NEAREST_CITY)
  private String nearestCity;

  public static final String SERIALIZED_NAME_PUBLIC_NAME = "publicName";
  @SerializedName(SERIALIZED_NAME_PUBLIC_NAME)
  private String publicName;

  public static final String SERIALIZED_NAME_LONG_NAME = "longName";
  @SerializedName(SERIALIZED_NAME_LONG_NAME)
  private String longName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_PUBLISHED_LATITUDE = "publishedLatitude";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_LATITUDE)
  private Double publishedLatitude;

  public static final String SERIALIZED_NAME_PUBLISHED_LONGITUDE = "publishedLongitude";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_LONGITUDE)
  private Double publishedLongitude;

  public static final String SERIALIZED_NAME_HORIZONTAL_DATUM = "horizontalDatum";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_DATUM)
  private String horizontalDatum;

  public static final String SERIALIZED_NAME_ELEVATION = "elevation";
  @SerializedName(SERIALIZED_NAME_ELEVATION)
  private Double elevation;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_VERTICAL_DATUM = "verticalDatum";
  @SerializedName(SERIALIZED_NAME_VERTICAL_DATUM)
  private String verticalDatum;

  public static final String SERIALIZED_NAME_NATION = "nation";
  @SerializedName(SERIALIZED_NAME_NATION)
  private String nation;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_BOUNDING_OFFICE = "boundingOffice";
  @SerializedName(SERIALIZED_NAME_BOUNDING_OFFICE)
  private String boundingOffice;

  public static final String SERIALIZED_NAME_MAP_LABEL = "mapLabel";
  @SerializedName(SERIALIZED_NAME_MAP_LABEL)
  private String mapLabel;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List<LocationAlias> aliases;

  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private String cursor;

  public LocationCatalogEntry() {
  }

  public LocationCatalogEntry office(String office) {
    
    this.office = office;
    return this;
  }

   /**
   * Get office
   * @return office
  **/
  @javax.annotation.Nullable

  public String getOffice() {
    return office;
  }


  public void setOffice(String office) {
    this.office = office;
  }


  public LocationCatalogEntry name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public LocationCatalogEntry nearestCity(String nearestCity) {
    
    this.nearestCity = nearestCity;
    return this;
  }

   /**
   * Get nearestCity
   * @return nearestCity
  **/
  @javax.annotation.Nullable

  public String getNearestCity() {
    return nearestCity;
  }


  public void setNearestCity(String nearestCity) {
    this.nearestCity = nearestCity;
  }


  public LocationCatalogEntry publicName(String publicName) {
    
    this.publicName = publicName;
    return this;
  }

   /**
   * Get publicName
   * @return publicName
  **/
  @javax.annotation.Nullable

  public String getPublicName() {
    return publicName;
  }


  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  public LocationCatalogEntry longName(String longName) {
    
    this.longName = longName;
    return this;
  }

   /**
   * Get longName
   * @return longName
  **/
  @javax.annotation.Nullable

  public String getLongName() {
    return longName;
  }


  public void setLongName(String longName) {
    this.longName = longName;
  }


  public LocationCatalogEntry description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public LocationCatalogEntry kind(String kind) {
    
    this.kind = kind;
    return this;
  }

   /**
   * Get kind
   * @return kind
  **/
  @javax.annotation.Nullable

  public String getKind() {
    return kind;
  }


  public void setKind(String kind) {
    this.kind = kind;
  }


  public LocationCatalogEntry type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public LocationCatalogEntry timeZone(String timeZone) {
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Get timeZone
   * @return timeZone
  **/
  @javax.annotation.Nullable

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public LocationCatalogEntry latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @javax.annotation.Nullable

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public LocationCatalogEntry longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @javax.annotation.Nullable

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public LocationCatalogEntry publishedLatitude(Double publishedLatitude) {
    
    this.publishedLatitude = publishedLatitude;
    return this;
  }

   /**
   * Get publishedLatitude
   * @return publishedLatitude
  **/
  @javax.annotation.Nullable

  public Double getPublishedLatitude() {
    return publishedLatitude;
  }


  public void setPublishedLatitude(Double publishedLatitude) {
    this.publishedLatitude = publishedLatitude;
  }


  public LocationCatalogEntry publishedLongitude(Double publishedLongitude) {
    
    this.publishedLongitude = publishedLongitude;
    return this;
  }

   /**
   * Get publishedLongitude
   * @return publishedLongitude
  **/
  @javax.annotation.Nullable

  public Double getPublishedLongitude() {
    return publishedLongitude;
  }


  public void setPublishedLongitude(Double publishedLongitude) {
    this.publishedLongitude = publishedLongitude;
  }


  public LocationCatalogEntry horizontalDatum(String horizontalDatum) {
    
    this.horizontalDatum = horizontalDatum;
    return this;
  }

   /**
   * Get horizontalDatum
   * @return horizontalDatum
  **/
  @javax.annotation.Nullable

  public String getHorizontalDatum() {
    return horizontalDatum;
  }


  public void setHorizontalDatum(String horizontalDatum) {
    this.horizontalDatum = horizontalDatum;
  }


  public LocationCatalogEntry elevation(Double elevation) {
    
    this.elevation = elevation;
    return this;
  }

   /**
   * Get elevation
   * @return elevation
  **/
  @javax.annotation.Nullable

  public Double getElevation() {
    return elevation;
  }


  public void setElevation(Double elevation) {
    this.elevation = elevation;
  }


  public LocationCatalogEntry unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    this.unit = unit;
  }


  public LocationCatalogEntry verticalDatum(String verticalDatum) {
    
    this.verticalDatum = verticalDatum;
    return this;
  }

   /**
   * Get verticalDatum
   * @return verticalDatum
  **/
  @javax.annotation.Nullable

  public String getVerticalDatum() {
    return verticalDatum;
  }


  public void setVerticalDatum(String verticalDatum) {
    this.verticalDatum = verticalDatum;
  }


  public LocationCatalogEntry nation(String nation) {
    
    this.nation = nation;
    return this;
  }

   /**
   * Get nation
   * @return nation
  **/
  @javax.annotation.Nullable

  public String getNation() {
    return nation;
  }


  public void setNation(String nation) {
    this.nation = nation;
  }


  public LocationCatalogEntry state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public LocationCatalogEntry county(String county) {
    
    this.county = county;
    return this;
  }

   /**
   * Get county
   * @return county
  **/
  @javax.annotation.Nullable

  public String getCounty() {
    return county;
  }


  public void setCounty(String county) {
    this.county = county;
  }


  public LocationCatalogEntry boundingOffice(String boundingOffice) {
    
    this.boundingOffice = boundingOffice;
    return this;
  }

   /**
   * Get boundingOffice
   * @return boundingOffice
  **/
  @javax.annotation.Nullable

  public String getBoundingOffice() {
    return boundingOffice;
  }


  public void setBoundingOffice(String boundingOffice) {
    this.boundingOffice = boundingOffice;
  }


  public LocationCatalogEntry mapLabel(String mapLabel) {
    
    this.mapLabel = mapLabel;
    return this;
  }

   /**
   * Get mapLabel
   * @return mapLabel
  **/
  @javax.annotation.Nullable

  public String getMapLabel() {
    return mapLabel;
  }


  public void setMapLabel(String mapLabel) {
    this.mapLabel = mapLabel;
  }


  public LocationCatalogEntry active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public LocationCatalogEntry aliases(List<LocationAlias> aliases) {
    
    this.aliases = aliases;
    return this;
  }

  public LocationCatalogEntry addAliasesItem(LocationAlias aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Get aliases
   * @return aliases
  **/
  @javax.annotation.Nullable

  public List<LocationAlias> getAliases() {
    return aliases;
  }


  public void setAliases(List<LocationAlias> aliases) {
    this.aliases = aliases;
  }


  public LocationCatalogEntry cursor(String cursor) {
    
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable

  public String getCursor() {
    return cursor;
  }


  public void setCursor(String cursor) {
    this.cursor = cursor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationCatalogEntry locationCatalogEntry = (LocationCatalogEntry) o;
    return Objects.equals(this.office, locationCatalogEntry.office) &&
        Objects.equals(this.name, locationCatalogEntry.name) &&
        Objects.equals(this.nearestCity, locationCatalogEntry.nearestCity) &&
        Objects.equals(this.publicName, locationCatalogEntry.publicName) &&
        Objects.equals(this.longName, locationCatalogEntry.longName) &&
        Objects.equals(this.description, locationCatalogEntry.description) &&
        Objects.equals(this.kind, locationCatalogEntry.kind) &&
        Objects.equals(this.type, locationCatalogEntry.type) &&
        Objects.equals(this.timeZone, locationCatalogEntry.timeZone) &&
        Objects.equals(this.latitude, locationCatalogEntry.latitude) &&
        Objects.equals(this.longitude, locationCatalogEntry.longitude) &&
        Objects.equals(this.publishedLatitude, locationCatalogEntry.publishedLatitude) &&
        Objects.equals(this.publishedLongitude, locationCatalogEntry.publishedLongitude) &&
        Objects.equals(this.horizontalDatum, locationCatalogEntry.horizontalDatum) &&
        Objects.equals(this.elevation, locationCatalogEntry.elevation) &&
        Objects.equals(this.unit, locationCatalogEntry.unit) &&
        Objects.equals(this.verticalDatum, locationCatalogEntry.verticalDatum) &&
        Objects.equals(this.nation, locationCatalogEntry.nation) &&
        Objects.equals(this.state, locationCatalogEntry.state) &&
        Objects.equals(this.county, locationCatalogEntry.county) &&
        Objects.equals(this.boundingOffice, locationCatalogEntry.boundingOffice) &&
        Objects.equals(this.mapLabel, locationCatalogEntry.mapLabel) &&
        Objects.equals(this.active, locationCatalogEntry.active) &&
        Objects.equals(this.aliases, locationCatalogEntry.aliases) &&
        Objects.equals(this.cursor, locationCatalogEntry.cursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(office, name, nearestCity, publicName, longName, description, kind, type, timeZone, latitude, longitude, publishedLatitude, publishedLongitude, horizontalDatum, elevation, unit, verticalDatum, nation, state, county, boundingOffice, mapLabel, active, aliases, cursor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationCatalogEntry {\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nearestCity: ").append(toIndentedString(nearestCity)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("    longName: ").append(toIndentedString(longName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    publishedLatitude: ").append(toIndentedString(publishedLatitude)).append("\n");
    sb.append("    publishedLongitude: ").append(toIndentedString(publishedLongitude)).append("\n");
    sb.append("    horizontalDatum: ").append(toIndentedString(horizontalDatum)).append("\n");
    sb.append("    elevation: ").append(toIndentedString(elevation)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    verticalDatum: ").append(toIndentedString(verticalDatum)).append("\n");
    sb.append("    nation: ").append(toIndentedString(nation)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    boundingOffice: ").append(toIndentedString(boundingOffice)).append("\n");
    sb.append("    mapLabel: ").append(toIndentedString(mapLabel)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("office");
    openapiFields.add("name");
    openapiFields.add("nearestCity");
    openapiFields.add("publicName");
    openapiFields.add("longName");
    openapiFields.add("description");
    openapiFields.add("kind");
    openapiFields.add("type");
    openapiFields.add("timeZone");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("publishedLatitude");
    openapiFields.add("publishedLongitude");
    openapiFields.add("horizontalDatum");
    openapiFields.add("elevation");
    openapiFields.add("unit");
    openapiFields.add("verticalDatum");
    openapiFields.add("nation");
    openapiFields.add("state");
    openapiFields.add("county");
    openapiFields.add("boundingOffice");
    openapiFields.add("mapLabel");
    openapiFields.add("active");
    openapiFields.add("aliases");
    openapiFields.add("cursor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocationCatalogEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LocationCatalogEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationCatalogEntry is not found in the empty JSON string", LocationCatalogEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LocationCatalogEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationCatalogEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nearestCity") != null && !jsonObj.get("nearestCity").isJsonNull()) && !jsonObj.get("nearestCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nearestCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nearestCity").toString()));
      }
      if ((jsonObj.get("publicName") != null && !jsonObj.get("publicName").isJsonNull()) && !jsonObj.get("publicName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicName").toString()));
      }
      if ((jsonObj.get("longName") != null && !jsonObj.get("longName").isJsonNull()) && !jsonObj.get("longName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("horizontalDatum") != null && !jsonObj.get("horizontalDatum").isJsonNull()) && !jsonObj.get("horizontalDatum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horizontalDatum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horizontalDatum").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("verticalDatum") != null && !jsonObj.get("verticalDatum").isJsonNull()) && !jsonObj.get("verticalDatum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verticalDatum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verticalDatum").toString()));
      }
      if ((jsonObj.get("nation") != null && !jsonObj.get("nation").isJsonNull()) && !jsonObj.get("nation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nation").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("boundingOffice") != null && !jsonObj.get("boundingOffice").isJsonNull()) && !jsonObj.get("boundingOffice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `boundingOffice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("boundingOffice").toString()));
      }
      if ((jsonObj.get("mapLabel") != null && !jsonObj.get("mapLabel").isJsonNull()) && !jsonObj.get("mapLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapLabel").toString()));
      }
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonNull()) {
        JsonArray jsonArrayaliases = jsonObj.getAsJsonArray("aliases");
        if (jsonArrayaliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
          }

          // validate the optional field `aliases` (array)
          for (int i = 0; i < jsonArrayaliases.size(); i++) {
            LocationAlias.validateJsonObject(jsonArrayaliases.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull()) && !jsonObj.get("cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cursor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationCatalogEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationCatalogEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationCatalogEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationCatalogEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationCatalogEntry>() {
           @Override
           public void write(JsonWriter out, LocationCatalogEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationCatalogEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocationCatalogEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocationCatalogEntry
  * @throws IOException if the JSON string is invalid with respect to LocationCatalogEntry
  */
  public static LocationCatalogEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationCatalogEntry.class);
  }

 /**
  * Convert an instance of LocationCatalogEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

