/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TimeSeriesExtents;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeseriesCatalogEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class TimeseriesCatalogEntry {
  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_INTERVAL_OFFSET = "intervalOffset";
  @SerializedName(SERIALIZED_NAME_INTERVAL_OFFSET)
  private Long intervalOffset;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_EXTENTS = "extents";
  @SerializedName(SERIALIZED_NAME_EXTENTS)
  private List<TimeSeriesExtents> extents;

  public static final String SERIALIZED_NAME_CURSOR = "cursor";
  @SerializedName(SERIALIZED_NAME_CURSOR)
  private String cursor;

  public TimeseriesCatalogEntry() {
  }

  public TimeseriesCatalogEntry office(String office) {
    
    this.office = office;
    return this;
  }

   /**
   * Get office
   * @return office
  **/
  @javax.annotation.Nullable

  public String getOffice() {
    return office;
  }


  public void setOffice(String office) {
    this.office = office;
  }


  public TimeseriesCatalogEntry name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TimeseriesCatalogEntry units(String units) {
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable

  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    this.units = units;
  }


  public TimeseriesCatalogEntry interval(String interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @javax.annotation.Nullable

  public String getInterval() {
    return interval;
  }


  public void setInterval(String interval) {
    this.interval = interval;
  }


  public TimeseriesCatalogEntry intervalOffset(Long intervalOffset) {
    
    this.intervalOffset = intervalOffset;
    return this;
  }

   /**
   * Offset from top of interval
   * @return intervalOffset
  **/
  @javax.annotation.Nullable

  public Long getIntervalOffset() {
    return intervalOffset;
  }


  public void setIntervalOffset(Long intervalOffset) {
    this.intervalOffset = intervalOffset;
  }


  public TimeseriesCatalogEntry timeZone(String timeZone) {
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Only on 21.1.1 Database. The timezone the Interval Offset is from.
   * @return timeZone
  **/
  @javax.annotation.Nullable

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public TimeseriesCatalogEntry extents(List<TimeSeriesExtents> extents) {
    
    this.extents = extents;
    return this;
  }

  public TimeseriesCatalogEntry addExtentsItem(TimeSeriesExtents extentsItem) {
    if (this.extents == null) {
      this.extents = new ArrayList<>();
    }
    this.extents.add(extentsItem);
    return this;
  }

   /**
   * Get extents
   * @return extents
  **/
  @javax.annotation.Nullable

  public List<TimeSeriesExtents> getExtents() {
    return extents;
  }


  public void setExtents(List<TimeSeriesExtents> extents) {
    this.extents = extents;
  }


  public TimeseriesCatalogEntry cursor(String cursor) {
    
    this.cursor = cursor;
    return this;
  }

   /**
   * Get cursor
   * @return cursor
  **/
  @javax.annotation.Nullable

  public String getCursor() {
    return cursor;
  }


  public void setCursor(String cursor) {
    this.cursor = cursor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeseriesCatalogEntry timeseriesCatalogEntry = (TimeseriesCatalogEntry) o;
    return Objects.equals(this.office, timeseriesCatalogEntry.office) &&
        Objects.equals(this.name, timeseriesCatalogEntry.name) &&
        Objects.equals(this.units, timeseriesCatalogEntry.units) &&
        Objects.equals(this.interval, timeseriesCatalogEntry.interval) &&
        Objects.equals(this.intervalOffset, timeseriesCatalogEntry.intervalOffset) &&
        Objects.equals(this.timeZone, timeseriesCatalogEntry.timeZone) &&
        Objects.equals(this.extents, timeseriesCatalogEntry.extents) &&
        Objects.equals(this.cursor, timeseriesCatalogEntry.cursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(office, name, units, interval, intervalOffset, timeZone, extents, cursor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeseriesCatalogEntry {\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalOffset: ").append(toIndentedString(intervalOffset)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    extents: ").append(toIndentedString(extents)).append("\n");
    sb.append("    cursor: ").append(toIndentedString(cursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("office");
    openapiFields.add("name");
    openapiFields.add("units");
    openapiFields.add("interval");
    openapiFields.add("intervalOffset");
    openapiFields.add("timeZone");
    openapiFields.add("extents");
    openapiFields.add("cursor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeseriesCatalogEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeseriesCatalogEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeseriesCatalogEntry is not found in the empty JSON string", TimeseriesCatalogEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TimeseriesCatalogEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeseriesCatalogEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if (jsonObj.get("extents") != null && !jsonObj.get("extents").isJsonNull()) {
        JsonArray jsonArrayextents = jsonObj.getAsJsonArray("extents");
        if (jsonArrayextents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extents").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extents` to be an array in the JSON string but got `%s`", jsonObj.get("extents").toString()));
          }

          // validate the optional field `extents` (array)
          for (int i = 0; i < jsonArrayextents.size(); i++) {
            TimeSeriesExtents.validateJsonObject(jsonArrayextents.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("cursor") != null && !jsonObj.get("cursor").isJsonNull()) && !jsonObj.get("cursor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cursor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cursor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeseriesCatalogEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeseriesCatalogEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeseriesCatalogEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeseriesCatalogEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeseriesCatalogEntry>() {
           @Override
           public void write(JsonWriter out, TimeseriesCatalogEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeseriesCatalogEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeseriesCatalogEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeseriesCatalogEntry
  * @throws IOException if the JSON string is invalid with respect to TimeseriesCatalogEntry
  */
  public static TimeseriesCatalogEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeseriesCatalogEntry.class);
  }

 /**
  * Convert an instance of TimeseriesCatalogEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

