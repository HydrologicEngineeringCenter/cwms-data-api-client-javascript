/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TimeSeriesIntervalUnitsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The interval of the time-series, in ISO-8601 duration format
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class TimeSeriesInterval {
  public static final String SERIALIZED_NAME_SECONDS = "seconds";
  @SerializedName(SERIALIZED_NAME_SECONDS)
  private Long seconds;

  public static final String SERIALIZED_NAME_ZERO = "zero";
  @SerializedName(SERIALIZED_NAME_ZERO)
  private Boolean zero;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private List<TimeSeriesIntervalUnitsInner> units;

  public static final String SERIALIZED_NAME_NANO = "nano";
  @SerializedName(SERIALIZED_NAME_NANO)
  private Integer nano;

  public static final String SERIALIZED_NAME_NEGATIVE = "negative";
  @SerializedName(SERIALIZED_NAME_NEGATIVE)
  private Boolean negative;

  public TimeSeriesInterval() {
  }

  public TimeSeriesInterval seconds(Long seconds) {
    
    this.seconds = seconds;
    return this;
  }

   /**
   * Get seconds
   * @return seconds
  **/
  @javax.annotation.Nullable

  public Long getSeconds() {
    return seconds;
  }


  public void setSeconds(Long seconds) {
    this.seconds = seconds;
  }


  public TimeSeriesInterval zero(Boolean zero) {
    
    this.zero = zero;
    return this;
  }

   /**
   * Get zero
   * @return zero
  **/
  @javax.annotation.Nullable

  public Boolean getZero() {
    return zero;
  }


  public void setZero(Boolean zero) {
    this.zero = zero;
  }


  public TimeSeriesInterval units(List<TimeSeriesIntervalUnitsInner> units) {
    
    this.units = units;
    return this;
  }

  public TimeSeriesInterval addUnitsItem(TimeSeriesIntervalUnitsInner unitsItem) {
    if (this.units == null) {
      this.units = new ArrayList<>();
    }
    this.units.add(unitsItem);
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable

  public List<TimeSeriesIntervalUnitsInner> getUnits() {
    return units;
  }


  public void setUnits(List<TimeSeriesIntervalUnitsInner> units) {
    this.units = units;
  }


  public TimeSeriesInterval nano(Integer nano) {
    
    this.nano = nano;
    return this;
  }

   /**
   * Get nano
   * @return nano
  **/
  @javax.annotation.Nullable

  public Integer getNano() {
    return nano;
  }


  public void setNano(Integer nano) {
    this.nano = nano;
  }


  public TimeSeriesInterval negative(Boolean negative) {
    
    this.negative = negative;
    return this;
  }

   /**
   * Get negative
   * @return negative
  **/
  @javax.annotation.Nullable

  public Boolean getNegative() {
    return negative;
  }


  public void setNegative(Boolean negative) {
    this.negative = negative;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesInterval timeSeriesInterval = (TimeSeriesInterval) o;
    return Objects.equals(this.seconds, timeSeriesInterval.seconds) &&
        Objects.equals(this.zero, timeSeriesInterval.zero) &&
        Objects.equals(this.units, timeSeriesInterval.units) &&
        Objects.equals(this.nano, timeSeriesInterval.nano) &&
        Objects.equals(this.negative, timeSeriesInterval.negative);
  }

  @Override
  public int hashCode() {
    return Objects.hash(seconds, zero, units, nano, negative);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesInterval {\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("    zero: ").append(toIndentedString(zero)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    nano: ").append(toIndentedString(nano)).append("\n");
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("seconds");
    openapiFields.add("zero");
    openapiFields.add("units");
    openapiFields.add("nano");
    openapiFields.add("negative");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeSeriesInterval
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeSeriesInterval.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesInterval is not found in the empty JSON string", TimeSeriesInterval.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesInterval.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesInterval` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) {
        JsonArray jsonArrayunits = jsonObj.getAsJsonArray("units");
        if (jsonArrayunits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("units").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `units` to be an array in the JSON string but got `%s`", jsonObj.get("units").toString()));
          }

          // validate the optional field `units` (array)
          for (int i = 0; i < jsonArrayunits.size(); i++) {
            TimeSeriesIntervalUnitsInner.validateJsonObject(jsonArrayunits.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesInterval.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesInterval' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesInterval> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesInterval.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesInterval>() {
           @Override
           public void write(JsonWriter out, TimeSeriesInterval value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesInterval read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeSeriesInterval given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeSeriesInterval
  * @throws IOException if the JSON string is invalid with respect to TimeSeriesInterval
  */
  public static TimeSeriesInterval fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesInterval.class);
  }

 /**
  * Convert an instance of TimeSeriesInterval to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

