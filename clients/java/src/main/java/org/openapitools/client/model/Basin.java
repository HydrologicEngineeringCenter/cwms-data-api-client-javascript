/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.Stream;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basin
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class Basin {
  public static final String SERIALIZED_NAME_BASIN_NAME = "basinName";
  @SerializedName(SERIALIZED_NAME_BASIN_NAME)
  private String basinName;

  public static final String SERIALIZED_NAME_OFFICE_ID = "officeId";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_PRIMARY_STREAM = "primaryStream";
  @SerializedName(SERIALIZED_NAME_PRIMARY_STREAM)
  private Stream primaryStream;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Double sortOrder;

  public static final String SERIALIZED_NAME_BASIN_AREA = "basinArea";
  @SerializedName(SERIALIZED_NAME_BASIN_AREA)
  private Double basinArea;

  public static final String SERIALIZED_NAME_CONTRIBUTING_AREA = "contributingArea";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTING_AREA)
  private Double contributingArea;

  public static final String SERIALIZED_NAME_PARENT_BASIN_ID = "parentBasinId";
  @SerializedName(SERIALIZED_NAME_PARENT_BASIN_ID)
  private String parentBasinId;

  public Basin() {
  }

  public Basin basinName(String basinName) {
    
    this.basinName = basinName;
    return this;
  }

   /**
   * Get basinName
   * @return basinName
  **/
  @javax.annotation.Nullable

  public String getBasinName() {
    return basinName;
  }


  public void setBasinName(String basinName) {
    this.basinName = basinName;
  }


  public Basin officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public Basin primaryStream(Stream primaryStream) {
    
    this.primaryStream = primaryStream;
    return this;
  }

   /**
   * Get primaryStream
   * @return primaryStream
  **/
  @javax.annotation.Nullable

  public Stream getPrimaryStream() {
    return primaryStream;
  }


  public void setPrimaryStream(Stream primaryStream) {
    this.primaryStream = primaryStream;
  }


  public Basin sortOrder(Double sortOrder) {
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Get sortOrder
   * @return sortOrder
  **/
  @javax.annotation.Nullable

  public Double getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(Double sortOrder) {
    this.sortOrder = sortOrder;
  }


  public Basin basinArea(Double basinArea) {
    
    this.basinArea = basinArea;
    return this;
  }

   /**
   * Get basinArea
   * @return basinArea
  **/
  @javax.annotation.Nullable

  public Double getBasinArea() {
    return basinArea;
  }


  public void setBasinArea(Double basinArea) {
    this.basinArea = basinArea;
  }


  public Basin contributingArea(Double contributingArea) {
    
    this.contributingArea = contributingArea;
    return this;
  }

   /**
   * Get contributingArea
   * @return contributingArea
  **/
  @javax.annotation.Nullable

  public Double getContributingArea() {
    return contributingArea;
  }


  public void setContributingArea(Double contributingArea) {
    this.contributingArea = contributingArea;
  }


  public Basin parentBasinId(String parentBasinId) {
    
    this.parentBasinId = parentBasinId;
    return this;
  }

   /**
   * Get parentBasinId
   * @return parentBasinId
  **/
  @javax.annotation.Nullable

  public String getParentBasinId() {
    return parentBasinId;
  }


  public void setParentBasinId(String parentBasinId) {
    this.parentBasinId = parentBasinId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Basin basin = (Basin) o;
    return Objects.equals(this.basinName, basin.basinName) &&
        Objects.equals(this.officeId, basin.officeId) &&
        Objects.equals(this.primaryStream, basin.primaryStream) &&
        Objects.equals(this.sortOrder, basin.sortOrder) &&
        Objects.equals(this.basinArea, basin.basinArea) &&
        Objects.equals(this.contributingArea, basin.contributingArea) &&
        Objects.equals(this.parentBasinId, basin.parentBasinId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basinName, officeId, primaryStream, sortOrder, basinArea, contributingArea, parentBasinId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Basin {\n");
    sb.append("    basinName: ").append(toIndentedString(basinName)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    primaryStream: ").append(toIndentedString(primaryStream)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    basinArea: ").append(toIndentedString(basinArea)).append("\n");
    sb.append("    contributingArea: ").append(toIndentedString(contributingArea)).append("\n");
    sb.append("    parentBasinId: ").append(toIndentedString(parentBasinId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basinName");
    openapiFields.add("officeId");
    openapiFields.add("primaryStream");
    openapiFields.add("sortOrder");
    openapiFields.add("basinArea");
    openapiFields.add("contributingArea");
    openapiFields.add("parentBasinId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Basin
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Basin.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Basin is not found in the empty JSON string", Basin.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Basin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Basin` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("basinName") != null && !jsonObj.get("basinName").isJsonNull()) && !jsonObj.get("basinName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basinName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basinName").toString()));
      }
      if ((jsonObj.get("officeId") != null && !jsonObj.get("officeId").isJsonNull()) && !jsonObj.get("officeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeId").toString()));
      }
      // validate the optional field `primaryStream`
      if (jsonObj.get("primaryStream") != null && !jsonObj.get("primaryStream").isJsonNull()) {
        Stream.validateJsonObject(jsonObj.getAsJsonObject("primaryStream"));
      }
      if ((jsonObj.get("parentBasinId") != null && !jsonObj.get("parentBasinId").isJsonNull()) && !jsonObj.get("parentBasinId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentBasinId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentBasinId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Basin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Basin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Basin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Basin.class));

       return (TypeAdapter<T>) new TypeAdapter<Basin>() {
           @Override
           public void write(JsonWriter out, Basin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Basin read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Basin given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Basin
  * @throws IOException if the JSON string is invalid with respect to Basin
  */
  public static Basin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Basin.class);
  }

 /**
  * Convert an instance of Basin to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

