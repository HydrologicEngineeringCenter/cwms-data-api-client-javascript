/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Clob;
import org.openapitools.client.model.Clobs;
import org.openapitools.client.model.RadarError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClobApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClobApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCwmsDataClobs
     * @param office Specifies the owning office. If this field is not specified, matching information from all offices shall be returned. (optional)
     * @param page This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param cursor Deprecated. Use &#39;page&#39; instead. (optional)
     * @param pageSize How many entries per page returned. Default 20. (optional)
     * @param pageSize2 Deprecated, use &#39;page-size&#39; instead. (optional)
     * @param includeValues Do you want the value associated with this particular clob (default: false) (optional)
     * @param includeValues2 Deprecated, use &#39;include-values&#39; instead. (optional)
     * @param like Posix regular expression matching against the id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of clobs. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataClobsCall(String office, String page, String cursor, Integer pageSize, Integer pageSize2, Boolean includeValues, Boolean includeValues2, String like, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwms-data/clobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        if (pageSize2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize2));
        }

        if (includeValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-values", includeValues));
        }

        if (includeValues2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeValues", includeValues2));
        }

        if (like != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("like", like));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json;version=2",
            "application/xml;version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCwmsDataClobsValidateBeforeCall(String office, String page, String cursor, Integer pageSize, Integer pageSize2, Boolean includeValues, Boolean includeValues2, String like, final ApiCallback _callback) throws ApiException {
        return getCwmsDataClobsCall(office, page, cursor, pageSize, pageSize2, includeValues, includeValues2, like, _callback);

    }

    /**
     * Get cwmsData clobs
     * 
     * @param office Specifies the owning office. If this field is not specified, matching information from all offices shall be returned. (optional)
     * @param page This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param cursor Deprecated. Use &#39;page&#39; instead. (optional)
     * @param pageSize How many entries per page returned. Default 20. (optional)
     * @param pageSize2 Deprecated, use &#39;page-size&#39; instead. (optional)
     * @param includeValues Do you want the value associated with this particular clob (default: false) (optional)
     * @param includeValues2 Deprecated, use &#39;include-values&#39; instead. (optional)
     * @param like Posix regular expression matching against the id (optional)
     * @return Clobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of clobs. </td><td>  -  </td></tr>
     </table>
     */
    public Clobs getCwmsDataClobs(String office, String page, String cursor, Integer pageSize, Integer pageSize2, Boolean includeValues, Boolean includeValues2, String like) throws ApiException {
        ApiResponse<Clobs> localVarResp = getCwmsDataClobsWithHttpInfo(office, page, cursor, pageSize, pageSize2, includeValues, includeValues2, like);
        return localVarResp.getData();
    }

    /**
     * Get cwmsData clobs
     * 
     * @param office Specifies the owning office. If this field is not specified, matching information from all offices shall be returned. (optional)
     * @param page This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param cursor Deprecated. Use &#39;page&#39; instead. (optional)
     * @param pageSize How many entries per page returned. Default 20. (optional)
     * @param pageSize2 Deprecated, use &#39;page-size&#39; instead. (optional)
     * @param includeValues Do you want the value associated with this particular clob (default: false) (optional)
     * @param includeValues2 Deprecated, use &#39;include-values&#39; instead. (optional)
     * @param like Posix regular expression matching against the id (optional)
     * @return ApiResponse&lt;Clobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of clobs. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Clobs> getCwmsDataClobsWithHttpInfo(String office, String page, String cursor, Integer pageSize, Integer pageSize2, Boolean includeValues, Boolean includeValues2, String like) throws ApiException {
        okhttp3.Call localVarCall = getCwmsDataClobsValidateBeforeCall(office, page, cursor, pageSize, pageSize2, includeValues, includeValues2, like, null);
        Type localVarReturnType = new TypeToken<Clobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cwmsData clobs (asynchronously)
     * 
     * @param office Specifies the owning office. If this field is not specified, matching information from all offices shall be returned. (optional)
     * @param page This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param cursor Deprecated. Use &#39;page&#39; instead. (optional)
     * @param pageSize How many entries per page returned. Default 20. (optional)
     * @param pageSize2 Deprecated, use &#39;page-size&#39; instead. (optional)
     * @param includeValues Do you want the value associated with this particular clob (default: false) (optional)
     * @param includeValues2 Deprecated, use &#39;include-values&#39; instead. (optional)
     * @param like Posix regular expression matching against the id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of clobs. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataClobsAsync(String office, String page, String cursor, Integer pageSize, Integer pageSize2, Boolean includeValues, Boolean includeValues2, String like, final ApiCallback<Clobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCwmsDataClobsValidateBeforeCall(office, page, cursor, pageSize, pageSize2, includeValues, includeValues2, like, _callback);
        Type localVarReturnType = new TypeToken<Clobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCwmsDataClobsWithClobId
     * @param clobId  (required)
     * @param office Specifies the owning office. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns requested clob. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataClobsWithClobIdCall(String clobId, String office, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwms-data/clobs/{clob-id}"
            .replace("{" + "clob-id" + "}", localVarApiClient.escapeString(clobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCwmsDataClobsWithClobIdValidateBeforeCall(String clobId, String office, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clobId' is set
        if (clobId == null) {
            throw new ApiException("Missing the required parameter 'clobId' when calling getCwmsDataClobsWithClobId(Async)");
        }

        return getCwmsDataClobsWithClobIdCall(clobId, office, _callback);

    }

    /**
     * Get cwmsData clobs with clobId
     * 
     * @param clobId  (required)
     * @param office Specifies the owning office. (optional)
     * @return Clob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns requested clob. </td><td>  -  </td></tr>
     </table>
     */
    public Clob getCwmsDataClobsWithClobId(String clobId, String office) throws ApiException {
        ApiResponse<Clob> localVarResp = getCwmsDataClobsWithClobIdWithHttpInfo(clobId, office);
        return localVarResp.getData();
    }

    /**
     * Get cwmsData clobs with clobId
     * 
     * @param clobId  (required)
     * @param office Specifies the owning office. (optional)
     * @return ApiResponse&lt;Clob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns requested clob. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Clob> getCwmsDataClobsWithClobIdWithHttpInfo(String clobId, String office) throws ApiException {
        okhttp3.Call localVarCall = getCwmsDataClobsWithClobIdValidateBeforeCall(clobId, office, null);
        Type localVarReturnType = new TypeToken<Clob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cwmsData clobs with clobId (asynchronously)
     * 
     * @param clobId  (required)
     * @param office Specifies the owning office. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Returns requested clob. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataClobsWithClobIdAsync(String clobId, String office, final ApiCallback<Clob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCwmsDataClobsWithClobIdValidateBeforeCall(clobId, office, _callback);
        Type localVarReturnType = new TypeToken<Clob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
