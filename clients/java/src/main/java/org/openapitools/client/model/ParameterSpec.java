/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ParameterSpec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class ParameterSpec {
  public static final String SERIALIZED_NAME_PARAMETER = "parameter";
  @SerializedName(SERIALIZED_NAME_PARAMETER)
  private String parameter;

  public static final String SERIALIZED_NAME_IN_RANGE_METHOD = "in-range-method";
  @SerializedName(SERIALIZED_NAME_IN_RANGE_METHOD)
  private String inRangeMethod;

  public static final String SERIALIZED_NAME_OUT_RANGE_LOW_METHOD = "out-range-low-method";
  @SerializedName(SERIALIZED_NAME_OUT_RANGE_LOW_METHOD)
  private String outRangeLowMethod;

  public static final String SERIALIZED_NAME_OUT_RANGE_HIGH_METHOD = "out-range-high-method";
  @SerializedName(SERIALIZED_NAME_OUT_RANGE_HIGH_METHOD)
  private String outRangeHighMethod;

  public ParameterSpec() {
  }

  public ParameterSpec parameter(String parameter) {
    
    this.parameter = parameter;
    return this;
  }

   /**
   * Get parameter
   * @return parameter
  **/
  @javax.annotation.Nullable

  public String getParameter() {
    return parameter;
  }


  public void setParameter(String parameter) {
    this.parameter = parameter;
  }


  public ParameterSpec inRangeMethod(String inRangeMethod) {
    
    this.inRangeMethod = inRangeMethod;
    return this;
  }

   /**
   * Get inRangeMethod
   * @return inRangeMethod
  **/
  @javax.annotation.Nullable

  public String getInRangeMethod() {
    return inRangeMethod;
  }


  public void setInRangeMethod(String inRangeMethod) {
    this.inRangeMethod = inRangeMethod;
  }


  public ParameterSpec outRangeLowMethod(String outRangeLowMethod) {
    
    this.outRangeLowMethod = outRangeLowMethod;
    return this;
  }

   /**
   * Get outRangeLowMethod
   * @return outRangeLowMethod
  **/
  @javax.annotation.Nullable

  public String getOutRangeLowMethod() {
    return outRangeLowMethod;
  }


  public void setOutRangeLowMethod(String outRangeLowMethod) {
    this.outRangeLowMethod = outRangeLowMethod;
  }


  public ParameterSpec outRangeHighMethod(String outRangeHighMethod) {
    
    this.outRangeHighMethod = outRangeHighMethod;
    return this;
  }

   /**
   * Get outRangeHighMethod
   * @return outRangeHighMethod
  **/
  @javax.annotation.Nullable

  public String getOutRangeHighMethod() {
    return outRangeHighMethod;
  }


  public void setOutRangeHighMethod(String outRangeHighMethod) {
    this.outRangeHighMethod = outRangeHighMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterSpec parameterSpec = (ParameterSpec) o;
    return Objects.equals(this.parameter, parameterSpec.parameter) &&
        Objects.equals(this.inRangeMethod, parameterSpec.inRangeMethod) &&
        Objects.equals(this.outRangeLowMethod, parameterSpec.outRangeLowMethod) &&
        Objects.equals(this.outRangeHighMethod, parameterSpec.outRangeHighMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameter, inRangeMethod, outRangeLowMethod, outRangeHighMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterSpec {\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    inRangeMethod: ").append(toIndentedString(inRangeMethod)).append("\n");
    sb.append("    outRangeLowMethod: ").append(toIndentedString(outRangeLowMethod)).append("\n");
    sb.append("    outRangeHighMethod: ").append(toIndentedString(outRangeHighMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("parameter");
    openapiFields.add("in-range-method");
    openapiFields.add("out-range-low-method");
    openapiFields.add("out-range-high-method");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ParameterSpec
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ParameterSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParameterSpec is not found in the empty JSON string", ParameterSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ParameterSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParameterSpec` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("parameter") != null && !jsonObj.get("parameter").isJsonNull()) && !jsonObj.get("parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter").toString()));
      }
      if ((jsonObj.get("in-range-method") != null && !jsonObj.get("in-range-method").isJsonNull()) && !jsonObj.get("in-range-method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in-range-method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in-range-method").toString()));
      }
      if ((jsonObj.get("out-range-low-method") != null && !jsonObj.get("out-range-low-method").isJsonNull()) && !jsonObj.get("out-range-low-method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `out-range-low-method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("out-range-low-method").toString()));
      }
      if ((jsonObj.get("out-range-high-method") != null && !jsonObj.get("out-range-high-method").isJsonNull()) && !jsonObj.get("out-range-high-method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `out-range-high-method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("out-range-high-method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParameterSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParameterSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParameterSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParameterSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ParameterSpec>() {
           @Override
           public void write(JsonWriter out, ParameterSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParameterSpec read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ParameterSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ParameterSpec
  * @throws IOException if the JSON string is invalid with respect to ParameterSpec
  */
  public static ParameterSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParameterSpec.class);
  }

 /**
  * Convert an instance of ParameterSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

