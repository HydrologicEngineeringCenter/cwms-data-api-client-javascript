/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.StreamLocation;
import org.openapitools.client.model.StreamReach;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stream
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class Stream {
  public static final String SERIALIZED_NAME_STREAM_NAME = "streamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_TRIBUTARIES = "tributaries";
  @SerializedName(SERIALIZED_NAME_TRIBUTARIES)
  private List<Stream> tributaries;

  public static final String SERIALIZED_NAME_STREAM_REACHES = "streamReaches";
  @SerializedName(SERIALIZED_NAME_STREAM_REACHES)
  private List<StreamReach> streamReaches;

  public static final String SERIALIZED_NAME_DIVERTING_STREAM_ID = "divertingStreamId";
  @SerializedName(SERIALIZED_NAME_DIVERTING_STREAM_ID)
  private String divertingStreamId;

  public static final String SERIALIZED_NAME_RECEIVING_STREAM_ID = "receivingStreamId";
  @SerializedName(SERIALIZED_NAME_RECEIVING_STREAM_ID)
  private String receivingStreamId;

  public static final String SERIALIZED_NAME_CONFLUENCE_BANK = "confluenceBank";
  @SerializedName(SERIALIZED_NAME_CONFLUENCE_BANK)
  private String confluenceBank;

  public static final String SERIALIZED_NAME_DIVERSION_BANK = "diversionBank";
  @SerializedName(SERIALIZED_NAME_DIVERSION_BANK)
  private String diversionBank;

  public static final String SERIALIZED_NAME_STREAM_LENGTH = "streamLength";
  @SerializedName(SERIALIZED_NAME_STREAM_LENGTH)
  private Double streamLength;

  public static final String SERIALIZED_NAME_CONFLUENCE_STATION = "confluenceStation";
  @SerializedName(SERIALIZED_NAME_CONFLUENCE_STATION)
  private Double confluenceStation;

  public static final String SERIALIZED_NAME_DIVERSION_STATION = "diversionStation";
  @SerializedName(SERIALIZED_NAME_DIVERSION_STATION)
  private Double diversionStation;

  public static final String SERIALIZED_NAME_STREAM_LOCATIONS = "streamLocations";
  @SerializedName(SERIALIZED_NAME_STREAM_LOCATIONS)
  private List<StreamLocation> streamLocations;

  public static final String SERIALIZED_NAME_OFFICE_ID = "officeId";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_AVERAGE_SLOPE = "averageSlope";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SLOPE)
  private Double averageSlope;

  public Stream() {
  }

  public Stream streamName(String streamName) {
    
    this.streamName = streamName;
    return this;
  }

   /**
   * Get streamName
   * @return streamName
  **/
  @javax.annotation.Nullable

  public String getStreamName() {
    return streamName;
  }


  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public Stream tributaries(List<Stream> tributaries) {
    
    this.tributaries = tributaries;
    return this;
  }

  public Stream addTributariesItem(Stream tributariesItem) {
    if (this.tributaries == null) {
      this.tributaries = new ArrayList<>();
    }
    this.tributaries.add(tributariesItem);
    return this;
  }

   /**
   * Get tributaries
   * @return tributaries
  **/
  @javax.annotation.Nullable

  public List<Stream> getTributaries() {
    return tributaries;
  }


  public void setTributaries(List<Stream> tributaries) {
    this.tributaries = tributaries;
  }


  public Stream streamReaches(List<StreamReach> streamReaches) {
    
    this.streamReaches = streamReaches;
    return this;
  }

  public Stream addStreamReachesItem(StreamReach streamReachesItem) {
    if (this.streamReaches == null) {
      this.streamReaches = new ArrayList<>();
    }
    this.streamReaches.add(streamReachesItem);
    return this;
  }

   /**
   * Get streamReaches
   * @return streamReaches
  **/
  @javax.annotation.Nullable

  public List<StreamReach> getStreamReaches() {
    return streamReaches;
  }


  public void setStreamReaches(List<StreamReach> streamReaches) {
    this.streamReaches = streamReaches;
  }


  public Stream divertingStreamId(String divertingStreamId) {
    
    this.divertingStreamId = divertingStreamId;
    return this;
  }

   /**
   * Get divertingStreamId
   * @return divertingStreamId
  **/
  @javax.annotation.Nullable

  public String getDivertingStreamId() {
    return divertingStreamId;
  }


  public void setDivertingStreamId(String divertingStreamId) {
    this.divertingStreamId = divertingStreamId;
  }


  public Stream receivingStreamId(String receivingStreamId) {
    
    this.receivingStreamId = receivingStreamId;
    return this;
  }

   /**
   * Get receivingStreamId
   * @return receivingStreamId
  **/
  @javax.annotation.Nullable

  public String getReceivingStreamId() {
    return receivingStreamId;
  }


  public void setReceivingStreamId(String receivingStreamId) {
    this.receivingStreamId = receivingStreamId;
  }


  public Stream confluenceBank(String confluenceBank) {
    
    this.confluenceBank = confluenceBank;
    return this;
  }

   /**
   * Get confluenceBank
   * @return confluenceBank
  **/
  @javax.annotation.Nullable

  public String getConfluenceBank() {
    return confluenceBank;
  }


  public void setConfluenceBank(String confluenceBank) {
    this.confluenceBank = confluenceBank;
  }


  public Stream diversionBank(String diversionBank) {
    
    this.diversionBank = diversionBank;
    return this;
  }

   /**
   * Get diversionBank
   * @return diversionBank
  **/
  @javax.annotation.Nullable

  public String getDiversionBank() {
    return diversionBank;
  }


  public void setDiversionBank(String diversionBank) {
    this.diversionBank = diversionBank;
  }


  public Stream streamLength(Double streamLength) {
    
    this.streamLength = streamLength;
    return this;
  }

   /**
   * Get streamLength
   * @return streamLength
  **/
  @javax.annotation.Nullable

  public Double getStreamLength() {
    return streamLength;
  }


  public void setStreamLength(Double streamLength) {
    this.streamLength = streamLength;
  }


  public Stream confluenceStation(Double confluenceStation) {
    
    this.confluenceStation = confluenceStation;
    return this;
  }

   /**
   * Get confluenceStation
   * @return confluenceStation
  **/
  @javax.annotation.Nullable

  public Double getConfluenceStation() {
    return confluenceStation;
  }


  public void setConfluenceStation(Double confluenceStation) {
    this.confluenceStation = confluenceStation;
  }


  public Stream diversionStation(Double diversionStation) {
    
    this.diversionStation = diversionStation;
    return this;
  }

   /**
   * Get diversionStation
   * @return diversionStation
  **/
  @javax.annotation.Nullable

  public Double getDiversionStation() {
    return diversionStation;
  }


  public void setDiversionStation(Double diversionStation) {
    this.diversionStation = diversionStation;
  }


  public Stream streamLocations(List<StreamLocation> streamLocations) {
    
    this.streamLocations = streamLocations;
    return this;
  }

  public Stream addStreamLocationsItem(StreamLocation streamLocationsItem) {
    if (this.streamLocations == null) {
      this.streamLocations = new ArrayList<>();
    }
    this.streamLocations.add(streamLocationsItem);
    return this;
  }

   /**
   * Get streamLocations
   * @return streamLocations
  **/
  @javax.annotation.Nullable

  public List<StreamLocation> getStreamLocations() {
    return streamLocations;
  }


  public void setStreamLocations(List<StreamLocation> streamLocations) {
    this.streamLocations = streamLocations;
  }


  public Stream officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public Stream comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public Stream averageSlope(Double averageSlope) {
    
    this.averageSlope = averageSlope;
    return this;
  }

   /**
   * Get averageSlope
   * @return averageSlope
  **/
  @javax.annotation.Nullable

  public Double getAverageSlope() {
    return averageSlope;
  }


  public void setAverageSlope(Double averageSlope) {
    this.averageSlope = averageSlope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stream stream = (Stream) o;
    return Objects.equals(this.streamName, stream.streamName) &&
        Objects.equals(this.tributaries, stream.tributaries) &&
        Objects.equals(this.streamReaches, stream.streamReaches) &&
        Objects.equals(this.divertingStreamId, stream.divertingStreamId) &&
        Objects.equals(this.receivingStreamId, stream.receivingStreamId) &&
        Objects.equals(this.confluenceBank, stream.confluenceBank) &&
        Objects.equals(this.diversionBank, stream.diversionBank) &&
        Objects.equals(this.streamLength, stream.streamLength) &&
        Objects.equals(this.confluenceStation, stream.confluenceStation) &&
        Objects.equals(this.diversionStation, stream.diversionStation) &&
        Objects.equals(this.streamLocations, stream.streamLocations) &&
        Objects.equals(this.officeId, stream.officeId) &&
        Objects.equals(this.comment, stream.comment) &&
        Objects.equals(this.averageSlope, stream.averageSlope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamName, tributaries, streamReaches, divertingStreamId, receivingStreamId, confluenceBank, diversionBank, streamLength, confluenceStation, diversionStation, streamLocations, officeId, comment, averageSlope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stream {\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    tributaries: ").append(toIndentedString(tributaries)).append("\n");
    sb.append("    streamReaches: ").append(toIndentedString(streamReaches)).append("\n");
    sb.append("    divertingStreamId: ").append(toIndentedString(divertingStreamId)).append("\n");
    sb.append("    receivingStreamId: ").append(toIndentedString(receivingStreamId)).append("\n");
    sb.append("    confluenceBank: ").append(toIndentedString(confluenceBank)).append("\n");
    sb.append("    diversionBank: ").append(toIndentedString(diversionBank)).append("\n");
    sb.append("    streamLength: ").append(toIndentedString(streamLength)).append("\n");
    sb.append("    confluenceStation: ").append(toIndentedString(confluenceStation)).append("\n");
    sb.append("    diversionStation: ").append(toIndentedString(diversionStation)).append("\n");
    sb.append("    streamLocations: ").append(toIndentedString(streamLocations)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    averageSlope: ").append(toIndentedString(averageSlope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("streamName");
    openapiFields.add("tributaries");
    openapiFields.add("streamReaches");
    openapiFields.add("divertingStreamId");
    openapiFields.add("receivingStreamId");
    openapiFields.add("confluenceBank");
    openapiFields.add("diversionBank");
    openapiFields.add("streamLength");
    openapiFields.add("confluenceStation");
    openapiFields.add("diversionStation");
    openapiFields.add("streamLocations");
    openapiFields.add("officeId");
    openapiFields.add("comment");
    openapiFields.add("averageSlope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Stream
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Stream.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stream is not found in the empty JSON string", Stream.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Stream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stream` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("streamName") != null && !jsonObj.get("streamName").isJsonNull()) && !jsonObj.get("streamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamName").toString()));
      }
      if (jsonObj.get("tributaries") != null && !jsonObj.get("tributaries").isJsonNull()) {
        JsonArray jsonArraytributaries = jsonObj.getAsJsonArray("tributaries");
        if (jsonArraytributaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tributaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tributaries` to be an array in the JSON string but got `%s`", jsonObj.get("tributaries").toString()));
          }

          // validate the optional field `tributaries` (array)
          for (int i = 0; i < jsonArraytributaries.size(); i++) {
            Stream.validateJsonObject(jsonArraytributaries.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("streamReaches") != null && !jsonObj.get("streamReaches").isJsonNull()) {
        JsonArray jsonArraystreamReaches = jsonObj.getAsJsonArray("streamReaches");
        if (jsonArraystreamReaches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streamReaches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streamReaches` to be an array in the JSON string but got `%s`", jsonObj.get("streamReaches").toString()));
          }

          // validate the optional field `streamReaches` (array)
          for (int i = 0; i < jsonArraystreamReaches.size(); i++) {
            StreamReach.validateJsonObject(jsonArraystreamReaches.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("divertingStreamId") != null && !jsonObj.get("divertingStreamId").isJsonNull()) && !jsonObj.get("divertingStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `divertingStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("divertingStreamId").toString()));
      }
      if ((jsonObj.get("receivingStreamId") != null && !jsonObj.get("receivingStreamId").isJsonNull()) && !jsonObj.get("receivingStreamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivingStreamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivingStreamId").toString()));
      }
      if ((jsonObj.get("confluenceBank") != null && !jsonObj.get("confluenceBank").isJsonNull()) && !jsonObj.get("confluenceBank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confluenceBank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confluenceBank").toString()));
      }
      if ((jsonObj.get("diversionBank") != null && !jsonObj.get("diversionBank").isJsonNull()) && !jsonObj.get("diversionBank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diversionBank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diversionBank").toString()));
      }
      if (jsonObj.get("streamLocations") != null && !jsonObj.get("streamLocations").isJsonNull()) {
        JsonArray jsonArraystreamLocations = jsonObj.getAsJsonArray("streamLocations");
        if (jsonArraystreamLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("streamLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `streamLocations` to be an array in the JSON string but got `%s`", jsonObj.get("streamLocations").toString()));
          }

          // validate the optional field `streamLocations` (array)
          for (int i = 0; i < jsonArraystreamLocations.size(); i++) {
            StreamLocation.validateJsonObject(jsonArraystreamLocations.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("officeId") != null && !jsonObj.get("officeId").isJsonNull()) && !jsonObj.get("officeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeId").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stream.class));

       return (TypeAdapter<T>) new TypeAdapter<Stream>() {
           @Override
           public void write(JsonWriter out, Stream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stream read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Stream given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Stream
  * @throws IOException if the JSON string is invalid with respect to Stream
  */
  public static Stream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stream.class);
  }

 /**
  * Convert an instance of Stream to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

