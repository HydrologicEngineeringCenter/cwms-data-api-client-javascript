/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssignedLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class AssignedLocation {
  public static final String SERIALIZED_NAME_LOCATION_ID = "locationId";
  @SerializedName(SERIALIZED_NAME_LOCATION_ID)
  private String locationId;

  public static final String SERIALIZED_NAME_OFFICE_ID = "officeId";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_ALIAS_ID = "aliasId";
  @SerializedName(SERIALIZED_NAME_ALIAS_ID)
  private String aliasId;

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private BigDecimal attribute;

  public static final String SERIALIZED_NAME_REF_LOCATION_ID = "refLocationId";
  @SerializedName(SERIALIZED_NAME_REF_LOCATION_ID)
  private String refLocationId;

  public AssignedLocation() {
  }

  public AssignedLocation locationId(String locationId) {
    
    this.locationId = locationId;
    return this;
  }

   /**
   * Get locationId
   * @return locationId
  **/
  @javax.annotation.Nullable

  public String getLocationId() {
    return locationId;
  }


  public void setLocationId(String locationId) {
    this.locationId = locationId;
  }


  public AssignedLocation officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public AssignedLocation aliasId(String aliasId) {
    
    this.aliasId = aliasId;
    return this;
  }

   /**
   * Get aliasId
   * @return aliasId
  **/
  @javax.annotation.Nullable

  public String getAliasId() {
    return aliasId;
  }


  public void setAliasId(String aliasId) {
    this.aliasId = aliasId;
  }


  public AssignedLocation attribute(BigDecimal attribute) {
    
    this.attribute = attribute;
    return this;
  }

   /**
   * Get attribute
   * @return attribute
  **/
  @javax.annotation.Nullable

  public BigDecimal getAttribute() {
    return attribute;
  }


  public void setAttribute(BigDecimal attribute) {
    this.attribute = attribute;
  }


  public AssignedLocation refLocationId(String refLocationId) {
    
    this.refLocationId = refLocationId;
    return this;
  }

   /**
   * Get refLocationId
   * @return refLocationId
  **/
  @javax.annotation.Nullable

  public String getRefLocationId() {
    return refLocationId;
  }


  public void setRefLocationId(String refLocationId) {
    this.refLocationId = refLocationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignedLocation assignedLocation = (AssignedLocation) o;
    return Objects.equals(this.locationId, assignedLocation.locationId) &&
        Objects.equals(this.officeId, assignedLocation.officeId) &&
        Objects.equals(this.aliasId, assignedLocation.aliasId) &&
        Objects.equals(this.attribute, assignedLocation.attribute) &&
        Objects.equals(this.refLocationId, assignedLocation.refLocationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationId, officeId, aliasId, attribute, refLocationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignedLocation {\n");
    sb.append("    locationId: ").append(toIndentedString(locationId)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    aliasId: ").append(toIndentedString(aliasId)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    refLocationId: ").append(toIndentedString(refLocationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationId");
    openapiFields.add("officeId");
    openapiFields.add("aliasId");
    openapiFields.add("attribute");
    openapiFields.add("refLocationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AssignedLocation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AssignedLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignedLocation is not found in the empty JSON string", AssignedLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AssignedLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignedLocation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("locationId") != null && !jsonObj.get("locationId").isJsonNull()) && !jsonObj.get("locationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationId").toString()));
      }
      if ((jsonObj.get("officeId") != null && !jsonObj.get("officeId").isJsonNull()) && !jsonObj.get("officeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeId").toString()));
      }
      if ((jsonObj.get("aliasId") != null && !jsonObj.get("aliasId").isJsonNull()) && !jsonObj.get("aliasId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasId").toString()));
      }
      if ((jsonObj.get("refLocationId") != null && !jsonObj.get("refLocationId").isJsonNull()) && !jsonObj.get("refLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refLocationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignedLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignedLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignedLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignedLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignedLocation>() {
           @Override
           public void write(JsonWriter out, AssignedLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignedLocation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssignedLocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssignedLocation
  * @throws IOException if the JSON string is invalid with respect to AssignedLocation
  */
  public static AssignedLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignedLocation.class);
  }

 /**
  * Convert an instance of AssignedLocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

