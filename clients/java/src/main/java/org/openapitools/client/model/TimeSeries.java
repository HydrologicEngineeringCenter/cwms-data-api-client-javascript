/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TimeSeriesColumn;
import org.openapitools.client.model.TimeSeriesInterval;
import org.openapitools.client.model.TimeSeriesValuesInnerInner;
import org.openapitools.client.model.VerticalDatumInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeSeries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class TimeSeries {
  public static final String SERIALIZED_NAME_BEGIN = "begin";
  @SerializedName(SERIALIZED_NAME_BEGIN)
  private OffsetDateTime begin;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private OffsetDateTime end;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private TimeSeriesInterval interval;

  public static final String SERIALIZED_NAME_INTERVAL_OFFSET = "interval-offset";
  @SerializedName(SERIALIZED_NAME_INTERVAL_OFFSET)
  private Long intervalOffset;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_PAGE = "next-page";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE)
  private String nextPage;

  public static final String SERIALIZED_NAME_OFFICE_ID = "office-id";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private String page;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page-size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time-zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_VALUE_COLUMNS = "value-columns";
  @SerializedName(SERIALIZED_NAME_VALUE_COLUMNS)
  private List<TimeSeriesColumn> valueColumns;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<List<TimeSeriesValuesInnerInner>> values;

  public static final String SERIALIZED_NAME_VERTICAL_DATUM_INFO = "vertical-datum-info";
  @SerializedName(SERIALIZED_NAME_VERTICAL_DATUM_INFO)
  private VerticalDatumInfo verticalDatumInfo;

  public TimeSeries() {
  }

  
  public TimeSeries(
     OffsetDateTime begin, 
     OffsetDateTime end, 
     Long intervalOffset, 
     String nextPage, 
     String page, 
     Integer pageSize, 
     String timeZone, 
     Integer total, 
     List<TimeSeriesColumn> valueColumns
  ) {
    this();
    this.begin = begin;
    this.end = end;
    this.intervalOffset = intervalOffset;
    this.nextPage = nextPage;
    this.page = page;
    this.pageSize = pageSize;
    this.timeZone = timeZone;
    this.total = total;
    this.valueColumns = valueColumns;
  }

   /**
   * The requested start time of the data, in ISO-8601 format with offset and timezone (&#39;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#39;[&#39;VV&#39;]&#39;&#39;)
   * @return begin
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getBegin() {
    return begin;
  }




   /**
   * The requested end time of the data, in ISO-8601 format with offset and timezone (&#39;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#39;[&#39;VV&#39;]&#39;&#39;)
   * @return end
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getEnd() {
    return end;
  }




  public TimeSeries interval(TimeSeriesInterval interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @javax.annotation.Nullable

  public TimeSeriesInterval getInterval() {
    return interval;
  }


  public void setInterval(TimeSeriesInterval interval) {
    this.interval = interval;
  }


   /**
   * Offset from top of interval
   * @return intervalOffset
  **/
  @javax.annotation.Nullable

  public Long getIntervalOffset() {
    return intervalOffset;
  }




  public TimeSeries name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Time-series name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


   /**
   * The cursor to the next page of data; null if there is no more data
   * @return nextPage
  **/
  @javax.annotation.Nullable

  public String getNextPage() {
    return nextPage;
  }




  public TimeSeries officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Office ID that owns the time-series
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


   /**
   * The cursor to the current page of data
   * @return page
  **/
  @javax.annotation.Nullable

  public String getPage() {
    return page;
  }




   /**
   * The number of records fetched per-page; this may be larger than the number of records actually retrieved
   * @return pageSize
  **/
  @javax.annotation.Nullable

  public Integer getPageSize() {
    return pageSize;
  }




   /**
   * Only on 21.1.1 Database. The timezone the Interval Offset is from.
   * @return timeZone
  **/
  @javax.annotation.Nullable

  public String getTimeZone() {
    return timeZone;
  }




   /**
   * The total number of records retrieved; null or not present if not supported or unknown
   * @return total
  **/
  @javax.annotation.Nullable

  public Integer getTotal() {
    return total;
  }




  public TimeSeries units(String units) {
    
    this.units = units;
    return this;
  }

   /**
   * The units of the time series data
   * @return units
  **/
  @javax.annotation.Nonnull

  public String getUnits() {
    return units;
  }


  public void setUnits(String units) {
    this.units = units;
  }


   /**
   * Get valueColumns
   * @return valueColumns
  **/
  @javax.annotation.Nullable

  public List<TimeSeriesColumn> getValueColumns() {
    return valueColumns;
  }




  public TimeSeries values(List<List<TimeSeriesValuesInnerInner>> values) {
    
    this.values = values;
    return this;
  }

  public TimeSeries addValuesItem(List<TimeSeriesValuesInnerInner> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @javax.annotation.Nullable

  public List<List<TimeSeriesValuesInnerInner>> getValues() {
    return values;
  }


  public void setValues(List<List<TimeSeriesValuesInnerInner>> values) {
    this.values = values;
  }


  public TimeSeries verticalDatumInfo(VerticalDatumInfo verticalDatumInfo) {
    
    this.verticalDatumInfo = verticalDatumInfo;
    return this;
  }

   /**
   * Get verticalDatumInfo
   * @return verticalDatumInfo
  **/
  @javax.annotation.Nullable

  public VerticalDatumInfo getVerticalDatumInfo() {
    return verticalDatumInfo;
  }


  public void setVerticalDatumInfo(VerticalDatumInfo verticalDatumInfo) {
    this.verticalDatumInfo = verticalDatumInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeries timeSeries = (TimeSeries) o;
    return Objects.equals(this.begin, timeSeries.begin) &&
        Objects.equals(this.end, timeSeries.end) &&
        Objects.equals(this.interval, timeSeries.interval) &&
        Objects.equals(this.intervalOffset, timeSeries.intervalOffset) &&
        Objects.equals(this.name, timeSeries.name) &&
        Objects.equals(this.nextPage, timeSeries.nextPage) &&
        Objects.equals(this.officeId, timeSeries.officeId) &&
        Objects.equals(this.page, timeSeries.page) &&
        Objects.equals(this.pageSize, timeSeries.pageSize) &&
        Objects.equals(this.timeZone, timeSeries.timeZone) &&
        Objects.equals(this.total, timeSeries.total) &&
        Objects.equals(this.units, timeSeries.units) &&
        Objects.equals(this.valueColumns, timeSeries.valueColumns) &&
        Objects.equals(this.values, timeSeries.values) &&
        Objects.equals(this.verticalDatumInfo, timeSeries.verticalDatumInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(begin, end, interval, intervalOffset, name, nextPage, officeId, page, pageSize, timeZone, total, units, valueColumns, values, verticalDatumInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeries {\n");
    sb.append("    begin: ").append(toIndentedString(begin)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalOffset: ").append(toIndentedString(intervalOffset)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextPage: ").append(toIndentedString(nextPage)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    valueColumns: ").append(toIndentedString(valueColumns)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    verticalDatumInfo: ").append(toIndentedString(verticalDatumInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("begin");
    openapiFields.add("end");
    openapiFields.add("interval");
    openapiFields.add("interval-offset");
    openapiFields.add("name");
    openapiFields.add("next-page");
    openapiFields.add("office-id");
    openapiFields.add("page");
    openapiFields.add("page-size");
    openapiFields.add("time-zone");
    openapiFields.add("total");
    openapiFields.add("units");
    openapiFields.add("value-columns");
    openapiFields.add("values");
    openapiFields.add("vertical-datum-info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("units");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeSeries
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeries is not found in the empty JSON string", TimeSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TimeSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeries` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeSeries.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `interval`
      if (jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) {
        TimeSeriesInterval.validateJsonObject(jsonObj.getAsJsonObject("interval"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("next-page") != null && !jsonObj.get("next-page").isJsonNull()) && !jsonObj.get("next-page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next-page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next-page").toString()));
      }
      if ((jsonObj.get("office-id") != null && !jsonObj.get("office-id").isJsonNull()) && !jsonObj.get("office-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office-id").toString()));
      }
      if ((jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) && !jsonObj.get("page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page").toString()));
      }
      if ((jsonObj.get("time-zone") != null && !jsonObj.get("time-zone").isJsonNull()) && !jsonObj.get("time-zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time-zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time-zone").toString()));
      }
      if (!jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
      if (jsonObj.get("value-columns") != null && !jsonObj.get("value-columns").isJsonNull()) {
        JsonArray jsonArrayvalueColumns = jsonObj.getAsJsonArray("value-columns");
        if (jsonArrayvalueColumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("value-columns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `value-columns` to be an array in the JSON string but got `%s`", jsonObj.get("value-columns").toString()));
          }

          // validate the optional field `value-columns` (array)
          for (int i = 0; i < jsonArrayvalueColumns.size(); i++) {
            TimeSeriesColumn.validateJsonObject(jsonArrayvalueColumns.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
      // validate the optional field `vertical-datum-info`
      if (jsonObj.get("vertical-datum-info") != null && !jsonObj.get("vertical-datum-info").isJsonNull()) {
        VerticalDatumInfo.validateJsonObject(jsonObj.getAsJsonObject("vertical-datum-info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeries>() {
           @Override
           public void write(JsonWriter out, TimeSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeries read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeSeries given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeSeries
  * @throws IOException if the JSON string is invalid with respect to TimeSeries
  */
  public static TimeSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeries.class);
  }

 /**
  * Convert an instance of TimeSeries to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

