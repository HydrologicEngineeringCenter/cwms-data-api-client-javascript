/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AbstractRatingMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TableRating
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class TableRating extends AbstractRatingMetadata {
  public static final String SERIALIZED_NAME_IN_RANGE_METHOD = "in-range-method";
  @SerializedName(SERIALIZED_NAME_IN_RANGE_METHOD)
  private String inRangeMethod;

  public static final String SERIALIZED_NAME_OUT_RANGE_LOW_METHOD = "out-range-low-method";
  @SerializedName(SERIALIZED_NAME_OUT_RANGE_LOW_METHOD)
  private String outRangeLowMethod;

  public static final String SERIALIZED_NAME_OUT_RANGE_HIGH_METHOD = "out-range-high-method";
  @SerializedName(SERIALIZED_NAME_OUT_RANGE_HIGH_METHOD)
  private String outRangeHighMethod;

  public TableRating() {
    this.ratingType = this.getClass().getSimpleName();
  }

  public TableRating inRangeMethod(String inRangeMethod) {
    
    this.inRangeMethod = inRangeMethod;
    return this;
  }

   /**
   * Get inRangeMethod
   * @return inRangeMethod
  **/
  @javax.annotation.Nullable

  public String getInRangeMethod() {
    return inRangeMethod;
  }


  public void setInRangeMethod(String inRangeMethod) {
    this.inRangeMethod = inRangeMethod;
  }


  public TableRating outRangeLowMethod(String outRangeLowMethod) {
    
    this.outRangeLowMethod = outRangeLowMethod;
    return this;
  }

   /**
   * Get outRangeLowMethod
   * @return outRangeLowMethod
  **/
  @javax.annotation.Nullable

  public String getOutRangeLowMethod() {
    return outRangeLowMethod;
  }


  public void setOutRangeLowMethod(String outRangeLowMethod) {
    this.outRangeLowMethod = outRangeLowMethod;
  }


  public TableRating outRangeHighMethod(String outRangeHighMethod) {
    
    this.outRangeHighMethod = outRangeHighMethod;
    return this;
  }

   /**
   * Get outRangeHighMethod
   * @return outRangeHighMethod
  **/
  @javax.annotation.Nullable

  public String getOutRangeHighMethod() {
    return outRangeHighMethod;
  }


  public void setOutRangeHighMethod(String outRangeHighMethod) {
    this.outRangeHighMethod = outRangeHighMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableRating tableRating = (TableRating) o;
    return Objects.equals(this.inRangeMethod, tableRating.inRangeMethod) &&
        Objects.equals(this.outRangeLowMethod, tableRating.outRangeLowMethod) &&
        Objects.equals(this.outRangeHighMethod, tableRating.outRangeHighMethod) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inRangeMethod, outRangeLowMethod, outRangeHighMethod, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableRating {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    inRangeMethod: ").append(toIndentedString(inRangeMethod)).append("\n");
    sb.append("    outRangeLowMethod: ").append(toIndentedString(outRangeLowMethod)).append("\n");
    sb.append("    outRangeHighMethod: ").append(toIndentedString(outRangeHighMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("in-range-method");
    openapiFields.add("out-range-low-method");
    openapiFields.add("out-range-high-method");
    openapiFields.add("source-ratings");
    openapiFields.add("conditions");
    openapiFields.add("evaluations");
    openapiFields.add("connections");
    openapiFields.add("expression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TableRating
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TableRating.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableRating is not found in the empty JSON string", TableRating.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonObj.get("rating-type").getAsString();
      switch (discriminatorValue) {
        case "expression-rating":
          ExpressionRating.validateJsonObject(jsonObj);
          break;
        case "table":
          TableRating.validateJsonObject(jsonObj);
          break;
        case "transitional":
          TransitionalRating.validateJsonObject(jsonObj);
          break;
        case "usgs":
          UsgsStreamRating.validateJsonObject(jsonObj);
          break;
        case "virtual":
          VirtualRating.validateJsonObject(jsonObj);
          break;
        default: 
          throw new IllegalArgumentException(String.format("The value of the `rating-type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


 /**
  * Create an instance of TableRating given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TableRating
  * @throws IOException if the JSON string is invalid with respect to TableRating
  */
  public static TableRating fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableRating.class);
  }

 /**
  * Convert an instance of TableRating to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

