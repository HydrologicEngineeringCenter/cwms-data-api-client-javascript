/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Location
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class Location {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_PUBLIC_NAME = "public-name";
  @SerializedName(SERIALIZED_NAME_PUBLIC_NAME)
  private String publicName;

  public static final String SERIALIZED_NAME_LONG_NAME = "long-name";
  @SerializedName(SERIALIZED_NAME_LONG_NAME)
  private String longName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TIMEZONE_NAME = "timezone-name";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_NAME)
  private String timezoneName;

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "location-type";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private String locationType;

  public static final String SERIALIZED_NAME_LOCATION_KIND = "location-kind";
  @SerializedName(SERIALIZED_NAME_LOCATION_KIND)
  private String locationKind;

  /**
   * Gets or Sets nation
   */
  @JsonAdapter(NationEnum.Adapter.class)
  public enum NationEnum {
    US("US"),
    
    CANADA("CANADA"),
    
    MEXICO("MEXICO");

    private String value;

    NationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NationEnum fromValue(String value) {
      for (NationEnum b : NationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NATION = "nation";
  @SerializedName(SERIALIZED_NAME_NATION)
  private NationEnum nation;

  public static final String SERIALIZED_NAME_STATE_INITIAL = "state-initial";
  @SerializedName(SERIALIZED_NAME_STATE_INITIAL)
  private String stateInitial;

  public static final String SERIALIZED_NAME_COUNTY_NAME = "county-name";
  @SerializedName(SERIALIZED_NAME_COUNTY_NAME)
  private String countyName;

  public static final String SERIALIZED_NAME_NEAREST_CITY = "nearest-city";
  @SerializedName(SERIALIZED_NAME_NEAREST_CITY)
  private String nearestCity;

  public static final String SERIALIZED_NAME_HORIZONTAL_DATUM = "horizontal-datum";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_DATUM)
  private String horizontalDatum;

  public static final String SERIALIZED_NAME_PUBLISHED_LONGITUDE = "published-longitude";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_LONGITUDE)
  private Double publishedLongitude;

  public static final String SERIALIZED_NAME_PUBLISHED_LATITUDE = "published-latitude";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_LATITUDE)
  private Double publishedLatitude;

  public static final String SERIALIZED_NAME_VERTICAL_DATUM = "vertical-datum";
  @SerializedName(SERIALIZED_NAME_VERTICAL_DATUM)
  private String verticalDatum;

  public static final String SERIALIZED_NAME_ELEVATION = "elevation";
  @SerializedName(SERIALIZED_NAME_ELEVATION)
  private Double elevation;

  public static final String SERIALIZED_NAME_MAP_LABEL = "map-label";
  @SerializedName(SERIALIZED_NAME_MAP_LABEL)
  private String mapLabel;

  public static final String SERIALIZED_NAME_BOUNDING_OFFICE_ID = "bounding-office-id";
  @SerializedName(SERIALIZED_NAME_BOUNDING_OFFICE_ID)
  private String boundingOfficeId;

  public static final String SERIALIZED_NAME_OFFICE_ID = "office-id";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public Location() {
  }

  public Location name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Location latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @javax.annotation.Nullable

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public Location longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @javax.annotation.Nullable

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public Location active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public Location publicName(String publicName) {
    
    this.publicName = publicName;
    return this;
  }

   /**
   * Get publicName
   * @return publicName
  **/
  @javax.annotation.Nullable

  public String getPublicName() {
    return publicName;
  }


  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  public Location longName(String longName) {
    
    this.longName = longName;
    return this;
  }

   /**
   * Get longName
   * @return longName
  **/
  @javax.annotation.Nullable

  public String getLongName() {
    return longName;
  }


  public void setLongName(String longName) {
    this.longName = longName;
  }


  public Location description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Location timezoneName(String timezoneName) {
    
    this.timezoneName = timezoneName;
    return this;
  }

   /**
   * Get timezoneName
   * @return timezoneName
  **/
  @javax.annotation.Nullable

  public String getTimezoneName() {
    return timezoneName;
  }


  public void setTimezoneName(String timezoneName) {
    this.timezoneName = timezoneName;
  }


  public Location locationType(String locationType) {
    
    this.locationType = locationType;
    return this;
  }

   /**
   * Get locationType
   * @return locationType
  **/
  @javax.annotation.Nullable

  public String getLocationType() {
    return locationType;
  }


  public void setLocationType(String locationType) {
    this.locationType = locationType;
  }


  public Location locationKind(String locationKind) {
    
    this.locationKind = locationKind;
    return this;
  }

   /**
   * Get locationKind
   * @return locationKind
  **/
  @javax.annotation.Nullable

  public String getLocationKind() {
    return locationKind;
  }


  public void setLocationKind(String locationKind) {
    this.locationKind = locationKind;
  }


  public Location nation(NationEnum nation) {
    
    this.nation = nation;
    return this;
  }

   /**
   * Get nation
   * @return nation
  **/
  @javax.annotation.Nullable

  public NationEnum getNation() {
    return nation;
  }


  public void setNation(NationEnum nation) {
    this.nation = nation;
  }


  public Location stateInitial(String stateInitial) {
    
    this.stateInitial = stateInitial;
    return this;
  }

   /**
   * Get stateInitial
   * @return stateInitial
  **/
  @javax.annotation.Nullable

  public String getStateInitial() {
    return stateInitial;
  }


  public void setStateInitial(String stateInitial) {
    this.stateInitial = stateInitial;
  }


  public Location countyName(String countyName) {
    
    this.countyName = countyName;
    return this;
  }

   /**
   * Get countyName
   * @return countyName
  **/
  @javax.annotation.Nullable

  public String getCountyName() {
    return countyName;
  }


  public void setCountyName(String countyName) {
    this.countyName = countyName;
  }


  public Location nearestCity(String nearestCity) {
    
    this.nearestCity = nearestCity;
    return this;
  }

   /**
   * Get nearestCity
   * @return nearestCity
  **/
  @javax.annotation.Nullable

  public String getNearestCity() {
    return nearestCity;
  }


  public void setNearestCity(String nearestCity) {
    this.nearestCity = nearestCity;
  }


  public Location horizontalDatum(String horizontalDatum) {
    
    this.horizontalDatum = horizontalDatum;
    return this;
  }

   /**
   * Get horizontalDatum
   * @return horizontalDatum
  **/
  @javax.annotation.Nullable

  public String getHorizontalDatum() {
    return horizontalDatum;
  }


  public void setHorizontalDatum(String horizontalDatum) {
    this.horizontalDatum = horizontalDatum;
  }


  public Location publishedLongitude(Double publishedLongitude) {
    
    this.publishedLongitude = publishedLongitude;
    return this;
  }

   /**
   * Get publishedLongitude
   * @return publishedLongitude
  **/
  @javax.annotation.Nullable

  public Double getPublishedLongitude() {
    return publishedLongitude;
  }


  public void setPublishedLongitude(Double publishedLongitude) {
    this.publishedLongitude = publishedLongitude;
  }


  public Location publishedLatitude(Double publishedLatitude) {
    
    this.publishedLatitude = publishedLatitude;
    return this;
  }

   /**
   * Get publishedLatitude
   * @return publishedLatitude
  **/
  @javax.annotation.Nullable

  public Double getPublishedLatitude() {
    return publishedLatitude;
  }


  public void setPublishedLatitude(Double publishedLatitude) {
    this.publishedLatitude = publishedLatitude;
  }


  public Location verticalDatum(String verticalDatum) {
    
    this.verticalDatum = verticalDatum;
    return this;
  }

   /**
   * Get verticalDatum
   * @return verticalDatum
  **/
  @javax.annotation.Nullable

  public String getVerticalDatum() {
    return verticalDatum;
  }


  public void setVerticalDatum(String verticalDatum) {
    this.verticalDatum = verticalDatum;
  }


  public Location elevation(Double elevation) {
    
    this.elevation = elevation;
    return this;
  }

   /**
   * Get elevation
   * @return elevation
  **/
  @javax.annotation.Nullable

  public Double getElevation() {
    return elevation;
  }


  public void setElevation(Double elevation) {
    this.elevation = elevation;
  }


  public Location mapLabel(String mapLabel) {
    
    this.mapLabel = mapLabel;
    return this;
  }

   /**
   * Get mapLabel
   * @return mapLabel
  **/
  @javax.annotation.Nullable

  public String getMapLabel() {
    return mapLabel;
  }


  public void setMapLabel(String mapLabel) {
    this.mapLabel = mapLabel;
  }


  public Location boundingOfficeId(String boundingOfficeId) {
    
    this.boundingOfficeId = boundingOfficeId;
    return this;
  }

   /**
   * Get boundingOfficeId
   * @return boundingOfficeId
  **/
  @javax.annotation.Nullable

  public String getBoundingOfficeId() {
    return boundingOfficeId;
  }


  public void setBoundingOfficeId(String boundingOfficeId) {
    this.boundingOfficeId = boundingOfficeId;
  }


  public Location officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.name, location.name) &&
        Objects.equals(this.latitude, location.latitude) &&
        Objects.equals(this.longitude, location.longitude) &&
        Objects.equals(this.active, location.active) &&
        Objects.equals(this.publicName, location.publicName) &&
        Objects.equals(this.longName, location.longName) &&
        Objects.equals(this.description, location.description) &&
        Objects.equals(this.timezoneName, location.timezoneName) &&
        Objects.equals(this.locationType, location.locationType) &&
        Objects.equals(this.locationKind, location.locationKind) &&
        Objects.equals(this.nation, location.nation) &&
        Objects.equals(this.stateInitial, location.stateInitial) &&
        Objects.equals(this.countyName, location.countyName) &&
        Objects.equals(this.nearestCity, location.nearestCity) &&
        Objects.equals(this.horizontalDatum, location.horizontalDatum) &&
        Objects.equals(this.publishedLongitude, location.publishedLongitude) &&
        Objects.equals(this.publishedLatitude, location.publishedLatitude) &&
        Objects.equals(this.verticalDatum, location.verticalDatum) &&
        Objects.equals(this.elevation, location.elevation) &&
        Objects.equals(this.mapLabel, location.mapLabel) &&
        Objects.equals(this.boundingOfficeId, location.boundingOfficeId) &&
        Objects.equals(this.officeId, location.officeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, latitude, longitude, active, publicName, longName, description, timezoneName, locationType, locationKind, nation, stateInitial, countyName, nearestCity, horizontalDatum, publishedLongitude, publishedLatitude, verticalDatum, elevation, mapLabel, boundingOfficeId, officeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("    longName: ").append(toIndentedString(longName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    timezoneName: ").append(toIndentedString(timezoneName)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    locationKind: ").append(toIndentedString(locationKind)).append("\n");
    sb.append("    nation: ").append(toIndentedString(nation)).append("\n");
    sb.append("    stateInitial: ").append(toIndentedString(stateInitial)).append("\n");
    sb.append("    countyName: ").append(toIndentedString(countyName)).append("\n");
    sb.append("    nearestCity: ").append(toIndentedString(nearestCity)).append("\n");
    sb.append("    horizontalDatum: ").append(toIndentedString(horizontalDatum)).append("\n");
    sb.append("    publishedLongitude: ").append(toIndentedString(publishedLongitude)).append("\n");
    sb.append("    publishedLatitude: ").append(toIndentedString(publishedLatitude)).append("\n");
    sb.append("    verticalDatum: ").append(toIndentedString(verticalDatum)).append("\n");
    sb.append("    elevation: ").append(toIndentedString(elevation)).append("\n");
    sb.append("    mapLabel: ").append(toIndentedString(mapLabel)).append("\n");
    sb.append("    boundingOfficeId: ").append(toIndentedString(boundingOfficeId)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("active");
    openapiFields.add("public-name");
    openapiFields.add("long-name");
    openapiFields.add("description");
    openapiFields.add("timezone-name");
    openapiFields.add("location-type");
    openapiFields.add("location-kind");
    openapiFields.add("nation");
    openapiFields.add("state-initial");
    openapiFields.add("county-name");
    openapiFields.add("nearest-city");
    openapiFields.add("horizontal-datum");
    openapiFields.add("published-longitude");
    openapiFields.add("published-latitude");
    openapiFields.add("vertical-datum");
    openapiFields.add("elevation");
    openapiFields.add("map-label");
    openapiFields.add("bounding-office-id");
    openapiFields.add("office-id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Location
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Location.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Location.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Location` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Location.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("public-name") != null && !jsonObj.get("public-name").isJsonNull()) && !jsonObj.get("public-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public-name").toString()));
      }
      if ((jsonObj.get("long-name") != null && !jsonObj.get("long-name").isJsonNull()) && !jsonObj.get("long-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `long-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("long-name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("timezone-name") != null && !jsonObj.get("timezone-name").isJsonNull()) && !jsonObj.get("timezone-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone-name").toString()));
      }
      if ((jsonObj.get("location-type") != null && !jsonObj.get("location-type").isJsonNull()) && !jsonObj.get("location-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location-type").toString()));
      }
      if ((jsonObj.get("location-kind") != null && !jsonObj.get("location-kind").isJsonNull()) && !jsonObj.get("location-kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location-kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location-kind").toString()));
      }
      if ((jsonObj.get("nation") != null && !jsonObj.get("nation").isJsonNull()) && !jsonObj.get("nation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nation").toString()));
      }
      if ((jsonObj.get("state-initial") != null && !jsonObj.get("state-initial").isJsonNull()) && !jsonObj.get("state-initial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state-initial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state-initial").toString()));
      }
      if ((jsonObj.get("county-name") != null && !jsonObj.get("county-name").isJsonNull()) && !jsonObj.get("county-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county-name").toString()));
      }
      if ((jsonObj.get("nearest-city") != null && !jsonObj.get("nearest-city").isJsonNull()) && !jsonObj.get("nearest-city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nearest-city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nearest-city").toString()));
      }
      if ((jsonObj.get("horizontal-datum") != null && !jsonObj.get("horizontal-datum").isJsonNull()) && !jsonObj.get("horizontal-datum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `horizontal-datum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("horizontal-datum").toString()));
      }
      if ((jsonObj.get("vertical-datum") != null && !jsonObj.get("vertical-datum").isJsonNull()) && !jsonObj.get("vertical-datum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertical-datum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertical-datum").toString()));
      }
      if ((jsonObj.get("map-label") != null && !jsonObj.get("map-label").isJsonNull()) && !jsonObj.get("map-label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `map-label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("map-label").toString()));
      }
      if ((jsonObj.get("bounding-office-id") != null && !jsonObj.get("bounding-office-id").isJsonNull()) && !jsonObj.get("bounding-office-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounding-office-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bounding-office-id").toString()));
      }
      if ((jsonObj.get("office-id") != null && !jsonObj.get("office-id").isJsonNull()) && !jsonObj.get("office-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office-id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Location given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Location
  * @throws IOException if the JSON string is invalid with respect to Location
  */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

 /**
  * Convert an instance of Location to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

