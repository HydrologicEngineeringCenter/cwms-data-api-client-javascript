/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssignedTimeSeries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class AssignedTimeSeries {
  public static final String SERIALIZED_NAME_TIMESERIES_ID = "timeseriesId";
  @SerializedName(SERIALIZED_NAME_TIMESERIES_ID)
  private String timeseriesId;

  public static final String SERIALIZED_NAME_TS_CODE = "tsCode";
  @SerializedName(SERIALIZED_NAME_TS_CODE)
  private BigDecimal tsCode;

  public static final String SERIALIZED_NAME_ALIAS_ID = "aliasId";
  @SerializedName(SERIALIZED_NAME_ALIAS_ID)
  private String aliasId;

  public static final String SERIALIZED_NAME_REF_TS_ID = "refTsId";
  @SerializedName(SERIALIZED_NAME_REF_TS_ID)
  private String refTsId;

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private Integer attribute;

  public AssignedTimeSeries() {
  }

  public AssignedTimeSeries timeseriesId(String timeseriesId) {
    
    this.timeseriesId = timeseriesId;
    return this;
  }

   /**
   * Get timeseriesId
   * @return timeseriesId
  **/
  @javax.annotation.Nullable

  public String getTimeseriesId() {
    return timeseriesId;
  }


  public void setTimeseriesId(String timeseriesId) {
    this.timeseriesId = timeseriesId;
  }


  public AssignedTimeSeries tsCode(BigDecimal tsCode) {
    
    this.tsCode = tsCode;
    return this;
  }

   /**
   * Get tsCode
   * @return tsCode
  **/
  @javax.annotation.Nullable

  public BigDecimal getTsCode() {
    return tsCode;
  }


  public void setTsCode(BigDecimal tsCode) {
    this.tsCode = tsCode;
  }


  public AssignedTimeSeries aliasId(String aliasId) {
    
    this.aliasId = aliasId;
    return this;
  }

   /**
   * Get aliasId
   * @return aliasId
  **/
  @javax.annotation.Nullable

  public String getAliasId() {
    return aliasId;
  }


  public void setAliasId(String aliasId) {
    this.aliasId = aliasId;
  }


  public AssignedTimeSeries refTsId(String refTsId) {
    
    this.refTsId = refTsId;
    return this;
  }

   /**
   * Get refTsId
   * @return refTsId
  **/
  @javax.annotation.Nullable

  public String getRefTsId() {
    return refTsId;
  }


  public void setRefTsId(String refTsId) {
    this.refTsId = refTsId;
  }


  public AssignedTimeSeries attribute(Integer attribute) {
    
    this.attribute = attribute;
    return this;
  }

   /**
   * Get attribute
   * @return attribute
  **/
  @javax.annotation.Nullable

  public Integer getAttribute() {
    return attribute;
  }


  public void setAttribute(Integer attribute) {
    this.attribute = attribute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignedTimeSeries assignedTimeSeries = (AssignedTimeSeries) o;
    return Objects.equals(this.timeseriesId, assignedTimeSeries.timeseriesId) &&
        Objects.equals(this.tsCode, assignedTimeSeries.tsCode) &&
        Objects.equals(this.aliasId, assignedTimeSeries.aliasId) &&
        Objects.equals(this.refTsId, assignedTimeSeries.refTsId) &&
        Objects.equals(this.attribute, assignedTimeSeries.attribute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeseriesId, tsCode, aliasId, refTsId, attribute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignedTimeSeries {\n");
    sb.append("    timeseriesId: ").append(toIndentedString(timeseriesId)).append("\n");
    sb.append("    tsCode: ").append(toIndentedString(tsCode)).append("\n");
    sb.append("    aliasId: ").append(toIndentedString(aliasId)).append("\n");
    sb.append("    refTsId: ").append(toIndentedString(refTsId)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timeseriesId");
    openapiFields.add("tsCode");
    openapiFields.add("aliasId");
    openapiFields.add("refTsId");
    openapiFields.add("attribute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AssignedTimeSeries
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AssignedTimeSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignedTimeSeries is not found in the empty JSON string", AssignedTimeSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AssignedTimeSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignedTimeSeries` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("timeseriesId") != null && !jsonObj.get("timeseriesId").isJsonNull()) && !jsonObj.get("timeseriesId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeseriesId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeseriesId").toString()));
      }
      if ((jsonObj.get("aliasId") != null && !jsonObj.get("aliasId").isJsonNull()) && !jsonObj.get("aliasId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aliasId").toString()));
      }
      if ((jsonObj.get("refTsId") != null && !jsonObj.get("refTsId").isJsonNull()) && !jsonObj.get("refTsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refTsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refTsId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignedTimeSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignedTimeSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignedTimeSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignedTimeSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignedTimeSeries>() {
           @Override
           public void write(JsonWriter out, AssignedTimeSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignedTimeSeries read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssignedTimeSeries given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssignedTimeSeries
  * @throws IOException if the JSON string is invalid with respect to AssignedTimeSeries
  */
  public static AssignedTimeSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignedTimeSeries.class);
  }

 /**
  * Convert an instance of AssignedTimeSeries to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

