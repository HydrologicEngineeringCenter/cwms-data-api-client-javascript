/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AssignedLocation;
import org.openapitools.client.model.LocationCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A representation of a location group
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class LocationGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION_CATEGORY = "locationCategory";
  @SerializedName(SERIALIZED_NAME_LOCATION_CATEGORY)
  private LocationCategory locationCategory;

  public static final String SERIALIZED_NAME_OFFICE_ID = "officeId";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SHARED_LOC_ALIAS_ID = "sharedLocAliasId";
  @SerializedName(SERIALIZED_NAME_SHARED_LOC_ALIAS_ID)
  private String sharedLocAliasId;

  public static final String SERIALIZED_NAME_SHARED_REF_LOCATION_ID = "sharedRefLocationId";
  @SerializedName(SERIALIZED_NAME_SHARED_REF_LOCATION_ID)
  private String sharedRefLocationId;

  public static final String SERIALIZED_NAME_LOC_GROUP_ATTRIBUTE = "locGroupAttribute";
  @SerializedName(SERIALIZED_NAME_LOC_GROUP_ATTRIBUTE)
  private BigDecimal locGroupAttribute;

  public static final String SERIALIZED_NAME_ASSIGNED_LOCATIONS = "assignedLocations";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_LOCATIONS)
  private List<AssignedLocation> assignedLocations;

  public LocationGroup() {
  }

  public LocationGroup id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public LocationGroup locationCategory(LocationCategory locationCategory) {
    
    this.locationCategory = locationCategory;
    return this;
  }

   /**
   * Get locationCategory
   * @return locationCategory
  **/
  @javax.annotation.Nullable

  public LocationCategory getLocationCategory() {
    return locationCategory;
  }


  public void setLocationCategory(LocationCategory locationCategory) {
    this.locationCategory = locationCategory;
  }


  public LocationGroup officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public LocationGroup description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public LocationGroup sharedLocAliasId(String sharedLocAliasId) {
    
    this.sharedLocAliasId = sharedLocAliasId;
    return this;
  }

   /**
   * Get sharedLocAliasId
   * @return sharedLocAliasId
  **/
  @javax.annotation.Nullable

  public String getSharedLocAliasId() {
    return sharedLocAliasId;
  }


  public void setSharedLocAliasId(String sharedLocAliasId) {
    this.sharedLocAliasId = sharedLocAliasId;
  }


  public LocationGroup sharedRefLocationId(String sharedRefLocationId) {
    
    this.sharedRefLocationId = sharedRefLocationId;
    return this;
  }

   /**
   * Get sharedRefLocationId
   * @return sharedRefLocationId
  **/
  @javax.annotation.Nullable

  public String getSharedRefLocationId() {
    return sharedRefLocationId;
  }


  public void setSharedRefLocationId(String sharedRefLocationId) {
    this.sharedRefLocationId = sharedRefLocationId;
  }


  public LocationGroup locGroupAttribute(BigDecimal locGroupAttribute) {
    
    this.locGroupAttribute = locGroupAttribute;
    return this;
  }

   /**
   * Get locGroupAttribute
   * @return locGroupAttribute
  **/
  @javax.annotation.Nullable

  public BigDecimal getLocGroupAttribute() {
    return locGroupAttribute;
  }


  public void setLocGroupAttribute(BigDecimal locGroupAttribute) {
    this.locGroupAttribute = locGroupAttribute;
  }


  public LocationGroup assignedLocations(List<AssignedLocation> assignedLocations) {
    
    this.assignedLocations = assignedLocations;
    return this;
  }

  public LocationGroup addAssignedLocationsItem(AssignedLocation assignedLocationsItem) {
    if (this.assignedLocations == null) {
      this.assignedLocations = new ArrayList<>();
    }
    this.assignedLocations.add(assignedLocationsItem);
    return this;
  }

   /**
   * Get assignedLocations
   * @return assignedLocations
  **/
  @javax.annotation.Nullable

  public List<AssignedLocation> getAssignedLocations() {
    return assignedLocations;
  }


  public void setAssignedLocations(List<AssignedLocation> assignedLocations) {
    this.assignedLocations = assignedLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationGroup locationGroup = (LocationGroup) o;
    return Objects.equals(this.id, locationGroup.id) &&
        Objects.equals(this.locationCategory, locationGroup.locationCategory) &&
        Objects.equals(this.officeId, locationGroup.officeId) &&
        Objects.equals(this.description, locationGroup.description) &&
        Objects.equals(this.sharedLocAliasId, locationGroup.sharedLocAliasId) &&
        Objects.equals(this.sharedRefLocationId, locationGroup.sharedRefLocationId) &&
        Objects.equals(this.locGroupAttribute, locationGroup.locGroupAttribute) &&
        Objects.equals(this.assignedLocations, locationGroup.assignedLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, locationCategory, officeId, description, sharedLocAliasId, sharedRefLocationId, locGroupAttribute, assignedLocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locationCategory: ").append(toIndentedString(locationCategory)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sharedLocAliasId: ").append(toIndentedString(sharedLocAliasId)).append("\n");
    sb.append("    sharedRefLocationId: ").append(toIndentedString(sharedRefLocationId)).append("\n");
    sb.append("    locGroupAttribute: ").append(toIndentedString(locGroupAttribute)).append("\n");
    sb.append("    assignedLocations: ").append(toIndentedString(assignedLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("locationCategory");
    openapiFields.add("officeId");
    openapiFields.add("description");
    openapiFields.add("sharedLocAliasId");
    openapiFields.add("sharedRefLocationId");
    openapiFields.add("locGroupAttribute");
    openapiFields.add("assignedLocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocationGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LocationGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationGroup is not found in the empty JSON string", LocationGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LocationGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationGroup` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `locationCategory`
      if (jsonObj.get("locationCategory") != null && !jsonObj.get("locationCategory").isJsonNull()) {
        LocationCategory.validateJsonObject(jsonObj.getAsJsonObject("locationCategory"));
      }
      if ((jsonObj.get("officeId") != null && !jsonObj.get("officeId").isJsonNull()) && !jsonObj.get("officeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("sharedLocAliasId") != null && !jsonObj.get("sharedLocAliasId").isJsonNull()) && !jsonObj.get("sharedLocAliasId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedLocAliasId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedLocAliasId").toString()));
      }
      if ((jsonObj.get("sharedRefLocationId") != null && !jsonObj.get("sharedRefLocationId").isJsonNull()) && !jsonObj.get("sharedRefLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedRefLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedRefLocationId").toString()));
      }
      if (jsonObj.get("assignedLocations") != null && !jsonObj.get("assignedLocations").isJsonNull()) {
        JsonArray jsonArrayassignedLocations = jsonObj.getAsJsonArray("assignedLocations");
        if (jsonArrayassignedLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assignedLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assignedLocations` to be an array in the JSON string but got `%s`", jsonObj.get("assignedLocations").toString()));
          }

          // validate the optional field `assignedLocations` (array)
          for (int i = 0; i < jsonArrayassignedLocations.size(); i++) {
            AssignedLocation.validateJsonObject(jsonArrayassignedLocations.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationGroup>() {
           @Override
           public void write(JsonWriter out, LocationGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocationGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocationGroup
  * @throws IOException if the JSON string is invalid with respect to LocationGroup
  */
  public static LocationGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationGroup.class);
  }

 /**
  * Convert an instance of LocationGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

