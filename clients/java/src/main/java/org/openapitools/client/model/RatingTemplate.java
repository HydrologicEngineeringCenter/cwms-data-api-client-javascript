/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ParameterSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatingTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class RatingTemplate {
  public static final String SERIALIZED_NAME_OFFICE_ID = "office-id";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEPENDENT_PARAMETER = "dependent-parameter";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_PARAMETER)
  private String dependentParameter;

  public static final String SERIALIZED_NAME_INDEPENDENT_PARAMETER_SPECS = "independent-parameter-specs";
  @SerializedName(SERIALIZED_NAME_INDEPENDENT_PARAMETER_SPECS)
  private List<ParameterSpec> independentParameterSpecs;

  public static final String SERIALIZED_NAME_RATING_IDS = "rating-ids";
  @SerializedName(SERIALIZED_NAME_RATING_IDS)
  private List<String> ratingIds;

  public RatingTemplate() {
  }

  public RatingTemplate officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public RatingTemplate id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public RatingTemplate version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public RatingTemplate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public RatingTemplate dependentParameter(String dependentParameter) {
    
    this.dependentParameter = dependentParameter;
    return this;
  }

   /**
   * Get dependentParameter
   * @return dependentParameter
  **/
  @javax.annotation.Nullable

  public String getDependentParameter() {
    return dependentParameter;
  }


  public void setDependentParameter(String dependentParameter) {
    this.dependentParameter = dependentParameter;
  }


  public RatingTemplate independentParameterSpecs(List<ParameterSpec> independentParameterSpecs) {
    
    this.independentParameterSpecs = independentParameterSpecs;
    return this;
  }

  public RatingTemplate addIndependentParameterSpecsItem(ParameterSpec independentParameterSpecsItem) {
    if (this.independentParameterSpecs == null) {
      this.independentParameterSpecs = new ArrayList<>();
    }
    this.independentParameterSpecs.add(independentParameterSpecsItem);
    return this;
  }

   /**
   * Get independentParameterSpecs
   * @return independentParameterSpecs
  **/
  @javax.annotation.Nullable

  public List<ParameterSpec> getIndependentParameterSpecs() {
    return independentParameterSpecs;
  }


  public void setIndependentParameterSpecs(List<ParameterSpec> independentParameterSpecs) {
    this.independentParameterSpecs = independentParameterSpecs;
  }


  public RatingTemplate ratingIds(List<String> ratingIds) {
    
    this.ratingIds = ratingIds;
    return this;
  }

  public RatingTemplate addRatingIdsItem(String ratingIdsItem) {
    if (this.ratingIds == null) {
      this.ratingIds = new ArrayList<>();
    }
    this.ratingIds.add(ratingIdsItem);
    return this;
  }

   /**
   * Get ratingIds
   * @return ratingIds
  **/
  @javax.annotation.Nullable

  public List<String> getRatingIds() {
    return ratingIds;
  }


  public void setRatingIds(List<String> ratingIds) {
    this.ratingIds = ratingIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatingTemplate ratingTemplate = (RatingTemplate) o;
    return Objects.equals(this.officeId, ratingTemplate.officeId) &&
        Objects.equals(this.id, ratingTemplate.id) &&
        Objects.equals(this.version, ratingTemplate.version) &&
        Objects.equals(this.description, ratingTemplate.description) &&
        Objects.equals(this.dependentParameter, ratingTemplate.dependentParameter) &&
        Objects.equals(this.independentParameterSpecs, ratingTemplate.independentParameterSpecs) &&
        Objects.equals(this.ratingIds, ratingTemplate.ratingIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(officeId, id, version, description, dependentParameter, independentParameterSpecs, ratingIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatingTemplate {\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dependentParameter: ").append(toIndentedString(dependentParameter)).append("\n");
    sb.append("    independentParameterSpecs: ").append(toIndentedString(independentParameterSpecs)).append("\n");
    sb.append("    ratingIds: ").append(toIndentedString(ratingIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("office-id");
    openapiFields.add("id");
    openapiFields.add("version");
    openapiFields.add("description");
    openapiFields.add("dependent-parameter");
    openapiFields.add("independent-parameter-specs");
    openapiFields.add("rating-ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RatingTemplate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RatingTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatingTemplate is not found in the empty JSON string", RatingTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RatingTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatingTemplate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("office-id") != null && !jsonObj.get("office-id").isJsonNull()) && !jsonObj.get("office-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office-id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("dependent-parameter") != null && !jsonObj.get("dependent-parameter").isJsonNull()) && !jsonObj.get("dependent-parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependent-parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependent-parameter").toString()));
      }
      if (jsonObj.get("independent-parameter-specs") != null && !jsonObj.get("independent-parameter-specs").isJsonNull()) {
        JsonArray jsonArrayindependentParameterSpecs = jsonObj.getAsJsonArray("independent-parameter-specs");
        if (jsonArrayindependentParameterSpecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("independent-parameter-specs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `independent-parameter-specs` to be an array in the JSON string but got `%s`", jsonObj.get("independent-parameter-specs").toString()));
          }

          // validate the optional field `independent-parameter-specs` (array)
          for (int i = 0; i < jsonArrayindependentParameterSpecs.size(); i++) {
            ParameterSpec.validateJsonObject(jsonArrayindependentParameterSpecs.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rating-ids") != null && !jsonObj.get("rating-ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rating-ids` to be an array in the JSON string but got `%s`", jsonObj.get("rating-ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatingTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatingTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatingTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatingTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<RatingTemplate>() {
           @Override
           public void write(JsonWriter out, RatingTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatingTemplate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RatingTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RatingTemplate
  * @throws IOException if the JSON string is invalid with respect to RatingTemplate
  */
  public static RatingTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatingTemplate.class);
  }

 /**
  * Convert an instance of RatingTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

