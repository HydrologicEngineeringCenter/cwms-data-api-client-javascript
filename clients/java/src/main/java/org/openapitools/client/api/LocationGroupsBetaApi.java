/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LocationGroup;
import org.openapitools.client.model.RadarError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocationGroupsBetaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationGroupsBetaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationGroupsBetaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCwmsDataLocationGroup
     * @param office Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned. (optional)
     * @param includeAssigned Include the assigned locations in the returned location groups. (default: false) (optional)
     * @param includeAssigned2 Deprecated. Use include-assigned instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLocationGroupCall(String office, Boolean includeAssigned, Boolean includeAssigned2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwms-data/location/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (includeAssigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-assigned", includeAssigned));
        }

        if (includeAssigned2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAssigned", includeAssigned2));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCwmsDataLocationGroupValidateBeforeCall(String office, Boolean includeAssigned, Boolean includeAssigned2, final ApiCallback _callback) throws ApiException {
        return getCwmsDataLocationGroupCall(office, includeAssigned, includeAssigned2, _callback);

    }

    /**
     * Get cwmsData location group
     * Returns CWMS Location Groups Data
     * @param office Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned. (optional)
     * @param includeAssigned Include the assigned locations in the returned location groups. (default: false) (optional)
     * @param includeAssigned2 Deprecated. Use include-assigned instead. (optional)
     * @return List&lt;LocationGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<LocationGroup> getCwmsDataLocationGroup(String office, Boolean includeAssigned, Boolean includeAssigned2) throws ApiException {
        ApiResponse<List<LocationGroup>> localVarResp = getCwmsDataLocationGroupWithHttpInfo(office, includeAssigned, includeAssigned2);
        return localVarResp.getData();
    }

    /**
     * Get cwmsData location group
     * Returns CWMS Location Groups Data
     * @param office Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned. (optional)
     * @param includeAssigned Include the assigned locations in the returned location groups. (default: false) (optional)
     * @param includeAssigned2 Deprecated. Use include-assigned instead. (optional)
     * @return ApiResponse&lt;List&lt;LocationGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LocationGroup>> getCwmsDataLocationGroupWithHttpInfo(String office, Boolean includeAssigned, Boolean includeAssigned2) throws ApiException {
        okhttp3.Call localVarCall = getCwmsDataLocationGroupValidateBeforeCall(office, includeAssigned, includeAssigned2, null);
        Type localVarReturnType = new TypeToken<List<LocationGroup>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cwmsData location group (asynchronously)
     * Returns CWMS Location Groups Data
     * @param office Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned. (optional)
     * @param includeAssigned Include the assigned locations in the returned location groups. (default: false) (optional)
     * @param includeAssigned2 Deprecated. Use include-assigned instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLocationGroupAsync(String office, Boolean includeAssigned, Boolean includeAssigned2, final ApiCallback<List<LocationGroup>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCwmsDataLocationGroupValidateBeforeCall(office, includeAssigned, includeAssigned2, _callback);
        Type localVarReturnType = new TypeToken<List<LocationGroup>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCwmsDataLocationGroupWithGroupId
     * @param groupId Specifies the location_group whose data is to be included in the response (required)
     * @param office Specifies the owning office of the location group whose data is to be included in the response. (required)
     * @param categoryId Specifies the category containing the location group whose data is to be included in the response. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLocationGroupWithGroupIdCall(String groupId, String office, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwms-data/location/group/{group-id}"
            .replace("{" + "group-id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category-id", categoryId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/csv",
            "application/geo+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCwmsDataLocationGroupWithGroupIdValidateBeforeCall(String groupId, String office, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getCwmsDataLocationGroupWithGroupId(Async)");
        }

        // verify the required parameter 'office' is set
        if (office == null) {
            throw new ApiException("Missing the required parameter 'office' when calling getCwmsDataLocationGroupWithGroupId(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCwmsDataLocationGroupWithGroupId(Async)");
        }

        return getCwmsDataLocationGroupWithGroupIdCall(groupId, office, categoryId, _callback);

    }

    /**
     * Get cwmsData location group with groupId
     * Retrieves requested Location Group
     * @param groupId Specifies the location_group whose data is to be included in the response (required)
     * @param office Specifies the owning office of the location group whose data is to be included in the response. (required)
     * @param categoryId Specifies the category containing the location group whose data is to be included in the response. (required)
     * @return LocationGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LocationGroup getCwmsDataLocationGroupWithGroupId(String groupId, String office, String categoryId) throws ApiException {
        ApiResponse<LocationGroup> localVarResp = getCwmsDataLocationGroupWithGroupIdWithHttpInfo(groupId, office, categoryId);
        return localVarResp.getData();
    }

    /**
     * Get cwmsData location group with groupId
     * Retrieves requested Location Group
     * @param groupId Specifies the location_group whose data is to be included in the response (required)
     * @param office Specifies the owning office of the location group whose data is to be included in the response. (required)
     * @param categoryId Specifies the category containing the location group whose data is to be included in the response. (required)
     * @return ApiResponse&lt;LocationGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationGroup> getCwmsDataLocationGroupWithGroupIdWithHttpInfo(String groupId, String office, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCwmsDataLocationGroupWithGroupIdValidateBeforeCall(groupId, office, categoryId, null);
        Type localVarReturnType = new TypeToken<LocationGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cwmsData location group with groupId (asynchronously)
     * Retrieves requested Location Group
     * @param groupId Specifies the location_group whose data is to be included in the response (required)
     * @param office Specifies the owning office of the location group whose data is to be included in the response. (required)
     * @param categoryId Specifies the category containing the location group whose data is to be included in the response. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLocationGroupWithGroupIdAsync(String groupId, String office, String categoryId, final ApiCallback<LocationGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCwmsDataLocationGroupWithGroupIdValidateBeforeCall(groupId, office, categoryId, _callback);
        Type localVarReturnType = new TypeToken<LocationGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
