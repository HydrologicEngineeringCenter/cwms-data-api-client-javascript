/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AbstractRatingMetadata;
import org.openapitools.client.model.RatingSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatingMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class RatingMetadata {
  public static final String SERIALIZED_NAME_RATING_SPEC = "rating-spec";
  @SerializedName(SERIALIZED_NAME_RATING_SPEC)
  private RatingSpec ratingSpec;

  public static final String SERIALIZED_NAME_RATINGS = "ratings";
  @SerializedName(SERIALIZED_NAME_RATINGS)
  private List<AbstractRatingMetadata> ratings;

  public RatingMetadata() {
  }

  public RatingMetadata ratingSpec(RatingSpec ratingSpec) {
    
    this.ratingSpec = ratingSpec;
    return this;
  }

   /**
   * Get ratingSpec
   * @return ratingSpec
  **/
  @javax.annotation.Nullable

  public RatingSpec getRatingSpec() {
    return ratingSpec;
  }


  public void setRatingSpec(RatingSpec ratingSpec) {
    this.ratingSpec = ratingSpec;
  }


  public RatingMetadata ratings(List<AbstractRatingMetadata> ratings) {
    
    this.ratings = ratings;
    return this;
  }

  public RatingMetadata addRatingsItem(AbstractRatingMetadata ratingsItem) {
    if (this.ratings == null) {
      this.ratings = new ArrayList<>();
    }
    this.ratings.add(ratingsItem);
    return this;
  }

   /**
   * Get ratings
   * @return ratings
  **/
  @javax.annotation.Nullable

  public List<AbstractRatingMetadata> getRatings() {
    return ratings;
  }


  public void setRatings(List<AbstractRatingMetadata> ratings) {
    this.ratings = ratings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatingMetadata ratingMetadata = (RatingMetadata) o;
    return Objects.equals(this.ratingSpec, ratingMetadata.ratingSpec) &&
        Objects.equals(this.ratings, ratingMetadata.ratings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ratingSpec, ratings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatingMetadata {\n");
    sb.append("    ratingSpec: ").append(toIndentedString(ratingSpec)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rating-spec");
    openapiFields.add("ratings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RatingMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RatingMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatingMetadata is not found in the empty JSON string", RatingMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RatingMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatingMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `rating-spec`
      if (jsonObj.get("rating-spec") != null && !jsonObj.get("rating-spec").isJsonNull()) {
        RatingSpec.validateJsonObject(jsonObj.getAsJsonObject("rating-spec"));
      }
      if (jsonObj.get("ratings") != null && !jsonObj.get("ratings").isJsonNull()) {
        JsonArray jsonArrayratings = jsonObj.getAsJsonArray("ratings");
        if (jsonArrayratings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ratings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ratings` to be an array in the JSON string but got `%s`", jsonObj.get("ratings").toString()));
          }

          // validate the optional field `ratings` (array)
          for (int i = 0; i < jsonArrayratings.size(); i++) {
            AbstractRatingMetadata.validateJsonObject(jsonArrayratings.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatingMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatingMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatingMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatingMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<RatingMetadata>() {
           @Override
           public void write(JsonWriter out, RatingMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatingMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RatingMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RatingMetadata
  * @throws IOException if the JSON string is invalid with respect to RatingMetadata
  */
  public static RatingMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatingMetadata.class);
  }

 /**
  * Convert an instance of RatingMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

