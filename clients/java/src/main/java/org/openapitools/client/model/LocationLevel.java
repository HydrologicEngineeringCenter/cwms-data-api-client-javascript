/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SeasonalValueBean;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LocationLevel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class LocationLevel {
  public static final String SERIALIZED_NAME_LOCATION_LEVEL_ID = "location-level-id";
  @SerializedName(SERIALIZED_NAME_LOCATION_LEVEL_ID)
  private String locationLevelId;

  public static final String SERIALIZED_NAME_OFFICE_ID = "office-id";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_SEASONAL_TIME_SERIES_ID = "seasonal-time-series-id";
  @SerializedName(SERIALIZED_NAME_SEASONAL_TIME_SERIES_ID)
  private String seasonalTimeSeriesId;

  public static final String SERIALIZED_NAME_SEASONAL_VALUES = "seasonal-values";
  @SerializedName(SERIALIZED_NAME_SEASONAL_VALUES)
  private List<SeasonalValueBean> seasonalValues;

  public static final String SERIALIZED_NAME_SPECIFIED_LEVEL_ID = "specified-level-id";
  @SerializedName(SERIALIZED_NAME_SPECIFIED_LEVEL_ID)
  private String specifiedLevelId;

  /**
   * To indicate if single or aggregate value
   */
  @JsonAdapter(ParameterTypeIdEnum.Adapter.class)
  public enum ParameterTypeIdEnum {
    INST("Inst"),
    
    AVE("Ave"),
    
    MIN("Min"),
    
    MAX("Max"),
    
    TOTAL("Total");

    private String value;

    ParameterTypeIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParameterTypeIdEnum fromValue(String value) {
      for (ParameterTypeIdEnum b : ParameterTypeIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParameterTypeIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterTypeIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParameterTypeIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParameterTypeIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PARAMETER_TYPE_ID = "parameter-type-id";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TYPE_ID)
  private ParameterTypeIdEnum parameterTypeId;

  public static final String SERIALIZED_NAME_PARAMETER_ID = "parameter-id";
  @SerializedName(SERIALIZED_NAME_PARAMETER_ID)
  private String parameterId;

  public static final String SERIALIZED_NAME_CONSTANT_VALUE = "constant-value";
  @SerializedName(SERIALIZED_NAME_CONSTANT_VALUE)
  private Double constantValue;

  public static final String SERIALIZED_NAME_LEVEL_UNITS_ID = "level-units-id";
  @SerializedName(SERIALIZED_NAME_LEVEL_UNITS_ID)
  private String levelUnitsId;

  public static final String SERIALIZED_NAME_LEVEL_DATE = "level-date";
  @SerializedName(SERIALIZED_NAME_LEVEL_DATE)
  private OffsetDateTime levelDate;

  public static final String SERIALIZED_NAME_LEVEL_COMMENT = "level-comment";
  @SerializedName(SERIALIZED_NAME_LEVEL_COMMENT)
  private String levelComment;

  public static final String SERIALIZED_NAME_INTERVAL_ORIGIN = "interval-origin";
  @SerializedName(SERIALIZED_NAME_INTERVAL_ORIGIN)
  private OffsetDateTime intervalOrigin;

  public static final String SERIALIZED_NAME_INTERVAL_MONTHS = "interval-months";
  @SerializedName(SERIALIZED_NAME_INTERVAL_MONTHS)
  private Integer intervalMonths;

  public static final String SERIALIZED_NAME_INTERVAL_MINUTES = "interval-minutes";
  @SerializedName(SERIALIZED_NAME_INTERVAL_MINUTES)
  private Integer intervalMinutes;

  /**
   * Indicating whether or not to interpolate between seasonal values.
   */
  @JsonAdapter(InterpolateStringEnum.Adapter.class)
  public enum InterpolateStringEnum {
    T("T"),
    
    F("F");

    private String value;

    InterpolateStringEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterpolateStringEnum fromValue(String value) {
      for (InterpolateStringEnum b : InterpolateStringEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterpolateStringEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterpolateStringEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterpolateStringEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterpolateStringEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTERPOLATE_STRING = "interpolate-string";
  @SerializedName(SERIALIZED_NAME_INTERPOLATE_STRING)
  private InterpolateStringEnum interpolateString;

  public static final String SERIALIZED_NAME_DURATION_ID = "duration-id";
  @SerializedName(SERIALIZED_NAME_DURATION_ID)
  private String durationId;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE = "attribute-value";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE)
  private BigDecimal attributeValue;

  public static final String SERIALIZED_NAME_ATTRIBUTE_UNITS_ID = "attribute-units-id";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_UNITS_ID)
  private String attributeUnitsId;

  public static final String SERIALIZED_NAME_ATTRIBUTE_PARAMETER_TYPE_ID = "attribute-parameter-type-id";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_PARAMETER_TYPE_ID)
  private String attributeParameterTypeId;

  public static final String SERIALIZED_NAME_ATTRIBUTE_PARAMETER_ID = "attribute-parameter-id";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_PARAMETER_ID)
  private String attributeParameterId;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DURATION_ID = "attribute-duration-id";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DURATION_ID)
  private String attributeDurationId;

  public static final String SERIALIZED_NAME_ATTRIBUTE_COMMENT = "attribute-comment";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_COMMENT)
  private String attributeComment;

  public LocationLevel() {
  }

  public LocationLevel locationLevelId(String locationLevelId) {
    
    this.locationLevelId = locationLevelId;
    return this;
  }

   /**
   * Name of the location level
   * @return locationLevelId
  **/
  @javax.annotation.Nonnull

  public String getLocationLevelId() {
    return locationLevelId;
  }


  public void setLocationLevelId(String locationLevelId) {
    this.locationLevelId = locationLevelId;
  }


  public LocationLevel officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Owning office of the level
   * @return officeId
  **/
  @javax.annotation.Nonnull

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public LocationLevel seasonalTimeSeriesId(String seasonalTimeSeriesId) {
    
    this.seasonalTimeSeriesId = seasonalTimeSeriesId;
    return this;
  }

   /**
   * Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue
   * @return seasonalTimeSeriesId
  **/
  @javax.annotation.Nullable

  public String getSeasonalTimeSeriesId() {
    return seasonalTimeSeriesId;
  }


  public void setSeasonalTimeSeriesId(String seasonalTimeSeriesId) {
    this.seasonalTimeSeriesId = seasonalTimeSeriesId;
  }


  public LocationLevel seasonalValues(List<SeasonalValueBean> seasonalValues) {
    
    this.seasonalValues = seasonalValues;
    return this;
  }

  public LocationLevel addSeasonalValuesItem(SeasonalValueBean seasonalValuesItem) {
    if (this.seasonalValues == null) {
      this.seasonalValues = new ArrayList<>();
    }
    this.seasonalValues.add(seasonalValuesItem);
    return this;
  }

   /**
   * List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue
   * @return seasonalValues
  **/
  @javax.annotation.Nullable

  public List<SeasonalValueBean> getSeasonalValues() {
    return seasonalValues;
  }


  public void setSeasonalValues(List<SeasonalValueBean> seasonalValues) {
    this.seasonalValues = seasonalValues;
  }


  public LocationLevel specifiedLevelId(String specifiedLevelId) {
    
    this.specifiedLevelId = specifiedLevelId;
    return this;
  }

   /**
   * Generic name of this location level. Common names are &#39;Top of Dam&#39;, &#39;Streambed&#39;, &#39;Bottom of Dam&#39;.
   * @return specifiedLevelId
  **/
  @javax.annotation.Nullable

  public String getSpecifiedLevelId() {
    return specifiedLevelId;
  }


  public void setSpecifiedLevelId(String specifiedLevelId) {
    this.specifiedLevelId = specifiedLevelId;
  }


  public LocationLevel parameterTypeId(ParameterTypeIdEnum parameterTypeId) {
    
    this.parameterTypeId = parameterTypeId;
    return this;
  }

   /**
   * To indicate if single or aggregate value
   * @return parameterTypeId
  **/
  @javax.annotation.Nullable

  public ParameterTypeIdEnum getParameterTypeId() {
    return parameterTypeId;
  }


  public void setParameterTypeId(ParameterTypeIdEnum parameterTypeId) {
    this.parameterTypeId = parameterTypeId;
  }


  public LocationLevel parameterId(String parameterId) {
    
    this.parameterId = parameterId;
    return this;
  }

   /**
   * Data Type such as Stage, Elevation, or others.
   * @return parameterId
  **/
  @javax.annotation.Nullable

  public String getParameterId() {
    return parameterId;
  }


  public void setParameterId(String parameterId) {
    this.parameterId = parameterId;
  }


  public LocationLevel constantValue(Double constantValue) {
    
    this.constantValue = constantValue;
    return this;
  }

   /**
   * Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues.
   * @return constantValue
  **/
  @javax.annotation.Nullable

  public Double getConstantValue() {
    return constantValue;
  }


  public void setConstantValue(Double constantValue) {
    this.constantValue = constantValue;
  }


  public LocationLevel levelUnitsId(String levelUnitsId) {
    
    this.levelUnitsId = levelUnitsId;
    return this;
  }

   /**
   * Units thhe provided levels are in
   * @return levelUnitsId
  **/
  @javax.annotation.Nullable

  public String getLevelUnitsId() {
    return levelUnitsId;
  }


  public void setLevelUnitsId(String levelUnitsId) {
    this.levelUnitsId = levelUnitsId;
  }


  public LocationLevel levelDate(OffsetDateTime levelDate) {
    
    this.levelDate = levelDate;
    return this;
  }

   /**
   * The date/time at which this location level configuration takes effect.
   * @return levelDate
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getLevelDate() {
    return levelDate;
  }


  public void setLevelDate(OffsetDateTime levelDate) {
    this.levelDate = levelDate;
  }


  public LocationLevel levelComment(String levelComment) {
    
    this.levelComment = levelComment;
    return this;
  }

   /**
   * Get levelComment
   * @return levelComment
  **/
  @javax.annotation.Nullable

  public String getLevelComment() {
    return levelComment;
  }


  public void setLevelComment(String levelComment) {
    this.levelComment = levelComment;
  }


  public LocationLevel intervalOrigin(OffsetDateTime intervalOrigin) {
    
    this.intervalOrigin = intervalOrigin;
    return this;
  }

   /**
   * The start point of provided seasonal values
   * @return intervalOrigin
  **/
  @javax.annotation.Nullable

  public OffsetDateTime getIntervalOrigin() {
    return intervalOrigin;
  }


  public void setIntervalOrigin(OffsetDateTime intervalOrigin) {
    this.intervalOrigin = intervalOrigin;
  }


  public LocationLevel intervalMonths(Integer intervalMonths) {
    
    this.intervalMonths = intervalMonths;
    return this;
  }

   /**
   * Get intervalMonths
   * @return intervalMonths
  **/
  @javax.annotation.Nullable

  public Integer getIntervalMonths() {
    return intervalMonths;
  }


  public void setIntervalMonths(Integer intervalMonths) {
    this.intervalMonths = intervalMonths;
  }


  public LocationLevel intervalMinutes(Integer intervalMinutes) {
    
    this.intervalMinutes = intervalMinutes;
    return this;
  }

   /**
   * Get intervalMinutes
   * @return intervalMinutes
  **/
  @javax.annotation.Nullable

  public Integer getIntervalMinutes() {
    return intervalMinutes;
  }


  public void setIntervalMinutes(Integer intervalMinutes) {
    this.intervalMinutes = intervalMinutes;
  }


  public LocationLevel interpolateString(InterpolateStringEnum interpolateString) {
    
    this.interpolateString = interpolateString;
    return this;
  }

   /**
   * Indicating whether or not to interpolate between seasonal values.
   * @return interpolateString
  **/
  @javax.annotation.Nullable

  public InterpolateStringEnum getInterpolateString() {
    return interpolateString;
  }


  public void setInterpolateString(InterpolateStringEnum interpolateString) {
    this.interpolateString = interpolateString;
  }


  public LocationLevel durationId(String durationId) {
    
    this.durationId = durationId;
    return this;
  }

   /**
   * 0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value.
   * @return durationId
  **/
  @javax.annotation.Nullable

  public String getDurationId() {
    return durationId;
  }


  public void setDurationId(String durationId) {
    this.durationId = durationId;
  }


  public LocationLevel attributeValue(BigDecimal attributeValue) {
    
    this.attributeValue = attributeValue;
    return this;
  }

   /**
   * Get attributeValue
   * @return attributeValue
  **/
  @javax.annotation.Nullable

  public BigDecimal getAttributeValue() {
    return attributeValue;
  }


  public void setAttributeValue(BigDecimal attributeValue) {
    this.attributeValue = attributeValue;
  }


  public LocationLevel attributeUnitsId(String attributeUnitsId) {
    
    this.attributeUnitsId = attributeUnitsId;
    return this;
  }

   /**
   * Get attributeUnitsId
   * @return attributeUnitsId
  **/
  @javax.annotation.Nullable

  public String getAttributeUnitsId() {
    return attributeUnitsId;
  }


  public void setAttributeUnitsId(String attributeUnitsId) {
    this.attributeUnitsId = attributeUnitsId;
  }


  public LocationLevel attributeParameterTypeId(String attributeParameterTypeId) {
    
    this.attributeParameterTypeId = attributeParameterTypeId;
    return this;
  }

   /**
   * Get attributeParameterTypeId
   * @return attributeParameterTypeId
  **/
  @javax.annotation.Nullable

  public String getAttributeParameterTypeId() {
    return attributeParameterTypeId;
  }


  public void setAttributeParameterTypeId(String attributeParameterTypeId) {
    this.attributeParameterTypeId = attributeParameterTypeId;
  }


  public LocationLevel attributeParameterId(String attributeParameterId) {
    
    this.attributeParameterId = attributeParameterId;
    return this;
  }

   /**
   * Get attributeParameterId
   * @return attributeParameterId
  **/
  @javax.annotation.Nullable

  public String getAttributeParameterId() {
    return attributeParameterId;
  }


  public void setAttributeParameterId(String attributeParameterId) {
    this.attributeParameterId = attributeParameterId;
  }


  public LocationLevel attributeDurationId(String attributeDurationId) {
    
    this.attributeDurationId = attributeDurationId;
    return this;
  }

   /**
   * Get attributeDurationId
   * @return attributeDurationId
  **/
  @javax.annotation.Nullable

  public String getAttributeDurationId() {
    return attributeDurationId;
  }


  public void setAttributeDurationId(String attributeDurationId) {
    this.attributeDurationId = attributeDurationId;
  }


  public LocationLevel attributeComment(String attributeComment) {
    
    this.attributeComment = attributeComment;
    return this;
  }

   /**
   * Get attributeComment
   * @return attributeComment
  **/
  @javax.annotation.Nullable

  public String getAttributeComment() {
    return attributeComment;
  }


  public void setAttributeComment(String attributeComment) {
    this.attributeComment = attributeComment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationLevel locationLevel = (LocationLevel) o;
    return Objects.equals(this.locationLevelId, locationLevel.locationLevelId) &&
        Objects.equals(this.officeId, locationLevel.officeId) &&
        Objects.equals(this.seasonalTimeSeriesId, locationLevel.seasonalTimeSeriesId) &&
        Objects.equals(this.seasonalValues, locationLevel.seasonalValues) &&
        Objects.equals(this.specifiedLevelId, locationLevel.specifiedLevelId) &&
        Objects.equals(this.parameterTypeId, locationLevel.parameterTypeId) &&
        Objects.equals(this.parameterId, locationLevel.parameterId) &&
        Objects.equals(this.constantValue, locationLevel.constantValue) &&
        Objects.equals(this.levelUnitsId, locationLevel.levelUnitsId) &&
        Objects.equals(this.levelDate, locationLevel.levelDate) &&
        Objects.equals(this.levelComment, locationLevel.levelComment) &&
        Objects.equals(this.intervalOrigin, locationLevel.intervalOrigin) &&
        Objects.equals(this.intervalMonths, locationLevel.intervalMonths) &&
        Objects.equals(this.intervalMinutes, locationLevel.intervalMinutes) &&
        Objects.equals(this.interpolateString, locationLevel.interpolateString) &&
        Objects.equals(this.durationId, locationLevel.durationId) &&
        Objects.equals(this.attributeValue, locationLevel.attributeValue) &&
        Objects.equals(this.attributeUnitsId, locationLevel.attributeUnitsId) &&
        Objects.equals(this.attributeParameterTypeId, locationLevel.attributeParameterTypeId) &&
        Objects.equals(this.attributeParameterId, locationLevel.attributeParameterId) &&
        Objects.equals(this.attributeDurationId, locationLevel.attributeDurationId) &&
        Objects.equals(this.attributeComment, locationLevel.attributeComment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationLevelId, officeId, seasonalTimeSeriesId, seasonalValues, specifiedLevelId, parameterTypeId, parameterId, constantValue, levelUnitsId, levelDate, levelComment, intervalOrigin, intervalMonths, intervalMinutes, interpolateString, durationId, attributeValue, attributeUnitsId, attributeParameterTypeId, attributeParameterId, attributeDurationId, attributeComment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationLevel {\n");
    sb.append("    locationLevelId: ").append(toIndentedString(locationLevelId)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    seasonalTimeSeriesId: ").append(toIndentedString(seasonalTimeSeriesId)).append("\n");
    sb.append("    seasonalValues: ").append(toIndentedString(seasonalValues)).append("\n");
    sb.append("    specifiedLevelId: ").append(toIndentedString(specifiedLevelId)).append("\n");
    sb.append("    parameterTypeId: ").append(toIndentedString(parameterTypeId)).append("\n");
    sb.append("    parameterId: ").append(toIndentedString(parameterId)).append("\n");
    sb.append("    constantValue: ").append(toIndentedString(constantValue)).append("\n");
    sb.append("    levelUnitsId: ").append(toIndentedString(levelUnitsId)).append("\n");
    sb.append("    levelDate: ").append(toIndentedString(levelDate)).append("\n");
    sb.append("    levelComment: ").append(toIndentedString(levelComment)).append("\n");
    sb.append("    intervalOrigin: ").append(toIndentedString(intervalOrigin)).append("\n");
    sb.append("    intervalMonths: ").append(toIndentedString(intervalMonths)).append("\n");
    sb.append("    intervalMinutes: ").append(toIndentedString(intervalMinutes)).append("\n");
    sb.append("    interpolateString: ").append(toIndentedString(interpolateString)).append("\n");
    sb.append("    durationId: ").append(toIndentedString(durationId)).append("\n");
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("    attributeUnitsId: ").append(toIndentedString(attributeUnitsId)).append("\n");
    sb.append("    attributeParameterTypeId: ").append(toIndentedString(attributeParameterTypeId)).append("\n");
    sb.append("    attributeParameterId: ").append(toIndentedString(attributeParameterId)).append("\n");
    sb.append("    attributeDurationId: ").append(toIndentedString(attributeDurationId)).append("\n");
    sb.append("    attributeComment: ").append(toIndentedString(attributeComment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location-level-id");
    openapiFields.add("office-id");
    openapiFields.add("seasonal-time-series-id");
    openapiFields.add("seasonal-values");
    openapiFields.add("specified-level-id");
    openapiFields.add("parameter-type-id");
    openapiFields.add("parameter-id");
    openapiFields.add("constant-value");
    openapiFields.add("level-units-id");
    openapiFields.add("level-date");
    openapiFields.add("level-comment");
    openapiFields.add("interval-origin");
    openapiFields.add("interval-months");
    openapiFields.add("interval-minutes");
    openapiFields.add("interpolate-string");
    openapiFields.add("duration-id");
    openapiFields.add("attribute-value");
    openapiFields.add("attribute-units-id");
    openapiFields.add("attribute-parameter-type-id");
    openapiFields.add("attribute-parameter-id");
    openapiFields.add("attribute-duration-id");
    openapiFields.add("attribute-comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location-level-id");
    openapiRequiredFields.add("office-id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LocationLevel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LocationLevel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationLevel is not found in the empty JSON string", LocationLevel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LocationLevel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationLevel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LocationLevel.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("location-level-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location-level-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location-level-id").toString()));
      }
      if (!jsonObj.get("office-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office-id").toString()));
      }
      if ((jsonObj.get("seasonal-time-series-id") != null && !jsonObj.get("seasonal-time-series-id").isJsonNull()) && !jsonObj.get("seasonal-time-series-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seasonal-time-series-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seasonal-time-series-id").toString()));
      }
      if (jsonObj.get("seasonal-values") != null && !jsonObj.get("seasonal-values").isJsonNull()) {
        JsonArray jsonArrayseasonalValues = jsonObj.getAsJsonArray("seasonal-values");
        if (jsonArrayseasonalValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("seasonal-values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `seasonal-values` to be an array in the JSON string but got `%s`", jsonObj.get("seasonal-values").toString()));
          }

          // validate the optional field `seasonal-values` (array)
          for (int i = 0; i < jsonArrayseasonalValues.size(); i++) {
            SeasonalValueBean.validateJsonObject(jsonArrayseasonalValues.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("specified-level-id") != null && !jsonObj.get("specified-level-id").isJsonNull()) && !jsonObj.get("specified-level-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specified-level-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specified-level-id").toString()));
      }
      if ((jsonObj.get("parameter-type-id") != null && !jsonObj.get("parameter-type-id").isJsonNull()) && !jsonObj.get("parameter-type-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter-type-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter-type-id").toString()));
      }
      if ((jsonObj.get("parameter-id") != null && !jsonObj.get("parameter-id").isJsonNull()) && !jsonObj.get("parameter-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter-id").toString()));
      }
      if ((jsonObj.get("level-units-id") != null && !jsonObj.get("level-units-id").isJsonNull()) && !jsonObj.get("level-units-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level-units-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level-units-id").toString()));
      }
      if ((jsonObj.get("level-comment") != null && !jsonObj.get("level-comment").isJsonNull()) && !jsonObj.get("level-comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level-comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level-comment").toString()));
      }
      if ((jsonObj.get("interpolate-string") != null && !jsonObj.get("interpolate-string").isJsonNull()) && !jsonObj.get("interpolate-string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interpolate-string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interpolate-string").toString()));
      }
      if ((jsonObj.get("duration-id") != null && !jsonObj.get("duration-id").isJsonNull()) && !jsonObj.get("duration-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration-id").toString()));
      }
      if ((jsonObj.get("attribute-units-id") != null && !jsonObj.get("attribute-units-id").isJsonNull()) && !jsonObj.get("attribute-units-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute-units-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute-units-id").toString()));
      }
      if ((jsonObj.get("attribute-parameter-type-id") != null && !jsonObj.get("attribute-parameter-type-id").isJsonNull()) && !jsonObj.get("attribute-parameter-type-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute-parameter-type-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute-parameter-type-id").toString()));
      }
      if ((jsonObj.get("attribute-parameter-id") != null && !jsonObj.get("attribute-parameter-id").isJsonNull()) && !jsonObj.get("attribute-parameter-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute-parameter-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute-parameter-id").toString()));
      }
      if ((jsonObj.get("attribute-duration-id") != null && !jsonObj.get("attribute-duration-id").isJsonNull()) && !jsonObj.get("attribute-duration-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute-duration-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute-duration-id").toString()));
      }
      if ((jsonObj.get("attribute-comment") != null && !jsonObj.get("attribute-comment").isJsonNull()) && !jsonObj.get("attribute-comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute-comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute-comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationLevel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationLevel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationLevel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationLevel.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationLevel>() {
           @Override
           public void write(JsonWriter out, LocationLevel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationLevel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LocationLevel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LocationLevel
  * @throws IOException if the JSON string is invalid with respect to LocationLevel
  */
  public static LocationLevel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationLevel.class);
  }

 /**
  * Convert an instance of LocationLevel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

