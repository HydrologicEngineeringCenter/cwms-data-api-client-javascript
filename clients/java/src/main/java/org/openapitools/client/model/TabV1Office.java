/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Single Office or List of Offices in tab separated format
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class TabV1Office {
  public static final String SERIALIZED_NAME_OFFICE = "Office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_LONG_NAME = "longName";
  @SerializedName(SERIALIZED_NAME_LONG_NAME)
  private String longName;

  public static final String SERIALIZED_NAME_OFFICE_TYPE = "officeType";
  @SerializedName(SERIALIZED_NAME_OFFICE_TYPE)
  private String officeType;

  public static final String SERIALIZED_NAME_REPORTS_TO_OFFICE = "reportsToOffice";
  @SerializedName(SERIALIZED_NAME_REPORTS_TO_OFFICE)
  private String reportsToOffice;

  public TabV1Office() {
  }

  public TabV1Office office(String office) {
    
    this.office = office;
    return this;
  }

   /**
   * Get office
   * @return office
  **/
  @javax.annotation.Nullable

  public String getOffice() {
    return office;
  }


  public void setOffice(String office) {
    this.office = office;
  }


  public TabV1Office longName(String longName) {
    
    this.longName = longName;
    return this;
  }

   /**
   * Get longName
   * @return longName
  **/
  @javax.annotation.Nullable

  public String getLongName() {
    return longName;
  }


  public void setLongName(String longName) {
    this.longName = longName;
  }


  public TabV1Office officeType(String officeType) {
    
    this.officeType = officeType;
    return this;
  }

   /**
   * Get officeType
   * @return officeType
  **/
  @javax.annotation.Nullable

  public String getOfficeType() {
    return officeType;
  }


  public void setOfficeType(String officeType) {
    this.officeType = officeType;
  }


  public TabV1Office reportsToOffice(String reportsToOffice) {
    
    this.reportsToOffice = reportsToOffice;
    return this;
  }

   /**
   * Get reportsToOffice
   * @return reportsToOffice
  **/
  @javax.annotation.Nullable

  public String getReportsToOffice() {
    return reportsToOffice;
  }


  public void setReportsToOffice(String reportsToOffice) {
    this.reportsToOffice = reportsToOffice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TabV1Office tabV1Office = (TabV1Office) o;
    return Objects.equals(this.office, tabV1Office.office) &&
        Objects.equals(this.longName, tabV1Office.longName) &&
        Objects.equals(this.officeType, tabV1Office.officeType) &&
        Objects.equals(this.reportsToOffice, tabV1Office.reportsToOffice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(office, longName, officeType, reportsToOffice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TabV1Office {\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    longName: ").append(toIndentedString(longName)).append("\n");
    sb.append("    officeType: ").append(toIndentedString(officeType)).append("\n");
    sb.append("    reportsToOffice: ").append(toIndentedString(reportsToOffice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Office");
    openapiFields.add("longName");
    openapiFields.add("officeType");
    openapiFields.add("reportsToOffice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TabV1Office
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TabV1Office.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TabV1Office is not found in the empty JSON string", TabV1Office.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TabV1Office.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TabV1Office` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Office") != null && !jsonObj.get("Office").isJsonNull()) && !jsonObj.get("Office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Office").toString()));
      }
      if ((jsonObj.get("longName") != null && !jsonObj.get("longName").isJsonNull()) && !jsonObj.get("longName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longName").toString()));
      }
      if ((jsonObj.get("officeType") != null && !jsonObj.get("officeType").isJsonNull()) && !jsonObj.get("officeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeType").toString()));
      }
      if ((jsonObj.get("reportsToOffice") != null && !jsonObj.get("reportsToOffice").isJsonNull()) && !jsonObj.get("reportsToOffice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportsToOffice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportsToOffice").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TabV1Office.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TabV1Office' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TabV1Office> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TabV1Office.class));

       return (TypeAdapter<T>) new TypeAdapter<TabV1Office>() {
           @Override
           public void write(JsonWriter out, TabV1Office value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TabV1Office read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TabV1Office given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TabV1Office
  * @throws IOException if the JSON string is invalid with respect to TabV1Office
  */
  public static TabV1Office fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TabV1Office.class);
  }

 /**
  * Convert an instance of TabV1Office to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

