/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LocationLevel;
import org.openapitools.client.model.LocationLevels;
import org.openapitools.client.model.RadarError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LevelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LevelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LevelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCwmsDataLevelsWithLevelId
     * @param levelId Specifies the location level id of the Location Level to be deleted (required)
     * @param cascadeDelete  (optional)
     * @param office Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices. (optional)
     * @param date Deprecated, use effective-date (optional)
     * @param effectiveDate Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCwmsDataLevelsWithLevelIdCall(String levelId, Boolean cascadeDelete, String office, String date, String effectiveDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwms-data/levels/{level-id}"
            .replace("{" + "level-id" + "}", localVarApiClient.escapeString(levelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cascadeDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cascade-delete", cascadeDelete));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effective-date", effectiveDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCwmsDataLevelsWithLevelIdValidateBeforeCall(String levelId, Boolean cascadeDelete, String office, String date, String effectiveDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling deleteCwmsDataLevelsWithLevelId(Async)");
        }

        return deleteCwmsDataLevelsWithLevelIdCall(levelId, cascadeDelete, office, date, effectiveDate, _callback);

    }

    /**
     * Delete cwmsData levels with levelId
     * Delete CWMS Location Level
     * @param levelId Specifies the location level id of the Location Level to be deleted (required)
     * @param cascadeDelete  (optional)
     * @param office Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices. (optional)
     * @param date Deprecated, use effective-date (optional)
     * @param effectiveDate Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCwmsDataLevelsWithLevelId(String levelId, Boolean cascadeDelete, String office, String date, String effectiveDate) throws ApiException {
        deleteCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, cascadeDelete, office, date, effectiveDate);
    }

    /**
     * Delete cwmsData levels with levelId
     * Delete CWMS Location Level
     * @param levelId Specifies the location level id of the Location Level to be deleted (required)
     * @param cascadeDelete  (optional)
     * @param office Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices. (optional)
     * @param date Deprecated, use effective-date (optional)
     * @param effectiveDate Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCwmsDataLevelsWithLevelIdWithHttpInfo(String levelId, Boolean cascadeDelete, String office, String date, String effectiveDate) throws ApiException {
        okhttp3.Call localVarCall = deleteCwmsDataLevelsWithLevelIdValidateBeforeCall(levelId, cascadeDelete, office, date, effectiveDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete cwmsData levels with levelId (asynchronously)
     * Delete CWMS Location Level
     * @param levelId Specifies the location level id of the Location Level to be deleted (required)
     * @param cascadeDelete  (optional)
     * @param office Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices. (optional)
     * @param date Deprecated, use effective-date (optional)
     * @param effectiveDate Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCwmsDataLevelsWithLevelIdAsync(String levelId, Boolean cascadeDelete, String office, String date, String effectiveDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCwmsDataLevelsWithLevelIdValidateBeforeCall(levelId, cascadeDelete, office, date, effectiveDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCwmsDataLevels
     * @param name Deprecated, use level-id-mask.  (optional)
     * @param levelIdMask Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all. (optional)
     * @param office Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned. (optional)
     * @param unit Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters. (optional)
     * @param datum Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum. (optional)
     * @param begin Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. (optional)
     * @param end Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time (optional)
     * @param timezone Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used. (optional)
     * @param format Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version&#x3D;2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)   (optional)
     * @param page This identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param pageSize How many entries per page returned. Default 100. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLevelsCall(String name, String levelIdMask, String office, String unit, String datum, String begin, String end, String timezone, String format, String page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwms-data/levels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (levelIdMask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("level-id-mask", levelIdMask));
        }

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        if (datum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datum", datum));
        }

        if (begin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begin", begin));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (timezone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timezone", timezone));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page-size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json;version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCwmsDataLevelsValidateBeforeCall(String name, String levelIdMask, String office, String unit, String datum, String begin, String end, String timezone, String format, String page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getCwmsDataLevelsCall(name, levelIdMask, office, unit, datum, begin, end, timezone, format, page, pageSize, _callback);

    }

    /**
     * Get cwmsData levels
     * 
     * @param name Deprecated, use level-id-mask.  (optional)
     * @param levelIdMask Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all. (optional)
     * @param office Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned. (optional)
     * @param unit Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters. (optional)
     * @param datum Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum. (optional)
     * @param begin Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. (optional)
     * @param end Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time (optional)
     * @param timezone Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used. (optional)
     * @param format Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version&#x3D;2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)   (optional)
     * @param page This identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param pageSize How many entries per page returned. Default 100. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getCwmsDataLevels(String name, String levelIdMask, String office, String unit, String datum, String begin, String end, String timezone, String format, String page, Integer pageSize) throws ApiException {
        ApiResponse<Object> localVarResp = getCwmsDataLevelsWithHttpInfo(name, levelIdMask, office, unit, datum, begin, end, timezone, format, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get cwmsData levels
     * 
     * @param name Deprecated, use level-id-mask.  (optional)
     * @param levelIdMask Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all. (optional)
     * @param office Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned. (optional)
     * @param unit Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters. (optional)
     * @param datum Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum. (optional)
     * @param begin Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. (optional)
     * @param end Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time (optional)
     * @param timezone Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used. (optional)
     * @param format Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version&#x3D;2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)   (optional)
     * @param page This identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param pageSize How many entries per page returned. Default 100. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getCwmsDataLevelsWithHttpInfo(String name, String levelIdMask, String office, String unit, String datum, String begin, String end, String timezone, String format, String page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCwmsDataLevelsValidateBeforeCall(name, levelIdMask, office, unit, datum, begin, end, timezone, format, page, pageSize, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cwmsData levels (asynchronously)
     * 
     * @param name Deprecated, use level-id-mask.  (optional)
     * @param levelIdMask Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all. (optional)
     * @param office Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned. (optional)
     * @param unit Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters. (optional)
     * @param datum Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum. (optional)
     * @param begin Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time. (optional)
     * @param end Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time (optional)
     * @param timezone Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used. (optional)
     * @param format Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version&#x3D;2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)   (optional)
     * @param page This identifies where in the request you are. This is an opaque value, and can be obtained from the &#39;next-page&#39; value in the response. (optional)
     * @param pageSize How many entries per page returned. Default 100. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLevelsAsync(String name, String levelIdMask, String office, String unit, String datum, String begin, String end, String timezone, String format, String page, Integer pageSize, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCwmsDataLevelsValidateBeforeCall(name, levelIdMask, office, unit, datum, begin, end, timezone, format, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCwmsDataLevelsWithLevelId
     * @param levelId Specifies the requested location level. (required)
     * @param office Specifies the office of the Location Level to be returned (required)
     * @param effectiveDate Specifies the effective date of Location Level to be returned (required)
     * @param date Deprecated, use effective-date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLevelsWithLevelIdCall(String levelId, String office, String effectiveDate, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cwms-data/levels/{level-id}"
            .replace("{" + "level-id" + "}", localVarApiClient.escapeString(levelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effective-date", effectiveDate));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/json;version=2"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCwmsDataLevelsWithLevelIdValidateBeforeCall(String levelId, String office, String effectiveDate, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling getCwmsDataLevelsWithLevelId(Async)");
        }

        // verify the required parameter 'office' is set
        if (office == null) {
            throw new ApiException("Missing the required parameter 'office' when calling getCwmsDataLevelsWithLevelId(Async)");
        }

        // verify the required parameter 'effectiveDate' is set
        if (effectiveDate == null) {
            throw new ApiException("Missing the required parameter 'effectiveDate' when calling getCwmsDataLevelsWithLevelId(Async)");
        }

        return getCwmsDataLevelsWithLevelIdCall(levelId, office, effectiveDate, date, _callback);

    }

    /**
     * Get cwmsData levels with levelId
     * Retrieves requested Location Level
     * @param levelId Specifies the requested location level. (required)
     * @param office Specifies the office of the Location Level to be returned (required)
     * @param effectiveDate Specifies the effective date of Location Level to be returned (required)
     * @param date Deprecated, use effective-date (optional)
     * @return LocationLevel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LocationLevel getCwmsDataLevelsWithLevelId(String levelId, String office, String effectiveDate, String date) throws ApiException {
        ApiResponse<LocationLevel> localVarResp = getCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, office, effectiveDate, date);
        return localVarResp.getData();
    }

    /**
     * Get cwmsData levels with levelId
     * Retrieves requested Location Level
     * @param levelId Specifies the requested location level. (required)
     * @param office Specifies the office of the Location Level to be returned (required)
     * @param effectiveDate Specifies the effective date of Location Level to be returned (required)
     * @param date Deprecated, use effective-date (optional)
     * @return ApiResponse&lt;LocationLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationLevel> getCwmsDataLevelsWithLevelIdWithHttpInfo(String levelId, String office, String effectiveDate, String date) throws ApiException {
        okhttp3.Call localVarCall = getCwmsDataLevelsWithLevelIdValidateBeforeCall(levelId, office, effectiveDate, date, null);
        Type localVarReturnType = new TypeToken<LocationLevel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get cwmsData levels with levelId (asynchronously)
     * Retrieves requested Location Level
     * @param levelId Specifies the requested location level. (required)
     * @param office Specifies the office of the Location Level to be returned (required)
     * @param effectiveDate Specifies the effective date of Location Level to be returned (required)
     * @param date Deprecated, use effective-date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCwmsDataLevelsWithLevelIdAsync(String levelId, String office, String effectiveDate, String date, final ApiCallback<LocationLevel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCwmsDataLevelsWithLevelIdValidateBeforeCall(levelId, office, effectiveDate, date, _callback);
        Type localVarReturnType = new TypeToken<LocationLevel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCwmsDataLevelsWithLevelId
     * @param levelId Specifies the location level id of the Location Level to be updated (required)
     * @param office Specifies the office in which Location Level will be updated (required)
     * @param effectiveDate Specifies the effective date of Location Level that will be updated (required)
     * @param locationLevel  (required)
     * @param date Deprecated, use effective-date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCwmsDataLevelsWithLevelIdCall(String levelId, String office, String effectiveDate, LocationLevel locationLevel, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationLevel;

        // create path and map variables
        String localVarPath = "/cwms-data/levels/{level-id}"
            .replace("{" + "level-id" + "}", localVarApiClient.escapeString(levelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effective-date", effectiveDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCwmsDataLevelsWithLevelIdValidateBeforeCall(String levelId, String office, String effectiveDate, LocationLevel locationLevel, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling patchCwmsDataLevelsWithLevelId(Async)");
        }

        // verify the required parameter 'office' is set
        if (office == null) {
            throw new ApiException("Missing the required parameter 'office' when calling patchCwmsDataLevelsWithLevelId(Async)");
        }

        // verify the required parameter 'effectiveDate' is set
        if (effectiveDate == null) {
            throw new ApiException("Missing the required parameter 'effectiveDate' when calling patchCwmsDataLevelsWithLevelId(Async)");
        }

        // verify the required parameter 'locationLevel' is set
        if (locationLevel == null) {
            throw new ApiException("Missing the required parameter 'locationLevel' when calling patchCwmsDataLevelsWithLevelId(Async)");
        }

        return patchCwmsDataLevelsWithLevelIdCall(levelId, office, effectiveDate, locationLevel, date, _callback);

    }

    /**
     * Patch cwmsData levels with levelId
     * Update CWMS Location Level
     * @param levelId Specifies the location level id of the Location Level to be updated (required)
     * @param office Specifies the office in which Location Level will be updated (required)
     * @param effectiveDate Specifies the effective date of Location Level that will be updated (required)
     * @param locationLevel  (required)
     * @param date Deprecated, use effective-date (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void patchCwmsDataLevelsWithLevelId(String levelId, String office, String effectiveDate, LocationLevel locationLevel, String date) throws ApiException {
        patchCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, office, effectiveDate, locationLevel, date);
    }

    /**
     * Patch cwmsData levels with levelId
     * Update CWMS Location Level
     * @param levelId Specifies the location level id of the Location Level to be updated (required)
     * @param office Specifies the office in which Location Level will be updated (required)
     * @param effectiveDate Specifies the effective date of Location Level that will be updated (required)
     * @param locationLevel  (required)
     * @param date Deprecated, use effective-date (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchCwmsDataLevelsWithLevelIdWithHttpInfo(String levelId, String office, String effectiveDate, LocationLevel locationLevel, String date) throws ApiException {
        okhttp3.Call localVarCall = patchCwmsDataLevelsWithLevelIdValidateBeforeCall(levelId, office, effectiveDate, locationLevel, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Patch cwmsData levels with levelId (asynchronously)
     * Update CWMS Location Level
     * @param levelId Specifies the location level id of the Location Level to be updated (required)
     * @param office Specifies the office in which Location Level will be updated (required)
     * @param effectiveDate Specifies the effective date of Location Level that will be updated (required)
     * @param locationLevel  (required)
     * @param date Deprecated, use effective-date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCwmsDataLevelsWithLevelIdAsync(String levelId, String office, String effectiveDate, LocationLevel locationLevel, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCwmsDataLevelsWithLevelIdValidateBeforeCall(levelId, office, effectiveDate, locationLevel, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCwmsDataLevels
     * @param office Specifies the office in which Location Level will be created (required)
     * @param locationLevel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCwmsDataLevelsCall(String office, LocationLevel locationLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationLevel;

        // create path and map variables
        String localVarPath = "/cwms-data/levels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (office != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("office", office));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCwmsDataLevelsValidateBeforeCall(String office, LocationLevel locationLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'office' is set
        if (office == null) {
            throw new ApiException("Missing the required parameter 'office' when calling postCwmsDataLevels(Async)");
        }

        // verify the required parameter 'locationLevel' is set
        if (locationLevel == null) {
            throw new ApiException("Missing the required parameter 'locationLevel' when calling postCwmsDataLevels(Async)");
        }

        return postCwmsDataLevelsCall(office, locationLevel, _callback);

    }

    /**
     * Post cwmsData levels
     * Create new CWMS Location Level
     * @param office Specifies the office in which Location Level will be created (required)
     * @param locationLevel  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void postCwmsDataLevels(String office, LocationLevel locationLevel) throws ApiException {
        postCwmsDataLevelsWithHttpInfo(office, locationLevel);
    }

    /**
     * Post cwmsData levels
     * Create new CWMS Location Level
     * @param office Specifies the office in which Location Level will be created (required)
     * @param locationLevel  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postCwmsDataLevelsWithHttpInfo(String office, LocationLevel locationLevel) throws ApiException {
        okhttp3.Call localVarCall = postCwmsDataLevelsValidateBeforeCall(office, locationLevel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Post cwmsData levels (asynchronously)
     * Create new CWMS Location Level
     * @param office Specifies the office in which Location Level will be created (required)
     * @param locationLevel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCwmsDataLevelsAsync(String office, LocationLevel locationLevel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCwmsDataLevelsValidateBeforeCall(office, locationLevel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
