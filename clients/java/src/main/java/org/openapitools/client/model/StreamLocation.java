/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class StreamLocation {
  public static final String SERIALIZED_NAME_LOCATION_NAME = "locationName";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_STREAM_NAME = "streamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_STATION = "station";
  @SerializedName(SERIALIZED_NAME_STATION)
  private Double station;

  public static final String SERIALIZED_NAME_BANK = "bank";
  @SerializedName(SERIALIZED_NAME_BANK)
  private String bank;

  public static final String SERIALIZED_NAME_OFFICE_ID = "officeId";
  @SerializedName(SERIALIZED_NAME_OFFICE_ID)
  private String officeId;

  public static final String SERIALIZED_NAME_PUBLISHED_STATION = "publishedStation";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_STATION)
  private Double publishedStation;

  public static final String SERIALIZED_NAME_LOWEST_MEASURABLE_STAGE = "lowestMeasurableStage";
  @SerializedName(SERIALIZED_NAME_LOWEST_MEASURABLE_STAGE)
  private Double lowestMeasurableStage;

  public static final String SERIALIZED_NAME_TOTAL_DRAINAGE_AREA = "totalDrainageArea";
  @SerializedName(SERIALIZED_NAME_TOTAL_DRAINAGE_AREA)
  private Double totalDrainageArea;

  public static final String SERIALIZED_NAME_UNGAGED_DRAINAGE_AREA = "ungagedDrainageArea";
  @SerializedName(SERIALIZED_NAME_UNGAGED_DRAINAGE_AREA)
  private Double ungagedDrainageArea;

  public static final String SERIALIZED_NAME_NAGIVATION_STATION = "nagivationStation";
  @SerializedName(SERIALIZED_NAME_NAGIVATION_STATION)
  private Double nagivationStation;

  public StreamLocation() {
  }

  public StreamLocation locationName(String locationName) {
    
    this.locationName = locationName;
    return this;
  }

   /**
   * Get locationName
   * @return locationName
  **/
  @javax.annotation.Nullable

  public String getLocationName() {
    return locationName;
  }


  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public StreamLocation streamName(String streamName) {
    
    this.streamName = streamName;
    return this;
  }

   /**
   * Get streamName
   * @return streamName
  **/
  @javax.annotation.Nullable

  public String getStreamName() {
    return streamName;
  }


  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public StreamLocation station(Double station) {
    
    this.station = station;
    return this;
  }

   /**
   * Get station
   * @return station
  **/
  @javax.annotation.Nullable

  public Double getStation() {
    return station;
  }


  public void setStation(Double station) {
    this.station = station;
  }


  public StreamLocation bank(String bank) {
    
    this.bank = bank;
    return this;
  }

   /**
   * Get bank
   * @return bank
  **/
  @javax.annotation.Nullable

  public String getBank() {
    return bank;
  }


  public void setBank(String bank) {
    this.bank = bank;
  }


  public StreamLocation officeId(String officeId) {
    
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @javax.annotation.Nullable

  public String getOfficeId() {
    return officeId;
  }


  public void setOfficeId(String officeId) {
    this.officeId = officeId;
  }


  public StreamLocation publishedStation(Double publishedStation) {
    
    this.publishedStation = publishedStation;
    return this;
  }

   /**
   * Get publishedStation
   * @return publishedStation
  **/
  @javax.annotation.Nullable

  public Double getPublishedStation() {
    return publishedStation;
  }


  public void setPublishedStation(Double publishedStation) {
    this.publishedStation = publishedStation;
  }


  public StreamLocation lowestMeasurableStage(Double lowestMeasurableStage) {
    
    this.lowestMeasurableStage = lowestMeasurableStage;
    return this;
  }

   /**
   * Get lowestMeasurableStage
   * @return lowestMeasurableStage
  **/
  @javax.annotation.Nullable

  public Double getLowestMeasurableStage() {
    return lowestMeasurableStage;
  }


  public void setLowestMeasurableStage(Double lowestMeasurableStage) {
    this.lowestMeasurableStage = lowestMeasurableStage;
  }


  public StreamLocation totalDrainageArea(Double totalDrainageArea) {
    
    this.totalDrainageArea = totalDrainageArea;
    return this;
  }

   /**
   * Get totalDrainageArea
   * @return totalDrainageArea
  **/
  @javax.annotation.Nullable

  public Double getTotalDrainageArea() {
    return totalDrainageArea;
  }


  public void setTotalDrainageArea(Double totalDrainageArea) {
    this.totalDrainageArea = totalDrainageArea;
  }


  public StreamLocation ungagedDrainageArea(Double ungagedDrainageArea) {
    
    this.ungagedDrainageArea = ungagedDrainageArea;
    return this;
  }

   /**
   * Get ungagedDrainageArea
   * @return ungagedDrainageArea
  **/
  @javax.annotation.Nullable

  public Double getUngagedDrainageArea() {
    return ungagedDrainageArea;
  }


  public void setUngagedDrainageArea(Double ungagedDrainageArea) {
    this.ungagedDrainageArea = ungagedDrainageArea;
  }


  public StreamLocation nagivationStation(Double nagivationStation) {
    
    this.nagivationStation = nagivationStation;
    return this;
  }

   /**
   * Get nagivationStation
   * @return nagivationStation
  **/
  @javax.annotation.Nullable

  public Double getNagivationStation() {
    return nagivationStation;
  }


  public void setNagivationStation(Double nagivationStation) {
    this.nagivationStation = nagivationStation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamLocation streamLocation = (StreamLocation) o;
    return Objects.equals(this.locationName, streamLocation.locationName) &&
        Objects.equals(this.streamName, streamLocation.streamName) &&
        Objects.equals(this.station, streamLocation.station) &&
        Objects.equals(this.bank, streamLocation.bank) &&
        Objects.equals(this.officeId, streamLocation.officeId) &&
        Objects.equals(this.publishedStation, streamLocation.publishedStation) &&
        Objects.equals(this.lowestMeasurableStage, streamLocation.lowestMeasurableStage) &&
        Objects.equals(this.totalDrainageArea, streamLocation.totalDrainageArea) &&
        Objects.equals(this.ungagedDrainageArea, streamLocation.ungagedDrainageArea) &&
        Objects.equals(this.nagivationStation, streamLocation.nagivationStation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationName, streamName, station, bank, officeId, publishedStation, lowestMeasurableStage, totalDrainageArea, ungagedDrainageArea, nagivationStation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamLocation {\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    station: ").append(toIndentedString(station)).append("\n");
    sb.append("    bank: ").append(toIndentedString(bank)).append("\n");
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    publishedStation: ").append(toIndentedString(publishedStation)).append("\n");
    sb.append("    lowestMeasurableStage: ").append(toIndentedString(lowestMeasurableStage)).append("\n");
    sb.append("    totalDrainageArea: ").append(toIndentedString(totalDrainageArea)).append("\n");
    sb.append("    ungagedDrainageArea: ").append(toIndentedString(ungagedDrainageArea)).append("\n");
    sb.append("    nagivationStation: ").append(toIndentedString(nagivationStation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationName");
    openapiFields.add("streamName");
    openapiFields.add("station");
    openapiFields.add("bank");
    openapiFields.add("officeId");
    openapiFields.add("publishedStation");
    openapiFields.add("lowestMeasurableStage");
    openapiFields.add("totalDrainageArea");
    openapiFields.add("ungagedDrainageArea");
    openapiFields.add("nagivationStation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StreamLocation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StreamLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamLocation is not found in the empty JSON string", StreamLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StreamLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamLocation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("locationName") != null && !jsonObj.get("locationName").isJsonNull()) && !jsonObj.get("locationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationName").toString()));
      }
      if ((jsonObj.get("streamName") != null && !jsonObj.get("streamName").isJsonNull()) && !jsonObj.get("streamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamName").toString()));
      }
      if ((jsonObj.get("bank") != null && !jsonObj.get("bank").isJsonNull()) && !jsonObj.get("bank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank").toString()));
      }
      if ((jsonObj.get("officeId") != null && !jsonObj.get("officeId").isJsonNull()) && !jsonObj.get("officeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `officeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("officeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamLocation>() {
           @Override
           public void write(JsonWriter out, StreamLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamLocation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StreamLocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StreamLocation
  * @throws IOException if the JSON string is invalid with respect to StreamLocation
  */
  public static StreamLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamLocation.class);
  }

 /**
  * Convert an instance of StreamLocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

