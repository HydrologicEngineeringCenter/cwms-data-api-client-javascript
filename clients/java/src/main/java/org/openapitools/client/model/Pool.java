/*
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.client.model.PoolNameType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of retrieved pools
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-12T11:57:07.491-05:00[America/Chicago]")
public class Pool {
  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private BigDecimal attribute;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CLOB_TEXT = "clobText";
  @SerializedName(SERIALIZED_NAME_CLOB_TEXT)
  private String clobText;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_BOTTOM_LEVEL_ID = "bottomLevelId";
  @SerializedName(SERIALIZED_NAME_BOTTOM_LEVEL_ID)
  private String bottomLevelId;

  public static final String SERIALIZED_NAME_TOP_LEVEL_ID = "topLevelId";
  @SerializedName(SERIALIZED_NAME_TOP_LEVEL_ID)
  private String topLevelId;

  public static final String SERIALIZED_NAME_POOL_NAME = "poolName";
  @SerializedName(SERIALIZED_NAME_POOL_NAME)
  private PoolNameType poolName;

  public static final String SERIALIZED_NAME_IMPLICIT = "implicit";
  @SerializedName(SERIALIZED_NAME_IMPLICIT)
  private Boolean implicit;

  public Pool() {
  }

  public Pool attribute(BigDecimal attribute) {
    
    this.attribute = attribute;
    return this;
  }

   /**
   * Get attribute
   * @return attribute
  **/
  @javax.annotation.Nullable

  public BigDecimal getAttribute() {
    return attribute;
  }


  public void setAttribute(BigDecimal attribute) {
    this.attribute = attribute;
  }


  public Pool description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Pool clobText(String clobText) {
    
    this.clobText = clobText;
    return this;
  }

   /**
   * Get clobText
   * @return clobText
  **/
  @javax.annotation.Nullable

  public String getClobText() {
    return clobText;
  }


  public void setClobText(String clobText) {
    this.clobText = clobText;
  }


  public Pool projectId(String projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nullable

  public String getProjectId() {
    return projectId;
  }


  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public Pool bottomLevelId(String bottomLevelId) {
    
    this.bottomLevelId = bottomLevelId;
    return this;
  }

   /**
   * Get bottomLevelId
   * @return bottomLevelId
  **/
  @javax.annotation.Nullable

  public String getBottomLevelId() {
    return bottomLevelId;
  }


  public void setBottomLevelId(String bottomLevelId) {
    this.bottomLevelId = bottomLevelId;
  }


  public Pool topLevelId(String topLevelId) {
    
    this.topLevelId = topLevelId;
    return this;
  }

   /**
   * Get topLevelId
   * @return topLevelId
  **/
  @javax.annotation.Nullable

  public String getTopLevelId() {
    return topLevelId;
  }


  public void setTopLevelId(String topLevelId) {
    this.topLevelId = topLevelId;
  }


  public Pool poolName(PoolNameType poolName) {
    
    this.poolName = poolName;
    return this;
  }

   /**
   * Get poolName
   * @return poolName
  **/
  @javax.annotation.Nullable

  public PoolNameType getPoolName() {
    return poolName;
  }


  public void setPoolName(PoolNameType poolName) {
    this.poolName = poolName;
  }


  public Pool implicit(Boolean implicit) {
    
    this.implicit = implicit;
    return this;
  }

   /**
   * Get implicit
   * @return implicit
  **/
  @javax.annotation.Nullable

  public Boolean getImplicit() {
    return implicit;
  }


  public void setImplicit(Boolean implicit) {
    this.implicit = implicit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pool pool = (Pool) o;
    return Objects.equals(this.attribute, pool.attribute) &&
        Objects.equals(this.description, pool.description) &&
        Objects.equals(this.clobText, pool.clobText) &&
        Objects.equals(this.projectId, pool.projectId) &&
        Objects.equals(this.bottomLevelId, pool.bottomLevelId) &&
        Objects.equals(this.topLevelId, pool.topLevelId) &&
        Objects.equals(this.poolName, pool.poolName) &&
        Objects.equals(this.implicit, pool.implicit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, description, clobText, projectId, bottomLevelId, topLevelId, poolName, implicit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pool {\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clobText: ").append(toIndentedString(clobText)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    bottomLevelId: ").append(toIndentedString(bottomLevelId)).append("\n");
    sb.append("    topLevelId: ").append(toIndentedString(topLevelId)).append("\n");
    sb.append("    poolName: ").append(toIndentedString(poolName)).append("\n");
    sb.append("    implicit: ").append(toIndentedString(implicit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute");
    openapiFields.add("description");
    openapiFields.add("clobText");
    openapiFields.add("projectId");
    openapiFields.add("bottomLevelId");
    openapiFields.add("topLevelId");
    openapiFields.add("poolName");
    openapiFields.add("implicit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Pool
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Pool.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pool is not found in the empty JSON string", Pool.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Pool.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pool` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("clobText") != null && !jsonObj.get("clobText").isJsonNull()) && !jsonObj.get("clobText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clobText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clobText").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      if ((jsonObj.get("bottomLevelId") != null && !jsonObj.get("bottomLevelId").isJsonNull()) && !jsonObj.get("bottomLevelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottomLevelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottomLevelId").toString()));
      }
      if ((jsonObj.get("topLevelId") != null && !jsonObj.get("topLevelId").isJsonNull()) && !jsonObj.get("topLevelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topLevelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topLevelId").toString()));
      }
      // validate the optional field `poolName`
      if (jsonObj.get("poolName") != null && !jsonObj.get("poolName").isJsonNull()) {
        PoolNameType.validateJsonObject(jsonObj.getAsJsonObject("poolName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pool.class));

       return (TypeAdapter<T>) new TypeAdapter<Pool>() {
           @Override
           public void write(JsonWriter out, Pool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pool read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Pool given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Pool
  * @throws IOException if the JSON string is invalid with respect to Pool
  */
  public static Pool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pool.class);
  }

 /**
  * Convert an instance of Pool to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

