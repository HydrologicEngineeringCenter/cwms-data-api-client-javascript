/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeSeriesColumn from './TimeSeriesColumn';
import TimeSeriesInterval from './TimeSeriesInterval';
import TimeSeriesValuesInnerInner from './TimeSeriesValuesInnerInner';
import VerticalDatumInfo from './VerticalDatumInfo';

/**
 * The TimeSeries model module.
 * @module model/TimeSeries
 * @version 3.0
 */
class TimeSeries {
    /**
     * Constructs a new <code>TimeSeries</code>.
     * @alias module:model/TimeSeries
     * @param units {String} The units of the time series data
     */
    constructor(units) { 
        
        TimeSeries.initialize(this, units);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, units) { 
        obj['units'] = units;
    }

    /**
     * Constructs a <code>TimeSeries</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeries} obj Optional instance to populate.
     * @return {module:model/TimeSeries} The populated <code>TimeSeries</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeries();

            if (data.hasOwnProperty('begin')) {
                obj['begin'] = ApiClient.convertToType(data['begin'], 'Date');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = TimeSeriesInterval.constructFromObject(data['interval']);
            }
            if (data.hasOwnProperty('interval-offset')) {
                obj['interval-offset'] = ApiClient.convertToType(data['interval-offset'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('next-page')) {
                obj['next-page'] = ApiClient.convertToType(data['next-page'], 'String');
            }
            if (data.hasOwnProperty('office-id')) {
                obj['office-id'] = ApiClient.convertToType(data['office-id'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'String');
            }
            if (data.hasOwnProperty('page-size')) {
                obj['page-size'] = ApiClient.convertToType(data['page-size'], 'Number');
            }
            if (data.hasOwnProperty('time-zone')) {
                obj['time-zone'] = ApiClient.convertToType(data['time-zone'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
            if (data.hasOwnProperty('value-columns')) {
                obj['value-columns'] = ApiClient.convertToType(data['value-columns'], [TimeSeriesColumn]);
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [[TimeSeriesValuesInnerInner]]);
            }
            if (data.hasOwnProperty('vertical-datum-info')) {
                obj['vertical-datum-info'] = VerticalDatumInfo.constructFromObject(data['vertical-datum-info']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeries</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeries</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeSeries.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `interval`
        if (data['interval']) { // data not null
          TimeSeriesInterval.validateJSON(data['interval']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['next-page'] && !(typeof data['next-page'] === 'string' || data['next-page'] instanceof String)) {
            throw new Error("Expected the field `next-page` to be a primitive type in the JSON string but got " + data['next-page']);
        }
        // ensure the json data is a string
        if (data['office-id'] && !(typeof data['office-id'] === 'string' || data['office-id'] instanceof String)) {
            throw new Error("Expected the field `office-id` to be a primitive type in the JSON string but got " + data['office-id']);
        }
        // ensure the json data is a string
        if (data['page'] && !(typeof data['page'] === 'string' || data['page'] instanceof String)) {
            throw new Error("Expected the field `page` to be a primitive type in the JSON string but got " + data['page']);
        }
        // ensure the json data is a string
        if (data['time-zone'] && !(typeof data['time-zone'] === 'string' || data['time-zone'] instanceof String)) {
            throw new Error("Expected the field `time-zone` to be a primitive type in the JSON string but got " + data['time-zone']);
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }
        if (data['value-columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['value-columns'])) {
                throw new Error("Expected the field `value-columns` to be an array in the JSON data but got " + data['value-columns']);
            }
            // validate the optional field `value-columns` (array)
            for (const item of data['value-columns']) {
                TimeSeriesColumn.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }
        // validate the optional field `vertical-datum-info`
        if (data['vertical-datum-info']) { // data not null
          VerticalDatumInfo.validateJSON(data['vertical-datum-info']);
        }

        return true;
    }


}

TimeSeries.RequiredProperties = ["units"];

/**
 * The requested start time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
 * @member {Date} begin
 */
TimeSeries.prototype['begin'] = undefined;

/**
 * The requested end time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
 * @member {Date} end
 */
TimeSeries.prototype['end'] = undefined;

/**
 * @member {module:model/TimeSeriesInterval} interval
 */
TimeSeries.prototype['interval'] = undefined;

/**
 * Offset from top of interval
 * @member {Number} interval-offset
 */
TimeSeries.prototype['interval-offset'] = undefined;

/**
 * Time-series name
 * @member {String} name
 */
TimeSeries.prototype['name'] = undefined;

/**
 * The cursor to the next page of data; null if there is no more data
 * @member {String} next-page
 */
TimeSeries.prototype['next-page'] = undefined;

/**
 * Office ID that owns the time-series
 * @member {String} office-id
 */
TimeSeries.prototype['office-id'] = undefined;

/**
 * The cursor to the current page of data
 * @member {String} page
 */
TimeSeries.prototype['page'] = undefined;

/**
 * The number of records fetched per-page; this may be larger than the number of records actually retrieved
 * @member {Number} page-size
 */
TimeSeries.prototype['page-size'] = undefined;

/**
 * Only on 21.1.1 Database. The timezone the Interval Offset is from.
 * @member {String} time-zone
 */
TimeSeries.prototype['time-zone'] = undefined;

/**
 * The total number of records retrieved; null or not present if not supported or unknown
 * @member {Number} total
 */
TimeSeries.prototype['total'] = undefined;

/**
 * The units of the time series data
 * @member {String} units
 */
TimeSeries.prototype['units'] = undefined;

/**
 * @member {Array.<module:model/TimeSeriesColumn>} value-columns
 */
TimeSeries.prototype['value-columns'] = undefined;

/**
 * @member {Array.<Array.<module:model/TimeSeriesValuesInnerInner>>} values
 */
TimeSeries.prototype['values'] = undefined;

/**
 * @member {module:model/VerticalDatumInfo} vertical-datum-info
 */
TimeSeries.prototype['vertical-datum-info'] = undefined;






export default TimeSeries;

