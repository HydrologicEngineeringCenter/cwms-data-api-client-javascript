/**
 * CWMS_JS
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocationAlias from './LocationAlias';
import LocationCatalogEntry from './LocationCatalogEntry';
import TimeSeriesExtents from './TimeSeriesExtents';
import TimeseriesCatalogEntry from './TimeseriesCatalogEntry';

/**
 * The CatalogEntry model module.
 * @module model/CatalogEntry
 * @version 3.0
 */
class CatalogEntry {
    /**
     * Constructs a new <code>CatalogEntry</code>.
     * @alias module:model/CatalogEntry
     * @param {(module:model/LocationCatalogEntry|module:model/TimeseriesCatalogEntry)} instance The actual instance to initialize CatalogEntry.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "LocationCatalogEntry") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                LocationCatalogEntry.validateJSON(instance); // throw an exception if no match
                // create LocationCatalogEntry from JS object
                this.actualInstance = LocationCatalogEntry.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into LocationCatalogEntry
            errorMessages.push("Failed to construct LocationCatalogEntry: " + err)
        }

        try {
            if (typeof instance === "TimeseriesCatalogEntry") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TimeseriesCatalogEntry.validateJSON(instance); // throw an exception if no match
                // create TimeseriesCatalogEntry from JS object
                this.actualInstance = TimeseriesCatalogEntry.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TimeseriesCatalogEntry
            errorMessages.push("Failed to construct TimeseriesCatalogEntry: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CatalogEntry` with oneOf schemas LocationCatalogEntry, TimeseriesCatalogEntry. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CatalogEntry` with oneOf schemas LocationCatalogEntry, TimeseriesCatalogEntry. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CatalogEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogEntry} obj Optional instance to populate.
     * @return {module:model/CatalogEntry} The populated <code>CatalogEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CatalogEntry(data);
    }

    /**
     * Gets the actual instance, which can be <code>LocationCatalogEntry</code>, <code>TimeseriesCatalogEntry</code>.
     * @return {(module:model/LocationCatalogEntry|module:model/TimeseriesCatalogEntry)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>LocationCatalogEntry</code>, <code>TimeseriesCatalogEntry</code>.
     * @param {(module:model/LocationCatalogEntry|module:model/TimeseriesCatalogEntry)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CatalogEntry.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CatalogEntry from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CatalogEntry} An instance of CatalogEntry.
     */
    static fromJSON = function(json_string){
        return CatalogEntry.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} office
 */
CatalogEntry.prototype['office'] = undefined;

/**
 * @member {String} name
 */
CatalogEntry.prototype['name'] = undefined;

/**
 * @member {String} nearestCity
 */
CatalogEntry.prototype['nearestCity'] = undefined;

/**
 * @member {String} publicName
 */
CatalogEntry.prototype['publicName'] = undefined;

/**
 * @member {String} longName
 */
CatalogEntry.prototype['longName'] = undefined;

/**
 * @member {String} description
 */
CatalogEntry.prototype['description'] = undefined;

/**
 * @member {String} kind
 */
CatalogEntry.prototype['kind'] = undefined;

/**
 * @member {String} type
 */
CatalogEntry.prototype['type'] = undefined;

/**
 * Only on 21.1.1 Database. The timezone the Interval Offset is from.
 * @member {String} timeZone
 */
CatalogEntry.prototype['timeZone'] = undefined;

/**
 * @member {Number} latitude
 */
CatalogEntry.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
CatalogEntry.prototype['longitude'] = undefined;

/**
 * @member {Number} publishedLatitude
 */
CatalogEntry.prototype['publishedLatitude'] = undefined;

/**
 * @member {Number} publishedLongitude
 */
CatalogEntry.prototype['publishedLongitude'] = undefined;

/**
 * @member {String} horizontalDatum
 */
CatalogEntry.prototype['horizontalDatum'] = undefined;

/**
 * @member {Number} elevation
 */
CatalogEntry.prototype['elevation'] = undefined;

/**
 * @member {String} unit
 */
CatalogEntry.prototype['unit'] = undefined;

/**
 * @member {String} verticalDatum
 */
CatalogEntry.prototype['verticalDatum'] = undefined;

/**
 * @member {String} nation
 */
CatalogEntry.prototype['nation'] = undefined;

/**
 * @member {String} state
 */
CatalogEntry.prototype['state'] = undefined;

/**
 * @member {String} county
 */
CatalogEntry.prototype['county'] = undefined;

/**
 * @member {String} boundingOffice
 */
CatalogEntry.prototype['boundingOffice'] = undefined;

/**
 * @member {String} mapLabel
 */
CatalogEntry.prototype['mapLabel'] = undefined;

/**
 * @member {Boolean} active
 */
CatalogEntry.prototype['active'] = undefined;

/**
 * @member {Array.<module:model/LocationAlias>} aliases
 */
CatalogEntry.prototype['aliases'] = undefined;

/**
 * @member {String} units
 */
CatalogEntry.prototype['units'] = undefined;

/**
 * @member {String} interval
 */
CatalogEntry.prototype['interval'] = undefined;

/**
 * Offset from top of interval
 * @member {Number} intervalOffset
 */
CatalogEntry.prototype['intervalOffset'] = undefined;

/**
 * @member {Array.<module:model/TimeSeriesExtents>} extents
 */
CatalogEntry.prototype['extents'] = undefined;


CatalogEntry.OneOf = ["LocationCatalogEntry", "TimeseriesCatalogEntry"];

export default CatalogEntry;

