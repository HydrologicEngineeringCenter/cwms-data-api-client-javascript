/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocationAlias from './LocationAlias';

/**
 * The LocationCatalogEntry model module.
 * @module model/LocationCatalogEntry
 * @version 3.0
 */
class LocationCatalogEntry {
    /**
     * Constructs a new <code>LocationCatalogEntry</code>.
     * @alias module:model/LocationCatalogEntry
     */
    constructor() { 
        
        LocationCatalogEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationCatalogEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationCatalogEntry} obj Optional instance to populate.
     * @return {module:model/LocationCatalogEntry} The populated <code>LocationCatalogEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationCatalogEntry();

            if (data.hasOwnProperty('office')) {
                obj['office'] = ApiClient.convertToType(data['office'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nearestCity')) {
                obj['nearestCity'] = ApiClient.convertToType(data['nearestCity'], 'String');
            }
            if (data.hasOwnProperty('publicName')) {
                obj['publicName'] = ApiClient.convertToType(data['publicName'], 'String');
            }
            if (data.hasOwnProperty('longName')) {
                obj['longName'] = ApiClient.convertToType(data['longName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('publishedLatitude')) {
                obj['publishedLatitude'] = ApiClient.convertToType(data['publishedLatitude'], 'Number');
            }
            if (data.hasOwnProperty('publishedLongitude')) {
                obj['publishedLongitude'] = ApiClient.convertToType(data['publishedLongitude'], 'Number');
            }
            if (data.hasOwnProperty('horizontalDatum')) {
                obj['horizontalDatum'] = ApiClient.convertToType(data['horizontalDatum'], 'String');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('verticalDatum')) {
                obj['verticalDatum'] = ApiClient.convertToType(data['verticalDatum'], 'String');
            }
            if (data.hasOwnProperty('nation')) {
                obj['nation'] = ApiClient.convertToType(data['nation'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('county')) {
                obj['county'] = ApiClient.convertToType(data['county'], 'String');
            }
            if (data.hasOwnProperty('boundingOffice')) {
                obj['boundingOffice'] = ApiClient.convertToType(data['boundingOffice'], 'String');
            }
            if (data.hasOwnProperty('mapLabel')) {
                obj['mapLabel'] = ApiClient.convertToType(data['mapLabel'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], [LocationAlias]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationCatalogEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationCatalogEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['office'] && !(typeof data['office'] === 'string' || data['office'] instanceof String)) {
            throw new Error("Expected the field `office` to be a primitive type in the JSON string but got " + data['office']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nearestCity'] && !(typeof data['nearestCity'] === 'string' || data['nearestCity'] instanceof String)) {
            throw new Error("Expected the field `nearestCity` to be a primitive type in the JSON string but got " + data['nearestCity']);
        }
        // ensure the json data is a string
        if (data['publicName'] && !(typeof data['publicName'] === 'string' || data['publicName'] instanceof String)) {
            throw new Error("Expected the field `publicName` to be a primitive type in the JSON string but got " + data['publicName']);
        }
        // ensure the json data is a string
        if (data['longName'] && !(typeof data['longName'] === 'string' || data['longName'] instanceof String)) {
            throw new Error("Expected the field `longName` to be a primitive type in the JSON string but got " + data['longName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['horizontalDatum'] && !(typeof data['horizontalDatum'] === 'string' || data['horizontalDatum'] instanceof String)) {
            throw new Error("Expected the field `horizontalDatum` to be a primitive type in the JSON string but got " + data['horizontalDatum']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        // ensure the json data is a string
        if (data['verticalDatum'] && !(typeof data['verticalDatum'] === 'string' || data['verticalDatum'] instanceof String)) {
            throw new Error("Expected the field `verticalDatum` to be a primitive type in the JSON string but got " + data['verticalDatum']);
        }
        // ensure the json data is a string
        if (data['nation'] && !(typeof data['nation'] === 'string' || data['nation'] instanceof String)) {
            throw new Error("Expected the field `nation` to be a primitive type in the JSON string but got " + data['nation']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['county'] && !(typeof data['county'] === 'string' || data['county'] instanceof String)) {
            throw new Error("Expected the field `county` to be a primitive type in the JSON string but got " + data['county']);
        }
        // ensure the json data is a string
        if (data['boundingOffice'] && !(typeof data['boundingOffice'] === 'string' || data['boundingOffice'] instanceof String)) {
            throw new Error("Expected the field `boundingOffice` to be a primitive type in the JSON string but got " + data['boundingOffice']);
        }
        // ensure the json data is a string
        if (data['mapLabel'] && !(typeof data['mapLabel'] === 'string' || data['mapLabel'] instanceof String)) {
            throw new Error("Expected the field `mapLabel` to be a primitive type in the JSON string but got " + data['mapLabel']);
        }
        if (data['aliases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aliases'])) {
                throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
            }
            // validate the optional field `aliases` (array)
            for (const item of data['aliases']) {
                LocationAlias.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} office
 */
LocationCatalogEntry.prototype['office'] = undefined;

/**
 * @member {String} name
 */
LocationCatalogEntry.prototype['name'] = undefined;

/**
 * @member {String} nearestCity
 */
LocationCatalogEntry.prototype['nearestCity'] = undefined;

/**
 * @member {String} publicName
 */
LocationCatalogEntry.prototype['publicName'] = undefined;

/**
 * @member {String} longName
 */
LocationCatalogEntry.prototype['longName'] = undefined;

/**
 * @member {String} description
 */
LocationCatalogEntry.prototype['description'] = undefined;

/**
 * @member {String} kind
 */
LocationCatalogEntry.prototype['kind'] = undefined;

/**
 * @member {String} type
 */
LocationCatalogEntry.prototype['type'] = undefined;

/**
 * @member {String} timeZone
 */
LocationCatalogEntry.prototype['timeZone'] = undefined;

/**
 * @member {Number} latitude
 */
LocationCatalogEntry.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
LocationCatalogEntry.prototype['longitude'] = undefined;

/**
 * @member {Number} publishedLatitude
 */
LocationCatalogEntry.prototype['publishedLatitude'] = undefined;

/**
 * @member {Number} publishedLongitude
 */
LocationCatalogEntry.prototype['publishedLongitude'] = undefined;

/**
 * @member {String} horizontalDatum
 */
LocationCatalogEntry.prototype['horizontalDatum'] = undefined;

/**
 * @member {Number} elevation
 */
LocationCatalogEntry.prototype['elevation'] = undefined;

/**
 * @member {String} unit
 */
LocationCatalogEntry.prototype['unit'] = undefined;

/**
 * @member {String} verticalDatum
 */
LocationCatalogEntry.prototype['verticalDatum'] = undefined;

/**
 * @member {String} nation
 */
LocationCatalogEntry.prototype['nation'] = undefined;

/**
 * @member {String} state
 */
LocationCatalogEntry.prototype['state'] = undefined;

/**
 * @member {String} county
 */
LocationCatalogEntry.prototype['county'] = undefined;

/**
 * @member {String} boundingOffice
 */
LocationCatalogEntry.prototype['boundingOffice'] = undefined;

/**
 * @member {String} mapLabel
 */
LocationCatalogEntry.prototype['mapLabel'] = undefined;

/**
 * @member {Boolean} active
 */
LocationCatalogEntry.prototype['active'] = undefined;

/**
 * @member {Array.<module:model/LocationAlias>} aliases
 */
LocationCatalogEntry.prototype['aliases'] = undefined;






export default LocationCatalogEntry;

