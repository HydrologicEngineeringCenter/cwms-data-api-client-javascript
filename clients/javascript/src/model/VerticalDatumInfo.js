/**
 * CWMS_JS
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Offset from './Offset';

/**
 * The VerticalDatumInfo model module.
 * @module model/VerticalDatumInfo
 * @version 3.0
 */
class VerticalDatumInfo {
    /**
     * Constructs a new <code>VerticalDatumInfo</code>.
     * @alias module:model/VerticalDatumInfo
     */
    constructor() { 
        
        VerticalDatumInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VerticalDatumInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerticalDatumInfo} obj Optional instance to populate.
     * @return {module:model/VerticalDatumInfo} The populated <code>VerticalDatumInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerticalDatumInfo();

            if (data.hasOwnProperty('office')) {
                obj['office'] = ApiClient.convertToType(data['office'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('native-datum')) {
                obj['native-datum'] = ApiClient.convertToType(data['native-datum'], 'String');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('offsets')) {
                obj['offsets'] = ApiClient.convertToType(data['offsets'], [Offset]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerticalDatumInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerticalDatumInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['office'] && !(typeof data['office'] === 'string' || data['office'] instanceof String)) {
            throw new Error("Expected the field `office` to be a primitive type in the JSON string but got " + data['office']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['native-datum'] && !(typeof data['native-datum'] === 'string' || data['native-datum'] instanceof String)) {
            throw new Error("Expected the field `native-datum` to be a primitive type in the JSON string but got " + data['native-datum']);
        }
        if (data['offsets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offsets'])) {
                throw new Error("Expected the field `offsets` to be an array in the JSON data but got " + data['offsets']);
            }
            // validate the optional field `offsets` (array)
            for (const item of data['offsets']) {
                Offset.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} office
 */
VerticalDatumInfo.prototype['office'] = undefined;

/**
 * @member {String} unit
 */
VerticalDatumInfo.prototype['unit'] = undefined;

/**
 * @member {String} location
 */
VerticalDatumInfo.prototype['location'] = undefined;

/**
 * @member {String} native-datum
 */
VerticalDatumInfo.prototype['native-datum'] = undefined;

/**
 * @member {Number} elevation
 */
VerticalDatumInfo.prototype['elevation'] = undefined;

/**
 * @member {Array.<module:model/Offset>} offsets
 */
VerticalDatumInfo.prototype['offsets'] = undefined;






export default VerticalDatumInfo;

