/**
 * CWMS_JS
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Offset model module.
 * @module model/Offset
 * @version 3.0
 */
class Offset {
    /**
     * Constructs a new <code>Offset</code>.
     * @alias module:model/Offset
     */
    constructor() { 
        
        Offset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Offset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Offset} obj Optional instance to populate.
     * @return {module:model/Offset} The populated <code>Offset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Offset();

            if (data.hasOwnProperty('estimate')) {
                obj['estimate'] = ApiClient.convertToType(data['estimate'], 'Boolean');
            }
            if (data.hasOwnProperty('toDatum')) {
                obj['toDatum'] = ApiClient.convertToType(data['toDatum'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Offset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Offset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['toDatum'] && !(typeof data['toDatum'] === 'string' || data['toDatum'] instanceof String)) {
            throw new Error("Expected the field `toDatum` to be a primitive type in the JSON string but got " + data['toDatum']);
        }

        return true;
    }


}



/**
 * @member {Boolean} estimate
 */
Offset.prototype['estimate'] = undefined;

/**
 * @member {String} toDatum
 */
Offset.prototype['toDatum'] = undefined;

/**
 * @member {Number} value
 */
Offset.prototype['value'] = undefined;






export default Offset;

