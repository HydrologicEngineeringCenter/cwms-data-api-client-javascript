/**
 * CWMS_JS
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PoolNameType from './PoolNameType';

/**
 * The Pool model module.
 * @module model/Pool
 * @version 3.0
 */
class Pool {
    /**
     * Constructs a new <code>Pool</code>.
     * List of retrieved pools
     * @alias module:model/Pool
     */
    constructor() { 
        
        Pool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Pool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pool} obj Optional instance to populate.
     * @return {module:model/Pool} The populated <code>Pool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pool();

            if (data.hasOwnProperty('attribute')) {
                obj['attribute'] = ApiClient.convertToType(data['attribute'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('clobText')) {
                obj['clobText'] = ApiClient.convertToType(data['clobText'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('topLevelId')) {
                obj['topLevelId'] = ApiClient.convertToType(data['topLevelId'], 'String');
            }
            if (data.hasOwnProperty('bottomLevelId')) {
                obj['bottomLevelId'] = ApiClient.convertToType(data['bottomLevelId'], 'String');
            }
            if (data.hasOwnProperty('poolName')) {
                obj['poolName'] = PoolNameType.constructFromObject(data['poolName']);
            }
            if (data.hasOwnProperty('implicit')) {
                obj['implicit'] = ApiClient.convertToType(data['implicit'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pool</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['clobText'] && !(typeof data['clobText'] === 'string' || data['clobText'] instanceof String)) {
            throw new Error("Expected the field `clobText` to be a primitive type in the JSON string but got " + data['clobText']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['topLevelId'] && !(typeof data['topLevelId'] === 'string' || data['topLevelId'] instanceof String)) {
            throw new Error("Expected the field `topLevelId` to be a primitive type in the JSON string but got " + data['topLevelId']);
        }
        // ensure the json data is a string
        if (data['bottomLevelId'] && !(typeof data['bottomLevelId'] === 'string' || data['bottomLevelId'] instanceof String)) {
            throw new Error("Expected the field `bottomLevelId` to be a primitive type in the JSON string but got " + data['bottomLevelId']);
        }
        // validate the optional field `poolName`
        if (data['poolName']) { // data not null
          PoolNameType.validateJSON(data['poolName']);
        }

        return true;
    }


}



/**
 * @member {Number} attribute
 */
Pool.prototype['attribute'] = undefined;

/**
 * @member {String} description
 */
Pool.prototype['description'] = undefined;

/**
 * @member {String} clobText
 */
Pool.prototype['clobText'] = undefined;

/**
 * @member {String} projectId
 */
Pool.prototype['projectId'] = undefined;

/**
 * @member {String} topLevelId
 */
Pool.prototype['topLevelId'] = undefined;

/**
 * @member {String} bottomLevelId
 */
Pool.prototype['bottomLevelId'] = undefined;

/**
 * @member {module:model/PoolNameType} poolName
 */
Pool.prototype['poolName'] = undefined;

/**
 * @member {Boolean} implicit
 */
Pool.prototype['implicit'] = undefined;






export default Pool;

