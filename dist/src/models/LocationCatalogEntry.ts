/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LocationAlias } from './LocationAlias';
import {
    LocationAliasFromJSON,
    LocationAliasFromJSONTyped,
    LocationAliasToJSON,
} from './LocationAlias';

/**
 * 
 * @export
 * @interface LocationCatalogEntry
 */
export interface LocationCatalogEntry {
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    office?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    nearestCity?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    publicName?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    longName?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    kind?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    timeZone?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationCatalogEntry
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationCatalogEntry
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationCatalogEntry
     */
    publishedLatitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationCatalogEntry
     */
    publishedLongitude?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    horizontalDatum?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationCatalogEntry
     */
    elevation?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    verticalDatum?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    nation?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    boundingOffice?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationCatalogEntry
     */
    mapLabel?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LocationCatalogEntry
     */
    active?: boolean;
    /**
     * 
     * @type {Array<LocationAlias>}
     * @memberof LocationCatalogEntry
     */
    aliases?: Array<LocationAlias>;
}

/**
 * Check if a given object implements the LocationCatalogEntry interface.
 */
export function instanceOfLocationCatalogEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationCatalogEntryFromJSON(json: any): LocationCatalogEntry {
    return LocationCatalogEntryFromJSONTyped(json, false);
}

export function LocationCatalogEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationCatalogEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'office': !exists(json, 'office') ? undefined : json['office'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nearestCity': !exists(json, 'nearestCity') ? undefined : json['nearestCity'],
        'publicName': !exists(json, 'publicName') ? undefined : json['publicName'],
        'longName': !exists(json, 'longName') ? undefined : json['longName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'publishedLatitude': !exists(json, 'publishedLatitude') ? undefined : json['publishedLatitude'],
        'publishedLongitude': !exists(json, 'publishedLongitude') ? undefined : json['publishedLongitude'],
        'horizontalDatum': !exists(json, 'horizontalDatum') ? undefined : json['horizontalDatum'],
        'elevation': !exists(json, 'elevation') ? undefined : json['elevation'],
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
        'verticalDatum': !exists(json, 'verticalDatum') ? undefined : json['verticalDatum'],
        'nation': !exists(json, 'nation') ? undefined : json['nation'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'county': !exists(json, 'county') ? undefined : json['county'],
        'boundingOffice': !exists(json, 'boundingOffice') ? undefined : json['boundingOffice'],
        'mapLabel': !exists(json, 'mapLabel') ? undefined : json['mapLabel'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'aliases': !exists(json, 'aliases') ? undefined : ((json['aliases'] as Array<any>).map(LocationAliasFromJSON)),
    };
}

export function LocationCatalogEntryToJSON(value?: LocationCatalogEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'office': value.office,
        'name': value.name,
        'nearestCity': value.nearestCity,
        'publicName': value.publicName,
        'longName': value.longName,
        'description': value.description,
        'kind': value.kind,
        'type': value.type,
        'timeZone': value.timeZone,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'publishedLatitude': value.publishedLatitude,
        'publishedLongitude': value.publishedLongitude,
        'horizontalDatum': value.horizontalDatum,
        'elevation': value.elevation,
        'unit': value.unit,
        'verticalDatum': value.verticalDatum,
        'nation': value.nation,
        'state': value.state,
        'county': value.county,
        'boundingOffice': value.boundingOffice,
        'mapLabel': value.mapLabel,
        'active': value.active,
        'aliases': value.aliases === undefined ? undefined : ((value.aliases as Array<any>).map(LocationAliasToJSON)),
    };
}

