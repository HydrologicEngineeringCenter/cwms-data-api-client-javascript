/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { StreamLocation } from './StreamLocation';
import {
    StreamLocationFromJSON,
    StreamLocationFromJSONTyped,
    StreamLocationToJSON,
} from './StreamLocation';
import type { StreamReach } from './StreamReach';
import {
    StreamReachFromJSON,
    StreamReachFromJSONTyped,
    StreamReachToJSON,
} from './StreamReach';

/**
 * 
 * @export
 * @interface Stream
 */
export interface Stream {
    /**
     * Owning office of object.
     * @type {string}
     * @memberof Stream
     */
    officeId: string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    streamName?: string;
    /**
     * 
     * @type {Array<Stream>}
     * @memberof Stream
     */
    tributaries?: Array<Stream>;
    /**
     * 
     * @type {Array<StreamReach>}
     * @memberof Stream
     */
    streamReaches?: Array<StreamReach>;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    divertingStreamId?: string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    receivingStreamId?: string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    confluenceBank?: string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    diversionBank?: string;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    streamLength?: number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    confluenceStation?: number;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    diversionStation?: number;
    /**
     * 
     * @type {Array<StreamLocation>}
     * @memberof Stream
     */
    streamLocations?: Array<StreamLocation>;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    comment?: string;
    /**
     * 
     * @type {number}
     * @memberof Stream
     */
    averageSlope?: number;
}

/**
 * Check if a given object implements the Stream interface.
 */
export function instanceOfStream(value: object): boolean {
    if (!('officeId' in value)) return false;
    return true;
}

export function StreamFromJSON(json: any): Stream {
    return StreamFromJSONTyped(json, false);
}

export function StreamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Stream {
    if (json == null) {
        return json;
    }
    return {
        
        'officeId': json['office-id'],
        'streamName': json['stream-name'] == null ? undefined : json['stream-name'],
        'tributaries': json['tributaries'] == null ? undefined : ((json['tributaries'] as Array<any>).map(StreamFromJSON)),
        'streamReaches': json['stream-reaches'] == null ? undefined : ((json['stream-reaches'] as Array<any>).map(StreamReachFromJSON)),
        'divertingStreamId': json['diverting-stream-id'] == null ? undefined : json['diverting-stream-id'],
        'receivingStreamId': json['receiving-stream-id'] == null ? undefined : json['receiving-stream-id'],
        'confluenceBank': json['confluence-bank'] == null ? undefined : json['confluence-bank'],
        'diversionBank': json['diversion-bank'] == null ? undefined : json['diversion-bank'],
        'streamLength': json['stream-length'] == null ? undefined : json['stream-length'],
        'confluenceStation': json['confluence-station'] == null ? undefined : json['confluence-station'],
        'diversionStation': json['diversion-station'] == null ? undefined : json['diversion-station'],
        'streamLocations': json['stream-locations'] == null ? undefined : ((json['stream-locations'] as Array<any>).map(StreamLocationFromJSON)),
        'comment': json['comment'] == null ? undefined : json['comment'],
        'averageSlope': json['average-slope'] == null ? undefined : json['average-slope'],
    };
}

export function StreamToJSON(value?: Stream | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'office-id': value['officeId'],
        'stream-name': value['streamName'],
        'tributaries': value['tributaries'] == null ? undefined : ((value['tributaries'] as Array<any>).map(StreamToJSON)),
        'stream-reaches': value['streamReaches'] == null ? undefined : ((value['streamReaches'] as Array<any>).map(StreamReachToJSON)),
        'diverting-stream-id': value['divertingStreamId'],
        'receiving-stream-id': value['receivingStreamId'],
        'confluence-bank': value['confluenceBank'],
        'diversion-bank': value['diversionBank'],
        'stream-length': value['streamLength'],
        'confluence-station': value['confluenceStation'],
        'diversion-station': value['diversionStation'],
        'stream-locations': value['streamLocations'] == null ? undefined : ((value['streamLocations'] as Array<any>).map(StreamLocationToJSON)),
        'comment': value['comment'],
        'average-slope': value['averageSlope'],
    };
}

