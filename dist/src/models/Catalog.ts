/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogEntry } from './CatalogEntry';
import {
    CatalogEntryFromJSON,
    CatalogEntryFromJSONTyped,
    CatalogEntryToJSON,
} from './CatalogEntry';

/**
 * 
 * @export
 * @interface Catalog
 */
export interface Catalog {
    /**
     * The cursor to the current page of data
     * @type {string}
     * @memberof Catalog
     */
    readonly page?: string;
    /**
     * The total number of records retrieved; null or not present if not supported or unknown
     * @type {number}
     * @memberof Catalog
     */
    readonly total?: number;
    /**
     * 
     * @type {Array<CatalogEntry>}
     * @memberof Catalog
     */
    entries?: Array<CatalogEntry>;
    /**
     * The cursor to the next page of data; null if there is no more data
     * @type {string}
     * @memberof Catalog
     */
    readonly nextPage?: string;
    /**
     * The number of records fetched per-page; this may be larger than the number of records actually retrieved
     * @type {number}
     * @memberof Catalog
     */
    readonly pageSize?: number;
}

/**
 * Check if a given object implements the Catalog interface.
 */
export function instanceOfCatalog(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CatalogFromJSON(json: any): Catalog {
    return CatalogFromJSONTyped(json, false);
}

export function CatalogFromJSONTyped(json: any, ignoreDiscriminator: boolean): Catalog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'page': !exists(json, 'page') ? undefined : json['page'],
        'total': !exists(json, 'total') ? undefined : json['total'],
        'entries': !exists(json, 'entries') ? undefined : ((json['entries'] as Array<any>).map(CatalogEntryFromJSON)),
        'nextPage': !exists(json, 'next-page') ? undefined : json['next-page'],
        'pageSize': !exists(json, 'page-size') ? undefined : json['page-size'],
    };
}

export function CatalogToJSON(value?: Catalog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entries': value.entries === undefined ? undefined : ((value.entries as Array<any>).map(CatalogEntryToJSON)),
    };
}

