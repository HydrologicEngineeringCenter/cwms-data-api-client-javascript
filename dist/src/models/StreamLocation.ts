/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StreamLocation
 */
export interface StreamLocation {
    /**
     * Owning office of object.
     * @type {string}
     * @memberof StreamLocation
     */
    officeId: string;
    /**
     * 
     * @type {string}
     * @memberof StreamLocation
     */
    locationName?: string;
    /**
     * 
     * @type {string}
     * @memberof StreamLocation
     */
    streamName?: string;
    /**
     * 
     * @type {number}
     * @memberof StreamLocation
     */
    station?: number;
    /**
     * 
     * @type {string}
     * @memberof StreamLocation
     */
    bank?: string;
    /**
     * 
     * @type {number}
     * @memberof StreamLocation
     */
    publishedStation?: number;
    /**
     * 
     * @type {number}
     * @memberof StreamLocation
     */
    lowestMeasurableStage?: number;
    /**
     * 
     * @type {number}
     * @memberof StreamLocation
     */
    totalDrainageArea?: number;
    /**
     * 
     * @type {number}
     * @memberof StreamLocation
     */
    ungagedDrainageArea?: number;
    /**
     * 
     * @type {number}
     * @memberof StreamLocation
     */
    nagivationStation?: number;
}

/**
 * Check if a given object implements the StreamLocation interface.
 */
export function instanceOfStreamLocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "officeId" in value;

    return isInstance;
}

export function StreamLocationFromJSON(json: any): StreamLocation {
    return StreamLocationFromJSONTyped(json, false);
}

export function StreamLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamLocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'officeId': json['office-id'],
        'locationName': !exists(json, 'location-name') ? undefined : json['location-name'],
        'streamName': !exists(json, 'stream-name') ? undefined : json['stream-name'],
        'station': !exists(json, 'station') ? undefined : json['station'],
        'bank': !exists(json, 'bank') ? undefined : json['bank'],
        'publishedStation': !exists(json, 'published-station') ? undefined : json['published-station'],
        'lowestMeasurableStage': !exists(json, 'lowest-measurable-stage') ? undefined : json['lowest-measurable-stage'],
        'totalDrainageArea': !exists(json, 'total-drainage-area') ? undefined : json['total-drainage-area'],
        'ungagedDrainageArea': !exists(json, 'ungaged-drainage-area') ? undefined : json['ungaged-drainage-area'],
        'nagivationStation': !exists(json, 'nagivation-station') ? undefined : json['nagivation-station'],
    };
}

export function StreamLocationToJSON(value?: StreamLocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'office-id': value.officeId,
        'location-name': value.locationName,
        'stream-name': value.streamName,
        'station': value.station,
        'bank': value.bank,
        'published-station': value.publishedStation,
        'lowest-measurable-stage': value.lowestMeasurableStage,
        'total-drainage-area': value.totalDrainageArea,
        'ungaged-drainage-area': value.ungagedDrainageArea,
        'nagivation-station': value.nagivationStation,
    };
}

