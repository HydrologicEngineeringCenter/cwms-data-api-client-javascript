/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SeasonalValueBean } from './SeasonalValueBean';
import {
    SeasonalValueBeanFromJSON,
    SeasonalValueBeanFromJSONTyped,
    SeasonalValueBeanToJSON,
} from './SeasonalValueBean';

/**
 * 
 * @export
 * @interface LocationLevel
 */
export interface LocationLevel {
    /**
     * Owning office of object.
     * @type {string}
     * @memberof LocationLevel
     */
    officeId: string;
    /**
     * Name of the location level
     * @type {string}
     * @memberof LocationLevel
     */
    locationLevelId: string;
    /**
     * Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue
     * @type {string}
     * @memberof LocationLevel
     */
    seasonalTimeSeriesId?: string;
    /**
     * List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue
     * @type {Array<SeasonalValueBean>}
     * @memberof LocationLevel
     */
    seasonalValues?: Array<SeasonalValueBean>;
    /**
     * Generic name of this location level. Common names are 'Top of Dam', 'Streambed', 'Bottom of Dam'.
     * @type {string}
     * @memberof LocationLevel
     */
    specifiedLevelId?: string;
    /**
     * To indicate if single or aggregate value
     * @type {string}
     * @memberof LocationLevel
     */
    parameterTypeId?: LocationLevelParameterTypeIdEnum;
    /**
     * Data Type such as Stage, Elevation, or others.
     * @type {string}
     * @memberof LocationLevel
     */
    parameterId?: string;
    /**
     * Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues.
     * @type {number}
     * @memberof LocationLevel
     */
    constantValue?: number;
    /**
     * Units the provided levels are in
     * @type {string}
     * @memberof LocationLevel
     */
    levelUnitsId?: string;
    /**
     * The date/time at which this location level configuration takes effect.
     * @type {Date}
     * @memberof LocationLevel
     */
    levelDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof LocationLevel
     */
    levelComment?: string;
    /**
     * The start point of provided seasonal values
     * @type {Date}
     * @memberof LocationLevel
     */
    intervalOrigin?: Date;
    /**
     * 
     * @type {number}
     * @memberof LocationLevel
     */
    intervalMonths?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationLevel
     */
    intervalMinutes?: number;
    /**
     * Indicating whether or not to interpolate between seasonal values.
     * @type {string}
     * @memberof LocationLevel
     */
    interpolateString?: LocationLevelInterpolateStringEnum;
    /**
     * 0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value.
     * @type {string}
     * @memberof LocationLevel
     */
    durationId?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationLevel
     */
    attributeValue?: number;
    /**
     * 
     * @type {string}
     * @memberof LocationLevel
     */
    attributeUnitsId?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationLevel
     */
    attributeParameterTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationLevel
     */
    attributeParameterId?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationLevel
     */
    attributeDurationId?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationLevel
     */
    attributeComment?: string;
}


/**
 * @export
 */
export const LocationLevelParameterTypeIdEnum = {
    Inst: 'Inst',
    Ave: 'Ave',
    Min: 'Min',
    Max: 'Max',
    Total: 'Total'
} as const;
export type LocationLevelParameterTypeIdEnum = typeof LocationLevelParameterTypeIdEnum[keyof typeof LocationLevelParameterTypeIdEnum];

/**
 * @export
 */
export const LocationLevelInterpolateStringEnum = {
    T: 'T',
    F: 'F'
} as const;
export type LocationLevelInterpolateStringEnum = typeof LocationLevelInterpolateStringEnum[keyof typeof LocationLevelInterpolateStringEnum];


/**
 * Check if a given object implements the LocationLevel interface.
 */
export function instanceOfLocationLevel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "officeId" in value;
    isInstance = isInstance && "locationLevelId" in value;

    return isInstance;
}

export function LocationLevelFromJSON(json: any): LocationLevel {
    return LocationLevelFromJSONTyped(json, false);
}

export function LocationLevelFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationLevel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'officeId': json['office-id'],
        'locationLevelId': json['location-level-id'],
        'seasonalTimeSeriesId': !exists(json, 'seasonal-time-series-id') ? undefined : json['seasonal-time-series-id'],
        'seasonalValues': !exists(json, 'seasonal-values') ? undefined : ((json['seasonal-values'] as Array<any>).map(SeasonalValueBeanFromJSON)),
        'specifiedLevelId': !exists(json, 'specified-level-id') ? undefined : json['specified-level-id'],
        'parameterTypeId': !exists(json, 'parameter-type-id') ? undefined : json['parameter-type-id'],
        'parameterId': !exists(json, 'parameter-id') ? undefined : json['parameter-id'],
        'constantValue': !exists(json, 'constant-value') ? undefined : json['constant-value'],
        'levelUnitsId': !exists(json, 'level-units-id') ? undefined : json['level-units-id'],
        'levelDate': !exists(json, 'level-date') ? undefined : (new Date(json['level-date'])),
        'levelComment': !exists(json, 'level-comment') ? undefined : json['level-comment'],
        'intervalOrigin': !exists(json, 'interval-origin') ? undefined : (new Date(json['interval-origin'])),
        'intervalMonths': !exists(json, 'interval-months') ? undefined : json['interval-months'],
        'intervalMinutes': !exists(json, 'interval-minutes') ? undefined : json['interval-minutes'],
        'interpolateString': !exists(json, 'interpolate-string') ? undefined : json['interpolate-string'],
        'durationId': !exists(json, 'duration-id') ? undefined : json['duration-id'],
        'attributeValue': !exists(json, 'attribute-value') ? undefined : json['attribute-value'],
        'attributeUnitsId': !exists(json, 'attribute-units-id') ? undefined : json['attribute-units-id'],
        'attributeParameterTypeId': !exists(json, 'attribute-parameter-type-id') ? undefined : json['attribute-parameter-type-id'],
        'attributeParameterId': !exists(json, 'attribute-parameter-id') ? undefined : json['attribute-parameter-id'],
        'attributeDurationId': !exists(json, 'attribute-duration-id') ? undefined : json['attribute-duration-id'],
        'attributeComment': !exists(json, 'attribute-comment') ? undefined : json['attribute-comment'],
    };
}

export function LocationLevelToJSON(value?: LocationLevel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'office-id': value.officeId,
        'location-level-id': value.locationLevelId,
        'seasonal-time-series-id': value.seasonalTimeSeriesId,
        'seasonal-values': value.seasonalValues === undefined ? undefined : ((value.seasonalValues as Array<any>).map(SeasonalValueBeanToJSON)),
        'specified-level-id': value.specifiedLevelId,
        'parameter-type-id': value.parameterTypeId,
        'parameter-id': value.parameterId,
        'constant-value': value.constantValue,
        'level-units-id': value.levelUnitsId,
        'level-date': value.levelDate === undefined ? undefined : (value.levelDate.toISOString()),
        'level-comment': value.levelComment,
        'interval-origin': value.intervalOrigin === undefined ? undefined : (value.intervalOrigin.toISOString()),
        'interval-months': value.intervalMonths,
        'interval-minutes': value.intervalMinutes,
        'interpolate-string': value.interpolateString,
        'duration-id': value.durationId,
        'attribute-value': value.attributeValue,
        'attribute-units-id': value.attributeUnitsId,
        'attribute-parameter-type-id': value.attributeParameterTypeId,
        'attribute-parameter-id': value.attributeParameterId,
        'attribute-duration-id': value.attributeDurationId,
        'attribute-comment': value.attributeComment,
    };
}

