/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Catalog,
  CatalogableEndpoint,
  CdaError,
  UnitSystem,
} from '../models/index';
import {
    CatalogFromJSON,
    CatalogToJSON,
    CatalogableEndpointFromJSON,
    CatalogableEndpointToJSON,
    CdaErrorFromJSON,
    CdaErrorToJSON,
    UnitSystemFromJSON,
    UnitSystemToJSON,
} from '../models/index';

export interface GetCwmsDataCatalogWithDatasetRequest {
    dataset: CatalogableEndpoint;
    page?: string;
    pageSize?: number;
    unitSystem?: UnitSystem;
    office?: string;
    like?: string;
    timeseriesCategoryLike?: string;
    timeseriesGroupLike?: string;
    locationCategoryLike?: string;
    locationGroupLike?: string;
    boundingOfficeLike?: string;
}

/**
 * 
 */
export class CatalogApi extends runtime.BaseAPI {

    /**
     * Get cwmsData catalog with dataset
     */
    async getCwmsDataCatalogWithDatasetRaw(requestParameters: GetCwmsDataCatalogWithDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Catalog>> {
        if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
            throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling getCwmsDataCatalogWithDataset.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page-size'] = requestParameters.pageSize;
        }

        if (requestParameters.unitSystem !== undefined) {
            queryParameters['unit-system'] = requestParameters.unitSystem;
        }

        if (requestParameters.office !== undefined) {
            queryParameters['office'] = requestParameters.office;
        }

        if (requestParameters.like !== undefined) {
            queryParameters['like'] = requestParameters.like;
        }

        if (requestParameters.timeseriesCategoryLike !== undefined) {
            queryParameters['timeseries-category-like'] = requestParameters.timeseriesCategoryLike;
        }

        if (requestParameters.timeseriesGroupLike !== undefined) {
            queryParameters['timeseries-group-like'] = requestParameters.timeseriesGroupLike;
        }

        if (requestParameters.locationCategoryLike !== undefined) {
            queryParameters['location-category-like'] = requestParameters.locationCategoryLike;
        }

        if (requestParameters.locationGroupLike !== undefined) {
            queryParameters['location-group-like'] = requestParameters.locationGroupLike;
        }

        if (requestParameters.boundingOfficeLike !== undefined) {
            queryParameters['bounding-office-like'] = requestParameters.boundingOfficeLike;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cwms-data/catalog/{dataset}`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogFromJSON(jsonValue));
    }

    /**
     * Get cwmsData catalog with dataset
     */
    async getCwmsDataCatalogWithDataset(requestParameters: GetCwmsDataCatalogWithDatasetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Catalog> {
        const response = await this.getCwmsDataCatalogWithDatasetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
