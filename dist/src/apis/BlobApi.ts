/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Blob,
  Blobs,
  CdaError,
} from '../models/index';
import {
    BlobFromJSON,
    BlobToJSON,
    BlobsFromJSON,
    BlobsToJSON,
    CdaErrorFromJSON,
    CdaErrorToJSON,
} from '../models/index';

export interface GetCwmsDataBlobsRequest {
    office?: string;
    page?: string;
    pageSize?: number;
    like?: string;
}

export interface GetCwmsDataBlobsWithBlobIdRequest {
    blobId: string;
    office?: string;
}

export interface PostCwmsDataBlobsRequest {
    blob: Blob;
    failIfExists?: boolean;
}

/**
 * 
 */
export class BlobApi extends runtime.BaseAPI {

    /**
     * Get cwmsData blobs
     */
    async getCwmsDataBlobsRaw(requestParameters: GetCwmsDataBlobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blobs>> {
        const queryParameters: any = {};

        if (requestParameters.office !== undefined) {
            queryParameters['office'] = requestParameters.office;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page-size'] = requestParameters.pageSize;
        }

        if (requestParameters.like !== undefined) {
            queryParameters['like'] = requestParameters.like;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cwms-data/blobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlobsFromJSON(jsonValue));
    }

    /**
     * Get cwmsData blobs
     */
    async getCwmsDataBlobs(requestParameters: GetCwmsDataBlobsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blobs> {
        const response = await this.getCwmsDataBlobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cwmsData blobs with blobId
     */
    async getCwmsDataBlobsWithBlobIdRaw(requestParameters: GetCwmsDataBlobsWithBlobIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.blobId === null || requestParameters.blobId === undefined) {
            throw new runtime.RequiredError('blobId','Required parameter requestParameters.blobId was null or undefined when calling getCwmsDataBlobsWithBlobId.');
        }

        const queryParameters: any = {};

        if (requestParameters.office !== undefined) {
            queryParameters['office'] = requestParameters.office;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cwms-data/blobs/{blob-id}`.replace(`{${"blob-id"}}`, encodeURIComponent(String(requestParameters.blobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get cwmsData blobs with blobId
     */
    async getCwmsDataBlobsWithBlobId(requestParameters: GetCwmsDataBlobsWithBlobIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getCwmsDataBlobsWithBlobIdRaw(requestParameters, initOverrides);
    }

    /**
     * Create new Blob
     * Post cwmsData blobs
     */
    async postCwmsDataBlobsRaw(requestParameters: PostCwmsDataBlobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.blob === null || requestParameters.blob === undefined) {
            throw new runtime.RequiredError('blob','Required parameter requestParameters.blob was null or undefined when calling postCwmsDataBlobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.failIfExists !== undefined) {
            queryParameters['fail-if-exists'] = requestParameters.failIfExists;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/cwms-data/blobs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlobToJSON(requestParameters.blob),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new Blob
     * Post cwmsData blobs
     */
    async postCwmsDataBlobs(requestParameters: PostCwmsDataBlobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataBlobsRaw(requestParameters, initOverrides);
    }

}
