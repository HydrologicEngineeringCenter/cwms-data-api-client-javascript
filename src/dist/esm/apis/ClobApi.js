/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ClobFromJSON, ClobToJSON, ClobsFromJSON, } from '../models/index';
/**
 *
 */
export class ClobApi extends runtime.BaseAPI {
    /**
     * Delete clob
     * Delete swtData clobs with clobId
     */
    deleteSwtDataClobsWithClobIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['clobId'] == null) {
                throw new runtime.RequiredError('clobId', 'Required parameter "clobId" was null or undefined when calling deleteSwtDataClobsWithClobId().');
            }
            if (requestParameters['office'] == null) {
                throw new runtime.RequiredError('office', 'Required parameter "office" was null or undefined when calling deleteSwtDataClobsWithClobId().');
            }
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/clobs/{clob-id}`.replace(`{${"clob-id"}}`, encodeURIComponent(String(requestParameters['clobId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete clob
     * Delete swtData clobs with clobId
     */
    deleteSwtDataClobsWithClobId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteSwtDataClobsWithClobIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get swtData clobs
     */
    getSwtDataClobsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page-size'] = requestParameters['pageSize'];
            }
            if (requestParameters['includeValues'] != null) {
                queryParameters['include-values'] = requestParameters['includeValues'];
            }
            if (requestParameters['like'] != null) {
                queryParameters['like'] = requestParameters['like'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/clobs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ClobsFromJSON(jsonValue));
        });
    }
    /**
     * Get swtData clobs
     */
    getSwtDataClobs(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSwtDataClobsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a single clob.  If the accept header is set to text/plain, the raw value is returned as the response body. Responses to text/plain requests are streamed and support the Range header.  When the accept header is set to application/json;version=2 the clob will be returned as a serialized Clob object with fields for office-id, id, description and value.
     * Get swtData clobs with clobId
     */
    getSwtDataClobsWithClobIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['clobId'] == null) {
                throw new runtime.RequiredError('clobId', 'Required parameter "clobId" was null or undefined when calling getSwtDataClobsWithClobId().');
            }
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['clobId2'] != null) {
                queryParameters['clob-id'] = requestParameters['clobId2'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/clobs/{clob-id}`.replace(`{${"clob-id"}}`, encodeURIComponent(String(requestParameters['clobId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ClobFromJSON(jsonValue));
        });
    }
    /**
     * Get a single clob.  If the accept header is set to text/plain, the raw value is returned as the response body. Responses to text/plain requests are streamed and support the Range header.  When the accept header is set to application/json;version=2 the clob will be returned as a serialized Clob object with fields for office-id, id, description and value.
     * Get swtData clobs with clobId
     */
    getSwtDataClobsWithClobId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSwtDataClobsWithClobIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update clob
     * Patch swtData clobs with clobId
     */
    patchSwtDataClobsWithClobIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['clobId'] == null) {
                throw new runtime.RequiredError('clobId', 'Required parameter "clobId" was null or undefined when calling patchSwtDataClobsWithClobId().');
            }
            if (requestParameters['clob'] == null) {
                throw new runtime.RequiredError('clob', 'Required parameter "clob" was null or undefined when calling patchSwtDataClobsWithClobId().');
            }
            const queryParameters = {};
            if (requestParameters['ignoreNulls'] != null) {
                queryParameters['ignore-nulls'] = requestParameters['ignoreNulls'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;version=2';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/clobs/{clob-id}`.replace(`{${"clob-id"}}`, encodeURIComponent(String(requestParameters['clobId']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: ClobToJSON(requestParameters['clob']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update clob
     * Patch swtData clobs with clobId
     */
    patchSwtDataClobsWithClobId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.patchSwtDataClobsWithClobIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Create new Clob
     * Post swtData clobs
     */
    postSwtDataClobsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['clob'] == null) {
                throw new runtime.RequiredError('clob', 'Required parameter "clob" was null or undefined when calling postSwtDataClobs().');
            }
            const queryParameters = {};
            if (requestParameters['failIfExists'] != null) {
                queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;version=2';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/clobs`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ClobToJSON(requestParameters['clob']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create new Clob
     * Post swtData clobs
     */
    postSwtDataClobs(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.postSwtDataClobsRaw(requestParameters, initOverrides);
        });
    }
}
