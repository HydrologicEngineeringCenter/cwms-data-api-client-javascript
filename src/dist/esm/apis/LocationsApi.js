/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { LocationFromJSON, LocationToJSON, } from '../models/index';
/**
 *
 */
export class LocationsApi extends runtime.BaseAPI {
    /**
     * Delete CWMS Location
     * Delete swtData locations with locationId
     */
    deleteSwtDataLocationsWithLocationIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['locationId'] == null) {
                throw new runtime.RequiredError('locationId', 'Required parameter "locationId" was null or undefined when calling deleteSwtDataLocationsWithLocationId().');
            }
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/locations/{location-id}`.replace(`{${"location-id"}}`, encodeURIComponent(String(requestParameters['locationId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete CWMS Location
     * Delete swtData locations with locationId
     */
    deleteSwtDataLocationsWithLocationId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteSwtDataLocationsWithLocationIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns CWMS Location Data.  The Catalog end-point is also capable of retrieving lists of locations and can filter on additional fields.
     * Get swtData locations
     */
    getSwtDataLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['names'] != null) {
                queryParameters['names'] = requestParameters['names'];
            }
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['unit'] != null) {
                queryParameters['unit'] = requestParameters['unit'];
            }
            if (requestParameters['datum'] != null) {
                queryParameters['datum'] = requestParameters['datum'];
            }
            if (requestParameters['format'] != null) {
                queryParameters['format'] = requestParameters['format'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/locations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationFromJSON));
        });
    }
    /**
     * Returns CWMS Location Data.  The Catalog end-point is also capable of retrieving lists of locations and can filter on additional fields.
     * Get swtData locations
     */
    getSwtDataLocations(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSwtDataLocationsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns CWMS Location Data
     * Get swtData locations with locationId
     */
    getSwtDataLocationsWithLocationIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['locationId'] == null) {
                throw new runtime.RequiredError('locationId', 'Required parameter "locationId" was null or undefined when calling getSwtDataLocationsWithLocationId().');
            }
            if (requestParameters['office'] == null) {
                throw new runtime.RequiredError('office', 'Required parameter "office" was null or undefined when calling getSwtDataLocationsWithLocationId().');
            }
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['unit'] != null) {
                queryParameters['unit'] = requestParameters['unit'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/locations/{location-id}`.replace(`{${"location-id"}}`, encodeURIComponent(String(requestParameters['locationId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
        });
    }
    /**
     * Returns CWMS Location Data
     * Get swtData locations with locationId
     */
    getSwtDataLocationsWithLocationId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSwtDataLocationsWithLocationIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update CWMS Location
     * Patch swtData locations with locationId
     */
    patchSwtDataLocationsWithLocationIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['locationId'] == null) {
                throw new runtime.RequiredError('locationId', 'Required parameter "locationId" was null or undefined when calling patchSwtDataLocationsWithLocationId().');
            }
            if (requestParameters['location'] == null) {
                throw new runtime.RequiredError('location', 'Required parameter "location" was null or undefined when calling patchSwtDataLocationsWithLocationId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/xml';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/locations/{location-id}`.replace(`{${"location-id"}}`, encodeURIComponent(String(requestParameters['locationId']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: LocationToJSON(requestParameters['location']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update CWMS Location
     * Patch swtData locations with locationId
     */
    patchSwtDataLocationsWithLocationId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.patchSwtDataLocationsWithLocationIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Create new CWMS Location
     * Post swtData locations
     */
    postSwtDataLocationsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['location'] == null) {
                throw new runtime.RequiredError('location', 'Required parameter "location" was null or undefined when calling postSwtDataLocations().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/locations`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: LocationToJSON(requestParameters['location']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create new CWMS Location
     * Post swtData locations
     */
    postSwtDataLocations(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.postSwtDataLocationsRaw(requestParameters, initOverrides);
        });
    }
}
