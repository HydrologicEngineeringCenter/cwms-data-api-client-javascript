/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { TimeSeriesFromJSON, TimeSeriesToJSON, TsvFromJSON, } from '../models/index';
/**
 *
 */
export class TimeSeriesApi extends runtime.BaseAPI {
    /**
     * Delete CwmsData timeseries with timeseries
     */
    deleteCwmsDataTimeSeriesWithTimeSeriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['timeseries'] == null) {
                throw new runtime.RequiredError('timeseries', 'Required parameter "timeseries" was null or undefined when calling deleteCwmsDataTimeSeriesWithTimeSeries().');
            }
            if (requestParameters['office'] == null) {
                throw new runtime.RequiredError('office', 'Required parameter "office" was null or undefined when calling deleteCwmsDataTimeSeriesWithTimeSeries().');
            }
            if (requestParameters['begin'] == null) {
                throw new runtime.RequiredError('begin', 'Required parameter "begin" was null or undefined when calling deleteCwmsDataTimeSeriesWithTimeSeries().');
            }
            if (requestParameters['end'] == null) {
                throw new runtime.RequiredError('end', 'Required parameter "end" was null or undefined when calling deleteCwmsDataTimeSeriesWithTimeSeries().');
            }
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['begin'] != null) {
                queryParameters['begin'] = requestParameters['begin'];
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'];
            }
            if (requestParameters['timezone'] != null) {
                queryParameters['timezone'] = requestParameters['timezone'];
            }
            if (requestParameters['versionDate'] != null) {
                queryParameters['version-date'] = requestParameters['versionDate'];
            }
            if (requestParameters['startTimeInclusive'] != null) {
                queryParameters['start-time-inclusive'] = requestParameters['startTimeInclusive'];
            }
            if (requestParameters['endTimeInclusive'] != null) {
                queryParameters['end-time-inclusive'] = requestParameters['endTimeInclusive'];
            }
            if (requestParameters['maxVersion'] != null) {
                queryParameters['max-version'] = requestParameters['maxVersion'];
            }
            if (requestParameters['overrideProtection'] != null) {
                queryParameters['override-protection'] = requestParameters['overrideProtection'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/{timeseries}`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters['timeseries']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete CwmsData timeseries with timeseries
     */
    deleteCwmsDataTimeSeriesWithTimeSeries(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCwmsDataTimeSeriesWithTimeSeriesRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get CwmsData timeseries
     */
    getTimeSeriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling getTimeSeries().');
            }
            const queryParameters = {};
            if (requestParameters['name'] != null) {
                queryParameters['name'] = requestParameters['name'];
            }
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['unit'] != null) {
                queryParameters['unit'] = requestParameters['unit'];
            }
            if (requestParameters['versionDate'] != null) {
                queryParameters['version-date'] = requestParameters['versionDate'];
            }
            if (requestParameters['datum'] != null) {
                queryParameters['datum'] = requestParameters['datum'];
            }
            if (requestParameters['begin'] != null) {
                queryParameters['begin'] = requestParameters['begin'];
            }
            if (requestParameters['end'] != null) {
                queryParameters['end'] = requestParameters['end'];
            }
            if (requestParameters['timezone'] != null) {
                queryParameters['timezone'] = requestParameters['timezone'];
            }
            if (requestParameters['trim'] != null) {
                queryParameters['trim'] = requestParameters['trim'];
            }
            if (requestParameters['format'] != null) {
                queryParameters['format'] = requestParameters['format'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['page-size'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesFromJSON(jsonValue));
        });
    }
    /**
     * Get CwmsData timeseries
     */
    getTimeSeries(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTimeSeriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Returns CWMS Time Series Groups Data
     * Get CwmsData timeseries recent
     */
    getTimeSeriesRecentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['categoryId'] != null) {
                queryParameters['category-id'] = requestParameters['categoryId'];
            }
            if (requestParameters['groupId'] != null) {
                queryParameters['group-id'] = requestParameters['groupId'];
            }
            if (requestParameters['tsIds'] != null) {
                queryParameters['ts-ids'] = requestParameters['tsIds'];
            }
            if (requestParameters['unitSystem'] != null) {
                queryParameters['unit-system'] = requestParameters['unitSystem'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/recent`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TsvFromJSON));
        });
    }
    /**
     * Returns CWMS Time Series Groups Data
     * Get CwmsData timeseries recent
     */
    getTimeSeriesRecent(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTimeSeriesRecentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a TimeSeries with provided values
     * Patch CwmsData timeseries with timeseries
     */
    patchCwmsDataTimeSeriesWithTimeSeriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['timeseries'] == null) {
                throw new runtime.RequiredError('timeseries', 'Required parameter "timeseries" was null or undefined when calling patchCwmsDataTimeSeriesWithTimeSeries().');
            }
            if (requestParameters['timeSeries'] == null) {
                throw new runtime.RequiredError('timeSeries', 'Required parameter "timeSeries" was null or undefined when calling patchCwmsDataTimeSeriesWithTimeSeries().');
            }
            const queryParameters = {};
            if (requestParameters['timezone'] != null) {
                queryParameters['timezone'] = requestParameters['timezone'];
            }
            if (requestParameters['createAsLrts'] != null) {
                queryParameters['create-as-lrts'] = requestParameters['createAsLrts'];
            }
            if (requestParameters['storeRule'] != null) {
                queryParameters['store-rule'] = requestParameters['storeRule'];
            }
            if (requestParameters['overrideProtection'] != null) {
                queryParameters['override-protection'] = requestParameters['overrideProtection'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;version=2';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/{timeseries}`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters['timeseries']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: TimeSeriesToJSON(requestParameters['timeSeries']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update a TimeSeries with provided values
     * Patch CwmsData timeseries with timeseries
     */
    patchCwmsDataTimeSeriesWithTimeSeries(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.patchCwmsDataTimeSeriesWithTimeSeriesRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Used to create and save time-series data. Data to be stored must have time stamps in UTC represented as epoch milliseconds
     * Post CwmsData timeseries
     */
    postCwmsDataTimeSeriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['timeSeries'] == null) {
                throw new runtime.RequiredError('timeSeries', 'Required parameter "timeSeries" was null or undefined when calling postCwmsDataTimeSeries().');
            }
            const queryParameters = {};
            if (requestParameters['timezone'] != null) {
                queryParameters['timezone'] = requestParameters['timezone'];
            }
            if (requestParameters['createAsLrts'] != null) {
                queryParameters['create-as-lrts'] = requestParameters['createAsLrts'];
            }
            if (requestParameters['storeRule'] != null) {
                queryParameters['store-rule'] = requestParameters['storeRule'];
            }
            if (requestParameters['overrideProtection'] != null) {
                queryParameters['override-protection'] = requestParameters['overrideProtection'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json;version=2';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: TimeSeriesToJSON(requestParameters['timeSeries']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Used to create and save time-series data. Data to be stored must have time stamps in UTC represented as epoch milliseconds
     * Post CwmsData timeseries
     */
    postCwmsDataTimeSeries(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.postCwmsDataTimeSeriesRaw(requestParameters, initOverrides);
        });
    }
}
