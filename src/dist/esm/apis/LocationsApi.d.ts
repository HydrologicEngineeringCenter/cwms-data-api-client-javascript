/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Location } from '../models/index';
export interface DeleteSwtDataLocationsWithLocationIdRequest {
    locationId: string;
    office?: string;
}
export interface GetSwtDataLocationsRequest {
    names?: string;
    office?: string;
    unit?: string;
    datum?: string;
    format?: string;
}
export interface GetSwtDataLocationsWithLocationIdRequest {
    locationId: string;
    office: string;
    unit?: string;
}
export interface PatchSwtDataLocationsWithLocationIdRequest {
    locationId: string;
    location: Location;
}
export interface PostSwtDataLocationsRequest {
    location: Location;
}
/**
 *
 */
export declare class LocationsApi extends runtime.BaseAPI {
    /**
     * Delete CWMS Location
     * Delete swtData locations with locationId
     */
    deleteSwtDataLocationsWithLocationIdRaw(requestParameters: DeleteSwtDataLocationsWithLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete CWMS Location
     * Delete swtData locations with locationId
     */
    deleteSwtDataLocationsWithLocationId(requestParameters: DeleteSwtDataLocationsWithLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Returns CWMS Location Data.  The Catalog end-point is also capable of retrieving lists of locations and can filter on additional fields.
     * Get swtData locations
     */
    getSwtDataLocationsRaw(requestParameters: GetSwtDataLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Location>>>;
    /**
     * Returns CWMS Location Data.  The Catalog end-point is also capable of retrieving lists of locations and can filter on additional fields.
     * Get swtData locations
     */
    getSwtDataLocations(requestParameters?: GetSwtDataLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Location>>;
    /**
     * Returns CWMS Location Data
     * Get swtData locations with locationId
     */
    getSwtDataLocationsWithLocationIdRaw(requestParameters: GetSwtDataLocationsWithLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;
    /**
     * Returns CWMS Location Data
     * Get swtData locations with locationId
     */
    getSwtDataLocationsWithLocationId(requestParameters: GetSwtDataLocationsWithLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;
    /**
     * Update CWMS Location
     * Patch swtData locations with locationId
     */
    patchSwtDataLocationsWithLocationIdRaw(requestParameters: PatchSwtDataLocationsWithLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update CWMS Location
     * Patch swtData locations with locationId
     */
    patchSwtDataLocationsWithLocationId(requestParameters: PatchSwtDataLocationsWithLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Create new CWMS Location
     * Post swtData locations
     */
    postSwtDataLocationsRaw(requestParameters: PostSwtDataLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Create new CWMS Location
     * Post swtData locations
     */
    postSwtDataLocations(requestParameters: PostSwtDataLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
