"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class AuthorizationApi extends runtime.BaseAPI {
    /**
     * Delete API key for a user
     * Delete swtData auth keys with keyName
     */
    deleteSwtDataAuthKeysWithKeyNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyName'] == null) {
                throw new runtime.RequiredError('keyName', 'Required parameter "keyName" was null or undefined when calling deleteSwtDataAuthKeysWithKeyName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/auth/keys/{key-name}`.replace(`{${"key-name"}}`, encodeURIComponent(String(requestParameters['keyName']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiKeyFromJSON)(jsonValue));
        });
    }
    /**
     * Delete API key for a user
     * Delete swtData auth keys with keyName
     */
    deleteSwtDataAuthKeysWithKeyName(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteSwtDataAuthKeysWithKeyNameRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * View all keys for the current user
     * Get swtData auth keys
     */
    getSwtDataAuthKeysRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/auth/keys`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.ApiKeyFromJSON));
        });
    }
    /**
     * View all keys for the current user
     * Get swtData auth keys
     */
    getSwtDataAuthKeys(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSwtDataAuthKeysRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * View specific key
     * Get swtData auth keys with keyName
     */
    getSwtDataAuthKeysWithKeyNameRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['keyName'] == null) {
                throw new runtime.RequiredError('keyName', 'Required parameter "keyName" was null or undefined when calling getSwtDataAuthKeysWithKeyName().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/auth/keys/{key-name}`.replace(`{${"key-name"}}`, encodeURIComponent(String(requestParameters['keyName']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiKeyFromJSON)(jsonValue));
        });
    }
    /**
     * View specific key
     * Get swtData auth keys with keyName
     */
    getSwtDataAuthKeysWithKeyName(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSwtDataAuthKeysWithKeyNameRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a new API Key for user. The randomly generated key is returned to the caller. A provided key will be ignored.
     * Post swtData auth keys
     */
    postSwtDataAuthKeysRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/auth/keys`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ApiKeyToJSON)(requestParameters['apiKey']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiKeyFromJSON)(jsonValue));
        });
    }
    /**
     * Create a new API Key for user. The randomly generated key is returned to the caller. A provided key will be ignored.
     * Post swtData auth keys
     */
    postSwtDataAuthKeys(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postSwtDataAuthKeysRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AuthorizationApi = AuthorizationApi;
