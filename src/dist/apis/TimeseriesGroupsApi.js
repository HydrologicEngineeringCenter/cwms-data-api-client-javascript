"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSeriesGroupsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class TimeSeriesGroupsApi extends runtime.BaseAPI {
    /**
     * Deletes requested time series group
     * Delete CwmsData timeseries group with groupId
     */
    deleteCwmsDataTimeSeriesGroupWithGroupIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['groupId'] == null) {
                throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling deleteCwmsDataTimeSeriesGroupWithGroupId().');
            }
            if (requestParameters['categoryId'] == null) {
                throw new runtime.RequiredError('categoryId', 'Required parameter "categoryId" was null or undefined when calling deleteCwmsDataTimeSeriesGroupWithGroupId().');
            }
            if (requestParameters['office'] == null) {
                throw new runtime.RequiredError('office', 'Required parameter "office" was null or undefined when calling deleteCwmsDataTimeSeriesGroupWithGroupId().');
            }
            const queryParameters = {};
            if (requestParameters['categoryId'] != null) {
                queryParameters['category-id'] = requestParameters['categoryId'];
            }
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes requested time series group
     * Delete CwmsData timeseries group with groupId
     */
    deleteCwmsDataTimeSeriesGroupWithGroupId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCwmsDataTimeSeriesGroupWithGroupIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Returns CWMS TimeSeries Groups Data
     * Get CwmsData timeseries group
     */
    getTimeSeriesGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['includeAssigned'] != null) {
                queryParameters['include-assigned'] = requestParameters['includeAssigned'];
            }
            if (requestParameters['timeseriesCategoryLike'] != null) {
                queryParameters['timeseries-category-like'] = requestParameters['timeseriesCategoryLike'];
            }
            if (requestParameters['timeseriesGroupLike'] != null) {
                queryParameters['timeseries-group-like'] = requestParameters['timeseriesGroupLike'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/group`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TimeseriesGroupFromJSON));
        });
    }
    /**
     * Returns CWMS TimeSeries Groups Data
     * Get CwmsData timeseries group
     */
    getTimeSeriesGroup(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTimeSeriesGroupRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves requested timeseries group
     * Get CwmsData timeseries group with groupId
     */
    getTimeSeriesGroupWithGroupIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['groupId'] == null) {
                throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling getTimeSeriesGroupWithGroupId().');
            }
            if (requestParameters['office'] == null) {
                throw new runtime.RequiredError('office', 'Required parameter "office" was null or undefined when calling getTimeSeriesGroupWithGroupId().');
            }
            if (requestParameters['categoryId'] == null) {
                throw new runtime.RequiredError('categoryId', 'Required parameter "categoryId" was null or undefined when calling getTimeSeriesGroupWithGroupId().');
            }
            const queryParameters = {};
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            if (requestParameters['categoryId'] != null) {
                queryParameters['category-id'] = requestParameters['categoryId'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TimeseriesGroupFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves requested timeseries group
     * Get CwmsData timeseries group with groupId
     */
    getTimeSeriesGroupWithGroupId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTimeSeriesGroupWithGroupIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update existing TimeSeriesGroup. Allows for renaming of the group, assigning new time series, and unassigning all time series from the group.
     * Patch CwmsData timeseries group with groupId
     */
    patchCwmsDataTimeSeriesGroupWithGroupIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['groupId'] == null) {
                throw new runtime.RequiredError('groupId', 'Required parameter "groupId" was null or undefined when calling patchCwmsDataTimeSeriesGroupWithGroupId().');
            }
            if (requestParameters['office'] == null) {
                throw new runtime.RequiredError('office', 'Required parameter "office" was null or undefined when calling patchCwmsDataTimeSeriesGroupWithGroupId().');
            }
            if (requestParameters['timeseriesGroup'] == null) {
                throw new runtime.RequiredError('timeseriesGroup', 'Required parameter "timeseriesGroup" was null or undefined when calling patchCwmsDataTimeSeriesGroupWithGroupId().');
            }
            const queryParameters = {};
            if (requestParameters['replaceAssignedTs'] != null) {
                queryParameters['replace-assigned-ts'] = requestParameters['replaceAssignedTs'];
            }
            if (requestParameters['office'] != null) {
                queryParameters['office'] = requestParameters['office'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TimeseriesGroupToJSON)(requestParameters['timeseriesGroup']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update existing TimeSeriesGroup. Allows for renaming of the group, assigning new time series, and unassigning all time series from the group.
     * Patch CwmsData timeseries group with groupId
     */
    patchCwmsDataTimeSeriesGroupWithGroupId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.patchCwmsDataTimeSeriesGroupWithGroupIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Create new TimeSeriesGroup
     * Post CwmsData timeseries group
     */
    postCwmsDataTimeSeriesGroupRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['timeseriesGroup'] == null) {
                throw new runtime.RequiredError('timeseriesGroup', 'Required parameter "timeseriesGroup" was null or undefined when calling postCwmsDataTimeSeriesGroup().');
            }
            const queryParameters = {};
            if (requestParameters['failIfExists'] != null) {
                queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKey authentication
            }
            const response = yield this.request({
                path: `/timeseries/group`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TimeseriesGroupToJSON)(requestParameters['timeseriesGroup']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create new TimeSeriesGroup
     * Post CwmsData timeseries group
     */
    postCwmsDataTimeSeriesGroup(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.postCwmsDataTimeSeriesGroupRaw(requestParameters, initOverrides);
        });
    }
}
exports.TimeSeriesGroupsApi = TimeSeriesGroupsApi;
