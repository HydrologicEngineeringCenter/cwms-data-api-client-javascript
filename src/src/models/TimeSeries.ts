/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TimeseriesColumn } from './TimeseriesColumn';
import {
    TimeseriesColumnFromJSON,
    TimeseriesColumnFromJSONTyped,
    TimeseriesColumnToJSON,
} from './TimeseriesColumn';
import type { TimeseriesInterval } from './TimeseriesInterval';
import {
    TimeseriesIntervalFromJSON,
    TimeseriesIntervalFromJSONTyped,
    TimeseriesIntervalToJSON,
} from './TimeseriesInterval';
import type { TimeseriesValuesInnerInner } from './TimeseriesValuesInnerInner';
import {
    TimeseriesValuesInnerInnerFromJSON,
    TimeseriesValuesInnerInnerFromJSONTyped,
    TimeseriesValuesInnerInnerToJSON,
} from './TimeseriesValuesInnerInner';
import type { VerticalDatumInfo } from './VerticalDatumInfo';
import {
    VerticalDatumInfoFromJSON,
    VerticalDatumInfoFromJSONTyped,
    VerticalDatumInfoToJSON,
} from './VerticalDatumInfo';

/**
 * 
 * @export
 * @interface Timeseries
 */
export interface Timeseries {
    /**
     * The requested start time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
     * @type {Date}
     * @memberof Timeseries
     */
    readonly begin?: Date;
    /**
     * Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
     * @type {string}
     * @memberof Timeseries
     */
    dateVersionType?: TimeseriesDateVersionTypeEnum;
    /**
     * The requested end time of the data, in ISO-8601 format with offset and timezone ('yyyy-MM-dd'T'HH:mm:ssZ'['VV']'')
     * @type {Date}
     * @memberof Timeseries
     */
    readonly end?: Date;
    /**
     * 
     * @type {TimeseriesInterval}
     * @memberof Timeseries
     */
    interval?: TimeseriesInterval;
    /**
     * Offset from top of interval
     * @type {number}
     * @memberof Timeseries
     */
    readonly intervalOffset?: number;
    /**
     * Time-series name
     * @type {string}
     * @memberof Timeseries
     */
    name?: string;
    /**
     * The cursor to the next page of data; null if there is no more data
     * @type {string}
     * @memberof Timeseries
     */
    readonly nextPage?: string;
    /**
     * Office ID that owns the time-series
     * @type {string}
     * @memberof Timeseries
     */
    officeId?: string;
    /**
     * The cursor to the current page of data
     * @type {string}
     * @memberof Timeseries
     */
    readonly page?: string;
    /**
     * The number of records fetched per-page; this may be larger than the number of records actually retrieved
     * @type {number}
     * @memberof Timeseries
     */
    readonly pageSize?: number;
    /**
     * Only on 21.1.1 Database. The timezone the Interval Offset is from.
     * @type {string}
     * @memberof Timeseries
     */
    readonly timeZone?: string;
    /**
     * The total number of records retrieved; null or not present if not supported or unknown
     * @type {number}
     * @memberof Timeseries
     */
    readonly total?: number;
    /**
     * The units of the time series data
     * @type {string}
     * @memberof Timeseries
     */
    units: string;
    /**
     * 
     * @type {Array<TimeseriesColumn>}
     * @memberof Timeseries
     */
    readonly valueColumns?: Array<TimeseriesColumn>;
    /**
     * 
     * @type {Array<Array<TimeseriesValuesInnerInner>>}
     * @memberof Timeseries
     */
    values?: Array<Array<TimeseriesValuesInnerInner>>;
    /**
     * The version date of the time series trace
     * @type {Date}
     * @memberof Timeseries
     */
    versionDate?: Date;
    /**
     * 
     * @type {VerticalDatumInfo}
     * @memberof Timeseries
     */
    verticalDatumInfo?: VerticalDatumInfo;
}


/**
 * @export
 */
export const TimeseriesDateVersionTypeEnum = {
    MaxAggregate: 'MAX_AGGREGATE',
    SingleVersion: 'SINGLE_VERSION',
    Unversioned: 'UNVERSIONED'
} as const;
export type TimeseriesDateVersionTypeEnum = typeof TimeseriesDateVersionTypeEnum[keyof typeof TimeseriesDateVersionTypeEnum];


/**
 * Check if a given object implements the Timeseries interface.
 */
export function instanceOfTimeseries(value: object): boolean {
    if (!('units' in value)) return false;
    return true;
}

export function TimeseriesFromJSON(json: any): Timeseries {
    return TimeseriesFromJSONTyped(json, false);
}

export function TimeseriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Timeseries {
    if (json == null) {
        return json;
    }
    return {
        
        'begin': json['begin'] == null ? undefined : (new Date(json['begin'])),
        'dateVersionType': json['date-version-type'] == null ? undefined : json['date-version-type'],
        'end': json['end'] == null ? undefined : (new Date(json['end'])),
        'interval': json['interval'] == null ? undefined : TimeseriesIntervalFromJSON(json['interval']),
        'intervalOffset': json['interval-offset'] == null ? undefined : json['interval-offset'],
        'name': json['name'] == null ? undefined : json['name'],
        'nextPage': json['next-page'] == null ? undefined : json['next-page'],
        'officeId': json['office-id'] == null ? undefined : json['office-id'],
        'page': json['page'] == null ? undefined : json['page'],
        'pageSize': json['page-size'] == null ? undefined : json['page-size'],
        'timeZone': json['time-zone'] == null ? undefined : json['time-zone'],
        'total': json['total'] == null ? undefined : json['total'],
        'units': json['units'],
        'valueColumns': json['value-columns'] == null ? undefined : ((json['value-columns'] as Array<any>).map(TimeseriesColumnFromJSON)),
        'values': json['values'] == null ? undefined : json['values'],
        'versionDate': json['version-date'] == null ? undefined : (new Date(json['version-date'])),
        'verticalDatumInfo': json['vertical-datum-info'] == null ? undefined : VerticalDatumInfoFromJSON(json['vertical-datum-info']),
    };
}

export function TimeseriesToJSON(value?: Timeseries | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'date-version-type': value['dateVersionType'],
        'interval': TimeseriesIntervalToJSON(value['interval']),
        'name': value['name'],
        'office-id': value['officeId'],
        'units': value['units'],
        'values': value['values'],
        'version-date': value['versionDate'] == null ? undefined : ((value['versionDate']).toISOString()),
        'vertical-datum-info': VerticalDatumInfoToJSON(value['verticalDatumInfo']),
    };
}

