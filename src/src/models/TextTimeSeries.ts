/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RegularTextTimeseriesRow } from './RegularTextTimeseriesRow';
import {
    RegularTextTimeseriesRowFromJSON,
    RegularTextTimeseriesRowFromJSONTyped,
    RegularTextTimeseriesRowToJSON,
} from './RegularTextTimeseriesRow';

/**
 * 
 * @export
 * @interface TextTimeseries
 */
export interface TextTimeseries {
    /**
     * Owning office of object.
     * @type {string}
     * @memberof TextTimeseries
     */
    officeId: string;
    /**
     * 
     * @type {string}
     * @memberof TextTimeseries
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof TextTimeseries
     */
    intervalOffset?: number;
    /**
     * 
     * @type {string}
     * @memberof TextTimeseries
     */
    timeZone?: string;
    /**
     * Version type specifies the type of timeseries response to be received. Can be max aggregate or single version. Max aggregate cannot be run if version date field is specified.
     * @type {string}
     * @memberof TextTimeseries
     */
    dateVersionType?: TextTimeseriesDateVersionTypeEnum;
    /**
     * The version date of the time series trace
     * @type {Date}
     * @memberof TextTimeseries
     */
    versionDate?: Date;
    /**
     * 
     * @type {Array<RegularTextTimeseriesRow>}
     * @memberof TextTimeseries
     */
    regularTextValues?: Array<RegularTextTimeseriesRow>;
}


/**
 * @export
 */
export const TextTimeseriesDateVersionTypeEnum = {
    MaxAggregate: 'MAX_AGGREGATE',
    SingleVersion: 'SINGLE_VERSION',
    Unversioned: 'UNVERSIONED'
} as const;
export type TextTimeseriesDateVersionTypeEnum = typeof TextTimeseriesDateVersionTypeEnum[keyof typeof TextTimeseriesDateVersionTypeEnum];


/**
 * Check if a given object implements the TextTimeseries interface.
 */
export function instanceOfTextTimeseries(value: object): boolean {
    if (!('officeId' in value)) return false;
    return true;
}

export function TextTimeseriesFromJSON(json: any): TextTimeseries {
    return TextTimeseriesFromJSONTyped(json, false);
}

export function TextTimeseriesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextTimeseries {
    if (json == null) {
        return json;
    }
    return {
        
        'officeId': json['office-id'],
        'name': json['name'] == null ? undefined : json['name'],
        'intervalOffset': json['interval-offset'] == null ? undefined : json['interval-offset'],
        'timeZone': json['time-zone'] == null ? undefined : json['time-zone'],
        'dateVersionType': json['date-version-type'] == null ? undefined : json['date-version-type'],
        'versionDate': json['version-date'] == null ? undefined : (new Date(json['version-date'])),
        'regularTextValues': json['regular-text-values'] == null ? undefined : ((json['regular-text-values'] as Array<any>).map(RegularTextTimeseriesRowFromJSON)),
    };
}

export function TextTimeseriesToJSON(value?: TextTimeseries | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'office-id': value['officeId'],
        'name': value['name'],
        'interval-offset': value['intervalOffset'],
        'time-zone': value['timeZone'],
        'date-version-type': value['dateVersionType'],
        'version-date': value['versionDate'] == null ? undefined : ((value['versionDate']).toISOString()),
        'regular-text-values': value['regularTextValues'] == null ? undefined : ((value['regularTextValues'] as Array<any>).map(RegularTextTimeseriesRowToJSON)),
    };
}

