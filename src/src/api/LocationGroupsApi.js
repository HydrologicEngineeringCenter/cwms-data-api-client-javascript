/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CdaError from '../model/CdaError';
import LocationGroup from '../model/LocationGroup';

/**
* LocationGroups service.
* @module api/LocationGroupsApi
* @version 1.4.0
*/
export default class LocationGroupsApi {

    /**
    * Constructs a new LocationGroupsApi. 
    * @alias module:api/LocationGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete cwmsData location group with groupId
     * Deletes requested location group
     * @param {String} groupId The location group to be deleted
     * @param {String} categoryId Specifies the location category of the location group to be deleted
     * @param {String} office Specifies the owning office of the location group to be deleted
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cascadeDelete] Specifies whether to specifies whether to unassign any location assignments. Default: false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCwmsDataLocationGroupWithGroupIdWithHttpInfo(groupId, categoryId, office, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteCwmsDataLocationGroupWithGroupId");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCwmsDataLocationGroupWithGroupId");
      }
      // verify the required parameter 'office' is set
      if (office === undefined || office === null) {
        throw new Error("Missing the required parameter 'office' when calling deleteCwmsDataLocationGroupWithGroupId");
      }

      let pathParams = {
        'group-id': groupId
      };
      let queryParams = {
        'category-id': categoryId,
        'office': office,
        'cascade-delete': opts['cascadeDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/location/group/{group-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete cwmsData location group with groupId
     * Deletes requested location group
     * @param {String} groupId The location group to be deleted
     * @param {String} categoryId Specifies the location category of the location group to be deleted
     * @param {String} office Specifies the owning office of the location group to be deleted
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascadeDelete Specifies whether to specifies whether to unassign any location assignments. Default: false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCwmsDataLocationGroupWithGroupId(groupId, categoryId, office, opts) {
      return this.deleteCwmsDataLocationGroupWithGroupIdWithHttpInfo(groupId, categoryId, office, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get cwmsData location group
     * Returns CWMS Location Groups Data
     * @param {Object} opts Optional parameters
     * @param {String} [office] Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned.
     * @param {Boolean} [includeAssigned] Include the assigned locations in the returned location groups. (default: false)
     * @param {String} [locationCategoryLike] Posix <a href=\"regexp.html\">regular expression</a> matching against the location category id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LocationGroup>} and HTTP response
     */
    getCwmsDataLocationGroupWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'office': opts['office'],
        'include-assigned': opts['includeAssigned'],
        'location-category-like': opts['locationCategoryLike']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [LocationGroup];
      return this.apiClient.callApi(
        '/cwms-data/location/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cwmsData location group
     * Returns CWMS Location Groups Data
     * @param {Object} opts Optional parameters
     * @param {String} opts.office Specifies the owning office of the location group(s) whose data is to be included in the response. If this field is not specified, matching location groups information from all offices shall be returned.
     * @param {Boolean} opts.includeAssigned Include the assigned locations in the returned location groups. (default: false)
     * @param {String} opts.locationCategoryLike Posix <a href=\"regexp.html\">regular expression</a> matching against the location category id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LocationGroup>}
     */
    getCwmsDataLocationGroup(opts) {
      return this.getCwmsDataLocationGroupWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get cwmsData location group with groupId
     * Retrieves requested Location Group
     * @param {String} groupId Specifies the location_group whose data is to be included in the response
     * @param {String} office Specifies the owning office of the location group whose data is to be included in the response.
     * @param {String} categoryId Specifies the category containing the location group whose data is to be included in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LocationGroup} and HTTP response
     */
    getCwmsDataLocationGroupWithGroupIdWithHttpInfo(groupId, office, categoryId) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getCwmsDataLocationGroupWithGroupId");
      }
      // verify the required parameter 'office' is set
      if (office === undefined || office === null) {
        throw new Error("Missing the required parameter 'office' when calling getCwmsDataLocationGroupWithGroupId");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCwmsDataLocationGroupWithGroupId");
      }

      let pathParams = {
        'group-id': groupId
      };
      let queryParams = {
        'office': office,
        'category-id': categoryId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv', 'application/geo+json'];
      let returnType = LocationGroup;
      return this.apiClient.callApi(
        '/cwms-data/location/group/{group-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cwmsData location group with groupId
     * Retrieves requested Location Group
     * @param {String} groupId Specifies the location_group whose data is to be included in the response
     * @param {String} office Specifies the owning office of the location group whose data is to be included in the response.
     * @param {String} categoryId Specifies the category containing the location group whose data is to be included in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LocationGroup}
     */
    getCwmsDataLocationGroupWithGroupId(groupId, office, categoryId) {
      return this.getCwmsDataLocationGroupWithGroupIdWithHttpInfo(groupId, office, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Patch cwmsData location group with groupId
     * Update existing LocationGroup
     * @param {String} groupId 
     * @param {String} office Specifies the owning office of the location group to be updated
     * @param {module:model/LocationGroup} locationGroup 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [replaceAssignedLocs] Specifies whether to unassign all existing locations before assigning new locations specified in the content body Default: false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchCwmsDataLocationGroupWithGroupIdWithHttpInfo(groupId, office, locationGroup, opts) {
      opts = opts || {};
      let postBody = locationGroup;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling patchCwmsDataLocationGroupWithGroupId");
      }
      // verify the required parameter 'office' is set
      if (office === undefined || office === null) {
        throw new Error("Missing the required parameter 'office' when calling patchCwmsDataLocationGroupWithGroupId");
      }
      // verify the required parameter 'locationGroup' is set
      if (locationGroup === undefined || locationGroup === null) {
        throw new Error("Missing the required parameter 'locationGroup' when calling patchCwmsDataLocationGroupWithGroupId");
      }

      let pathParams = {
        'group-id': groupId
      };
      let queryParams = {
        'replace-assigned-locs': opts['replaceAssignedLocs'],
        'office': office
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/location/group/{group-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Patch cwmsData location group with groupId
     * Update existing LocationGroup
     * @param {String} groupId 
     * @param {String} office Specifies the owning office of the location group to be updated
     * @param {module:model/LocationGroup} locationGroup 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.replaceAssignedLocs Specifies whether to unassign all existing locations before assigning new locations specified in the content body Default: false
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchCwmsDataLocationGroupWithGroupId(groupId, office, locationGroup, opts) {
      return this.patchCwmsDataLocationGroupWithGroupIdWithHttpInfo(groupId, office, locationGroup, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post cwmsData location group
     * Create new LocationGroup
     * @param {module:model/LocationGroup} locationGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postCwmsDataLocationGroupWithHttpInfo(locationGroup) {
      let postBody = locationGroup;
      // verify the required parameter 'locationGroup' is set
      if (locationGroup === undefined || locationGroup === null) {
        throw new Error("Missing the required parameter 'locationGroup' when calling postCwmsDataLocationGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/location/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post cwmsData location group
     * Create new LocationGroup
     * @param {module:model/LocationGroup} locationGroup 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    postCwmsDataLocationGroup(locationGroup) {
      return this.postCwmsDataLocationGroupWithHttpInfo(locationGroup)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
