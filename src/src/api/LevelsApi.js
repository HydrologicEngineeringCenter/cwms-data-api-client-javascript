/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CdaError from '../model/CdaError';
import LocationLevel from '../model/LocationLevel';
import LocationLevels from '../model/LocationLevels';
import SpecifiedLevel from '../model/SpecifiedLevel';

/**
* Levels service.
* @module api/LevelsApi
* @version 1.4.0
*/
export default class LevelsApi {

    /**
    * Constructs a new LevelsApi. 
    * @alias module:api/LevelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete cwmsData levels with levelId
     * Delete CWMS Location Level
     * @param {String} levelId Specifies the location level id of the Location Level to be deleted
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cascadeDelete] 
     * @param {String} [office] Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices.
     * @param {String} [effectiveDate] Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level.
     * @param {String} [timezone] Specifies the time zone of the value of the effective date field (unless otherwise specified).If this field is not specified, the default time zone of UTC shall be used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'levelId' is set
      if (levelId === undefined || levelId === null) {
        throw new Error("Missing the required parameter 'levelId' when calling deleteCwmsDataLevelsWithLevelId");
      }

      let pathParams = {
        'level-id': levelId
      };
      let queryParams = {
        'cascade-delete': opts['cascadeDelete'],
        'office': opts['office'],
        'effective-date': opts['effectiveDate'],
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/levels/{level-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete cwmsData levels with levelId
     * Delete CWMS Location Level
     * @param {String} levelId Specifies the location level id of the Location Level to be deleted
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascadeDelete 
     * @param {String} opts.office Specifies the owning office of the location level whose data is to be deleted. If this field is not specified, matching location level information will be deleted from all offices.
     * @param {String} opts.effectiveDate Specifies the effective date of the level to be deleted. If not provided will delete all data and reference to the location level.
     * @param {String} opts.timezone Specifies the time zone of the value of the effective date field (unless otherwise specified).If this field is not specified, the default time zone of UTC shall be used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCwmsDataLevelsWithLevelId(levelId, opts) {
      return this.deleteCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete cwmsData specifiedLevels with specifiedLevelId
     * Deletes requested specified level id
     * @param {String} specifiedLevelId The specified level id to be deleted
     * @param {String} office Specifies the owning office of the timeseries identifier to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCwmsDataSpecifiedLevelsWithSpecifiedLevelIdWithHttpInfo(specifiedLevelId, office) {
      let postBody = null;
      // verify the required parameter 'specifiedLevelId' is set
      if (specifiedLevelId === undefined || specifiedLevelId === null) {
        throw new Error("Missing the required parameter 'specifiedLevelId' when calling deleteCwmsDataSpecifiedLevelsWithSpecifiedLevelId");
      }
      // verify the required parameter 'office' is set
      if (office === undefined || office === null) {
        throw new Error("Missing the required parameter 'office' when calling deleteCwmsDataSpecifiedLevelsWithSpecifiedLevelId");
      }

      let pathParams = {
        'specified-level-id': specifiedLevelId
      };
      let queryParams = {
        'office': office
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/specified-levels/{specified-level-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete cwmsData specifiedLevels with specifiedLevelId
     * Deletes requested specified level id
     * @param {String} specifiedLevelId The specified level id to be deleted
     * @param {String} office Specifies the owning office of the timeseries identifier to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCwmsDataSpecifiedLevelsWithSpecifiedLevelId(specifiedLevelId, office) {
      return this.deleteCwmsDataSpecifiedLevelsWithSpecifiedLevelIdWithHttpInfo(specifiedLevelId, office)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get cwmsData levels
     * @param {Object} opts Optional parameters
     * @param {String} [levelIdMask] Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all.
     * @param {String} [office] Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
     * @param {String} [unit] Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
     * @param {String} [datum] Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
     * @param {String} [begin] Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
     * @param {String} [end] Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
     * @param {String} [timezone] Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
     * @param {String} [format] Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version=2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)  
     * @param {String} [page] This identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
     * @param {Number} [pageSize] How many entries per page returned. Default 100.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    getCwmsDataLevelsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'level-id-mask': opts['levelIdMask'],
        'office': opts['office'],
        'unit': opts['unit'],
        'datum': opts['datum'],
        'begin': opts['begin'],
        'end': opts['end'],
        'timezone': opts['timezone'],
        'format': opts['format'],
        'page': opts['page'],
        'page-size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '', 'application/json;version=2'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cwms-data/levels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cwmsData levels
     * @param {Object} opts Optional parameters
     * @param {String} opts.levelIdMask Specifies the name(s) of the location level(s) whose data is to be included in the response. Uses * for all.
     * @param {String} opts.office Specifies the owning office of the location level(s) whose data is to be included in the response. If this field is not specified, matching location level information from all offices shall be returned.
     * @param {String} opts.unit Specifies the unit or unit system of the response. Valid values for the unit field are:   1. EN.   Specifies English unit system.  Location level values will be in the default English units for their parameters.  2. SI.   Specifies the SI unit system.  Location level values will be in the default SI units for their parameters.  3. Other. Any unit returned in the response to the units URI request that is appropriate for the requested parameters.
     * @param {String} opts.datum Specifies the elevation datum of the response. This field affects only elevation location levels. Valid values for this field are:  1. NAVD88.  The elevation values will in the specified or default units above the NAVD-88 datum.  2. NGVD29.  The elevation values will be in the specified or default units above the NGVD-29 datum.
     * @param {String} opts.begin Specifies the start of the time window for data to be included in the response. If this field is not specified, any required time window begins 24 hours prior to the specified or default end time.
     * @param {String} opts.end Specifies the end of the time window for data to be included in the response. If this field is not specified, any required time window ends at the current time
     * @param {String} opts.timezone Specifies the time zone of the values of the begin and end fields (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
     * @param {String} opts.format Specifies the encoding format of the response. Requests specifying an Accept header:application/json;version=2 must not include this field. Valid format field values for this URI are:  1.    tab  2.    csv  3.    xml  4.    wml2 (only if name field is specified)  5.    json (default)  
     * @param {String} opts.page This identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
     * @param {Number} opts.pageSize How many entries per page returned. Default 100.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    getCwmsDataLevels(opts) {
      return this.getCwmsDataLevelsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get cwmsData levels with levelId
     * Retrieves requested Location Level
     * @param {String} levelId Specifies the requested location level.
     * @param {String} office Specifies the office of the Location Level to be returned
     * @param {String} effectiveDate Specifies the effective date of Location Level to be returned
     * @param {Object} opts Optional parameters
     * @param {String} [timezone] Specifies the time zone of the values of the effective date field (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
     * @param {String} [unit] Desired unit for the values retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LocationLevel} and HTTP response
     */
    getCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, office, effectiveDate, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'levelId' is set
      if (levelId === undefined || levelId === null) {
        throw new Error("Missing the required parameter 'levelId' when calling getCwmsDataLevelsWithLevelId");
      }
      // verify the required parameter 'office' is set
      if (office === undefined || office === null) {
        throw new Error("Missing the required parameter 'office' when calling getCwmsDataLevelsWithLevelId");
      }
      // verify the required parameter 'effectiveDate' is set
      if (effectiveDate === undefined || effectiveDate === null) {
        throw new Error("Missing the required parameter 'effectiveDate' when calling getCwmsDataLevelsWithLevelId");
      }

      let pathParams = {
        'level-id': levelId
      };
      let queryParams = {
        'office': office,
        'effective-date': effectiveDate,
        'timezone': opts['timezone'],
        'unit': opts['unit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json;version=2'];
      let returnType = LocationLevel;
      return this.apiClient.callApi(
        '/cwms-data/levels/{level-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cwmsData levels with levelId
     * Retrieves requested Location Level
     * @param {String} levelId Specifies the requested location level.
     * @param {String} office Specifies the office of the Location Level to be returned
     * @param {String} effectiveDate Specifies the effective date of Location Level to be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.timezone Specifies the time zone of the values of the effective date field (unless otherwise specified), as well as the time zone of any times in the response. If this field is not specified, the default time zone of UTC shall be used.
     * @param {String} opts.unit Desired unit for the values retrieved.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LocationLevel}
     */
    getCwmsDataLevelsWithLevelId(levelId, office, effectiveDate, opts) {
      return this.getCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, office, effectiveDate, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get cwmsData specifiedLevels
     * @param {Object} opts Optional parameters
     * @param {String} [office] Specifies the owning office of the Specified Levels whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
     * @param {String} [templateIdMask] Mask that specifies the IDs to be included in the response. If this field is not specified, all specified levels shall be returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SpecifiedLevel} and HTTP response
     */
    getCwmsDataSpecifiedLevelsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'office': opts['office'],
        'template-id-mask': opts['templateIdMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json;version=2'];
      let returnType = SpecifiedLevel;
      return this.apiClient.callApi(
        '/cwms-data/specified-levels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cwmsData specifiedLevels
     * @param {Object} opts Optional parameters
     * @param {String} opts.office Specifies the owning office of the Specified Levels whose data is to be included in the response. If this field is not specified, matching rating information from all offices shall be returned.
     * @param {String} opts.templateIdMask Mask that specifies the IDs to be included in the response. If this field is not specified, all specified levels shall be returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SpecifiedLevel}
     */
    getCwmsDataSpecifiedLevels(opts) {
      return this.getCwmsDataSpecifiedLevelsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Patch cwmsData levels with levelId
     * Update CWMS Location Level
     * @param {String} levelId Specifies the location level id of the Location Level to be updated
     * @param {module:model/LocationLevel} locationLevel 
     * @param {Object} opts Optional parameters
     * @param {String} [effectiveDate] Specifies the effective date of Location Level that will be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, locationLevel, opts) {
      opts = opts || {};
      let postBody = locationLevel;
      // verify the required parameter 'levelId' is set
      if (levelId === undefined || levelId === null) {
        throw new Error("Missing the required parameter 'levelId' when calling patchCwmsDataLevelsWithLevelId");
      }
      // verify the required parameter 'locationLevel' is set
      if (locationLevel === undefined || locationLevel === null) {
        throw new Error("Missing the required parameter 'locationLevel' when calling patchCwmsDataLevelsWithLevelId");
      }

      let pathParams = {
        'level-id': levelId
      };
      let queryParams = {
        'effective-date': opts['effectiveDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/levels/{level-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Patch cwmsData levels with levelId
     * Update CWMS Location Level
     * @param {String} levelId Specifies the location level id of the Location Level to be updated
     * @param {module:model/LocationLevel} locationLevel 
     * @param {Object} opts Optional parameters
     * @param {String} opts.effectiveDate Specifies the effective date of Location Level that will be updated
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchCwmsDataLevelsWithLevelId(levelId, locationLevel, opts) {
      return this.patchCwmsDataLevelsWithLevelIdWithHttpInfo(levelId, locationLevel, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Patch cwmsData specifiedLevels with specifiedLevelId
     * Renames the requested specified level id
     * @param {String} specifiedLevelId 
     * @param {String} specifiedLevelId2 The new specified level id.
     * @param {String} office Specifies the owning office of the specified level to be renamed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    patchCwmsDataSpecifiedLevelsWithSpecifiedLevelIdWithHttpInfo(specifiedLevelId, specifiedLevelId2, office) {
      let postBody = null;
      // verify the required parameter 'specifiedLevelId' is set
      if (specifiedLevelId === undefined || specifiedLevelId === null) {
        throw new Error("Missing the required parameter 'specifiedLevelId' when calling patchCwmsDataSpecifiedLevelsWithSpecifiedLevelId");
      }
      // verify the required parameter 'specifiedLevelId2' is set
      if (specifiedLevelId2 === undefined || specifiedLevelId2 === null) {
        throw new Error("Missing the required parameter 'specifiedLevelId2' when calling patchCwmsDataSpecifiedLevelsWithSpecifiedLevelId");
      }
      // verify the required parameter 'office' is set
      if (office === undefined || office === null) {
        throw new Error("Missing the required parameter 'office' when calling patchCwmsDataSpecifiedLevelsWithSpecifiedLevelId");
      }

      let pathParams = {
        'specified-level-id': specifiedLevelId
      };
      let queryParams = {
        'specified-level-id': specifiedLevelId2,
        'office': office
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/specified-levels/{specified-level-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Patch cwmsData specifiedLevels with specifiedLevelId
     * Renames the requested specified level id
     * @param {String} specifiedLevelId 
     * @param {String} specifiedLevelId2 The new specified level id.
     * @param {String} office Specifies the owning office of the specified level to be renamed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    patchCwmsDataSpecifiedLevelsWithSpecifiedLevelId(specifiedLevelId, specifiedLevelId2, office) {
      return this.patchCwmsDataSpecifiedLevelsWithSpecifiedLevelIdWithHttpInfo(specifiedLevelId, specifiedLevelId2, office)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post cwmsData levels
     * Create new CWMS Location Level
     * @param {module:model/LocationLevel} locationLevel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postCwmsDataLevelsWithHttpInfo(locationLevel) {
      let postBody = locationLevel;
      // verify the required parameter 'locationLevel' is set
      if (locationLevel === undefined || locationLevel === null) {
        throw new Error("Missing the required parameter 'locationLevel' when calling postCwmsDataLevels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/levels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post cwmsData levels
     * Create new CWMS Location Level
     * @param {module:model/LocationLevel} locationLevel 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    postCwmsDataLevels(locationLevel) {
      return this.postCwmsDataLevelsWithHttpInfo(locationLevel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post cwmsData specifiedLevels
     * Create new SpecifiedLevel
     * @param {module:model/SpecifiedLevel} specifiedLevel 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [failIfExists] Create will fail if provided ID already exists. Default: true
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postCwmsDataSpecifiedLevelsWithHttpInfo(specifiedLevel, opts) {
      opts = opts || {};
      let postBody = specifiedLevel;
      // verify the required parameter 'specifiedLevel' is set
      if (specifiedLevel === undefined || specifiedLevel === null) {
        throw new Error("Missing the required parameter 'specifiedLevel' when calling postCwmsDataSpecifiedLevels");
      }

      let pathParams = {
      };
      let queryParams = {
        'fail-if-exists': opts['failIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = ['application/json;version=2'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/specified-levels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post cwmsData specifiedLevels
     * Create new SpecifiedLevel
     * @param {module:model/SpecifiedLevel} specifiedLevel 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failIfExists Create will fail if provided ID already exists. Default: true
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    postCwmsDataSpecifiedLevels(specifiedLevel, opts) {
      return this.postCwmsDataSpecifiedLevelsWithHttpInfo(specifiedLevel, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
