/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Blobs from '../model/Blobs';
import CdaError from '../model/CdaError';

/**
* Blob service.
* @module api/BlobApi
* @version 1.4.0
*/
export default class BlobApi {

    /**
    * Constructs a new BlobApi. 
    * @alias module:api/BlobApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get cwmsData blobs
     * @param {Object} opts Optional parameters
     * @param {String} [office] Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
     * @param {String} [page] This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
     * @param {Number} [pageSize] How many entries per page returned. Default 20.
     * @param {String} [like] Posix <a href=\"regexp.html\">regular expression</a> describing the blob id's you want
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Blobs} and HTTP response
     */
    getCwmsDataBlobsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'office': opts['office'],
        'page': opts['page'],
        'page-size': opts['pageSize'],
        'like': opts['like']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/json;version=2', 'application/xml;version=2'];
      let returnType = Blobs;
      return this.apiClient.callApi(
        '/cwms-data/blobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cwmsData blobs
     * @param {Object} opts Optional parameters
     * @param {String} opts.office Specifies the owning office. If this field is not specified, matching information from all offices shall be returned.
     * @param {String} opts.page This end point can return a lot of data, this identifies where in the request you are. This is an opaque value, and can be obtained from the 'next-page' value in the response.
     * @param {Number} opts.pageSize How many entries per page returned. Default 20.
     * @param {String} opts.like Posix <a href=\"regexp.html\">regular expression</a> describing the blob id's you want
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Blobs}
     */
    getCwmsDataBlobs(opts) {
      return this.getCwmsDataBlobsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get cwmsData blobs with blobId
     * @param {String} blobId 
     * @param {Object} opts Optional parameters
     * @param {String} [office] Specifies the owning office.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getCwmsDataBlobsWithBlobIdWithHttpInfo(blobId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blobId' is set
      if (blobId === undefined || blobId === null) {
        throw new Error("Missing the required parameter 'blobId' when calling getCwmsDataBlobsWithBlobId");
      }

      let pathParams = {
        'blob-id': blobId
      };
      let queryParams = {
        'office': opts['office']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/blobs/{blob-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cwmsData blobs with blobId
     * @param {String} blobId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.office Specifies the owning office.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getCwmsDataBlobsWithBlobId(blobId, opts) {
      return this.getCwmsDataBlobsWithBlobIdWithHttpInfo(blobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post cwmsData blobs
     * Create new Blob
     * @param {Blob} blob 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [failIfExists] Create will fail if provided ID already exists. Default: true
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postCwmsDataBlobsWithHttpInfo(blob, opts) {
      opts = opts || {};
      let postBody = blob;
      // verify the required parameter 'blob' is set
      if (blob === undefined || blob === null) {
        throw new Error("Missing the required parameter 'blob' when calling postCwmsDataBlobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'fail-if-exists': opts['failIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey', 'CwmsAAACacAuth'];
      let contentTypes = ['application/json;version=2', 'application/xml;version=2'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cwms-data/blobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post cwmsData blobs
     * Create new Blob
     * @param {Blob} blob 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.failIfExists Create will fail if provided ID already exists. Default: true
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    postCwmsDataBlobs(blob, opts) {
      return this.postCwmsDataBlobsWithHttpInfo(blob, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
