/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  TimeseriesCategory,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    TimeseriesCategoryFromJSON,
    TimeseriesCategoryToJSON,
} from '../models/index';

export interface DeleteCwmsDataTimeSeriesCategoryWithCategoryIdRequest {
    categoryId: string;
    office: string;
    cascadeDelete?: boolean;
}

export interface GetTimeSeriesCategoryRequest {
    office?: string;
}

export interface GetTimeSeriesCategoryWithCategoryIdRequest {
    categoryId: string;
    office: string;
}

export interface PostCwmsDataTimeSeriesCategoryRequest {
    timeseriesCategory: TimeseriesCategory;
    failIfExists?: boolean;
}

/**
 * 
 */
export class TimeSeriesCategoriesApi extends runtime.BaseAPI {

    /**
     * Deletes requested time series category
     * Delete CwmsData timeseries category with categoryId
     */
    async deleteCwmsDataTimeSeriesCategoryWithCategoryIdRaw(requestParameters: DeleteCwmsDataTimeSeriesCategoryWithCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling deleteCwmsDataTimeSeriesCategoryWithCategoryId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataTimeSeriesCategoryWithCategoryId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['cascadeDelete'] != null) {
            queryParameters['cascade-delete'] = requestParameters['cascadeDelete'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/category/{category-id}`.replace(`{${"category-id"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested time series category
     * Delete CwmsData timeseries category with categoryId
     */
    async deleteCwmsDataTimeSeriesCategoryWithCategoryId(requestParameters: DeleteCwmsDataTimeSeriesCategoryWithCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataTimeSeriesCategoryWithCategoryIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns CWMS timeseries category Data
     * Get CwmsData timeseries category
     */
    async getTimeSeriesCategoryRaw(requestParameters: GetTimeSeriesCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeseriesCategory>>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeseriesCategoryFromJSON));
    }

    /**
     * Returns CWMS timeseries category Data
     * Get CwmsData timeseries category
     */
    async getTimeSeriesCategory(requestParameters: GetTimeSeriesCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeseriesCategory>> {
        const response = await this.getTimeSeriesCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested timeseries category
     * Get CwmsData timeseries category with categoryId
     */
    async getTimeSeriesCategoryWithCategoryIdRaw(requestParameters: GetTimeSeriesCategoryWithCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeseriesCategory>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getTimeSeriesCategoryWithCategoryId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getTimeSeriesCategoryWithCategoryId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/category/{category-id}`.replace(`{${"category-id"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesCategoryFromJSON(jsonValue));
    }

    /**
     * Retrieves requested timeseries category
     * Get CwmsData timeseries category with categoryId
     */
    async getTimeSeriesCategoryWithCategoryId(requestParameters: GetTimeSeriesCategoryWithCategoryIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeseriesCategory> {
        const response = await this.getTimeSeriesCategoryWithCategoryIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new TimeSeriesCategory
     * Post CwmsData timeseries category
     */
    async postCwmsDataTimeSeriesCategoryRaw(requestParameters: PostCwmsDataTimeSeriesCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseriesCategory'] == null) {
            throw new runtime.RequiredError(
                'timeseriesCategory',
                'Required parameter "timeseriesCategory" was null or undefined when calling postCwmsDataTimeSeriesCategory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesCategoryToJSON(requestParameters['timeseriesCategory']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new TimeSeriesCategory
     * Post CwmsData timeseries category
     */
    async postCwmsDataTimeSeriesCategory(requestParameters: PostCwmsDataTimeSeriesCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataTimeSeriesCategoryRaw(requestParameters, initOverrides);
    }

}
