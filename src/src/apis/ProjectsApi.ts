/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  Project,
  Projects,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectsFromJSON,
    ProjectsToJSON,
} from '../models/index';

export interface DeleteCwmsDataProjectsWithNameRequest {
    name: string;
    office: string;
    method?: DeleteMethod;
}

export interface GetCwmsDataProjectsRequest {
    office?: string;
    idMask?: string;
    page?: string;
    pageSize?: number;
}

export interface GetCwmsDataProjectsWithNameRequest {
    name: string;
    office: string;
}

export interface PatchCwmsDataProjectsWithNameRequest {
    name: string;
    project: Project;
}

export interface PostCwmsDataProjectsRequest {
    project: Project;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * Deletes requested reservoir project
     * Delete cwmsData projects with name
     */
    async deleteCwmsDataProjectsWithNameRaw(requestParameters: DeleteCwmsDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataProjectsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested reservoir project
     * Delete cwmsData projects with name
     */
    async deleteCwmsDataProjectsWithName(requestParameters: DeleteCwmsDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns Projects Data
     * Get cwmsData projects
     */
    async getCwmsDataProjectsRaw(requestParameters: GetCwmsDataProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Projects>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['idMask'] != null) {
            queryParameters['id-mask'] = requestParameters['idMask'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsFromJSON(jsonValue));
    }

    /**
     * Returns Projects Data
     * Get cwmsData projects
     */
    async getCwmsDataProjects(requestParameters: GetCwmsDataProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Projects> {
        const response = await this.getCwmsDataProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested Project
     * Get cwmsData projects with name
     */
    async getCwmsDataProjectsWithNameRaw(requestParameters: GetCwmsDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataProjectsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataProjectsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Retrieves requested Project
     * Get cwmsData projects with name
     */
    async getCwmsDataProjectsWithName(requestParameters: GetCwmsDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.getCwmsDataProjectsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a project
     * Patch cwmsData projects with name
     */
    async patchCwmsDataProjectsWithNameRaw(requestParameters: PatchCwmsDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataProjectsWithName().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling patchCwmsDataProjectsWithName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a project
     * Patch cwmsData projects with name
     */
    async patchCwmsDataProjectsWithName(requestParameters: PatchCwmsDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataProjectsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create new Project
     * Post cwmsData projects
     */
    async postCwmsDataProjectsRaw(requestParameters: PostCwmsDataProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling postCwmsDataProjects().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new Project
     * Post cwmsData projects
     */
    async postCwmsDataProjects(requestParameters: PostCwmsDataProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataProjectsRaw(requestParameters, initOverrides);
    }

}
