/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  Project,
  ProjectChildLocations,
  Projects,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    ProjectChildLocationsFromJSON,
    ProjectChildLocationsToJSON,
    ProjectsFromJSON,
    ProjectsToJSON,
} from '../models/index';

export interface DeleteSwtDataProjectsWithNameRequest {
    name: string;
    office: string;
    method?: DeleteMethod;
}

export interface GetSwtDataProjectsRequest {
    office?: string;
    idMask?: string;
    page?: string;
    pageSize?: number;
}

export interface GetSwtDataProjectsLocationsRequest {
    office: string;
    projectLike?: string;
    locationKindLike?: string;
}

export interface GetSwtDataProjectsWithNameRequest {
    name: string;
    office: string;
}

export interface PatchSwtDataProjectsWithNameRequest {
    name: string;
    name2: string;
    project: Project;
    office?: string;
}

export interface PostSwtDataProjectsRequest {
    project: Project;
    failIfExists?: boolean;
}

export interface PostSwtDataProjectsStatusUpdateWithNameRequest {
    name: string;
    office: string;
    applicationId: string;
    sourceId?: string;
    timeseriesId?: string;
    begin?: string;
    end?: string;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * Deletes requested reservoir project
     * Delete swtData projects with name
     */
    async deleteSwtDataProjectsWithNameRaw(requestParameters: DeleteSwtDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested reservoir project
     * Delete swtData projects with name
     */
    async deleteSwtDataProjectsWithName(requestParameters: DeleteSwtDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns Projects Data
     * Get swtData projects
     */
    async getSwtDataProjectsRaw(requestParameters: GetSwtDataProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Projects>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['idMask'] != null) {
            queryParameters['id-mask'] = requestParameters['idMask'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsFromJSON(jsonValue));
    }

    /**
     * Returns Projects Data
     * Get swtData projects
     */
    async getSwtDataProjects(requestParameters: GetSwtDataProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Projects> {
        const response = await this.getSwtDataProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of project child locations
     * Get swtData projects locations
     */
    async getSwtDataProjectsLocationsRaw(requestParameters: GetSwtDataProjectsLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectChildLocations>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsLocations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['projectLike'] != null) {
            queryParameters['project-like'] = requestParameters['projectLike'];
        }

        if (requestParameters['locationKindLike'] != null) {
            queryParameters['location-kind-like'] = requestParameters['locationKindLike'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectChildLocationsFromJSON));
    }

    /**
     * Get a list of project child locations
     * Get swtData projects locations
     */
    async getSwtDataProjectsLocations(requestParameters: GetSwtDataProjectsLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectChildLocations>> {
        const response = await this.getSwtDataProjectsLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested Project
     * Get swtData projects with name
     */
    async getSwtDataProjectsWithNameRaw(requestParameters: GetSwtDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataProjectsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Retrieves requested Project
     * Get swtData projects with name
     */
    async getSwtDataProjectsWithName(requestParameters: GetSwtDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.getSwtDataProjectsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename a project
     * Patch swtData projects with name
     */
    async patchSwtDataProjectsWithNameRaw(requestParameters: PatchSwtDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataProjectsWithName().'
            );
        }

        if (requestParameters['name2'] == null) {
            throw new runtime.RequiredError(
                'name2',
                'Required parameter "name2" was null or undefined when calling patchSwtDataProjectsWithName().'
            );
        }

        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling patchSwtDataProjectsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name2'] != null) {
            queryParameters['name'] = requestParameters['name2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename a project
     * Patch swtData projects with name
     */
    async patchSwtDataProjectsWithName(requestParameters: PatchSwtDataProjectsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataProjectsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create new Project
     * Post swtData projects
     */
    async postSwtDataProjectsRaw(requestParameters: PostSwtDataProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling postSwtDataProjects().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters['project']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new Project
     * Post swtData projects
     */
    async postSwtDataProjects(requestParameters: PostSwtDataProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsRaw(requestParameters, initOverrides);
    }

    /**
     * Publishes a message on the office\'s STATUS queue that a project has been updated for a specified application
     * Post swtData projects statusUpdate with name
     */
    async postSwtDataProjectsStatusUpdateWithNameRaw(requestParameters: PostSwtDataProjectsStatusUpdateWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling postSwtDataProjectsStatusUpdateWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postSwtDataProjectsStatusUpdateWithName().'
            );
        }

        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling postSwtDataProjectsStatusUpdateWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['applicationId'] != null) {
            queryParameters['application-id'] = requestParameters['applicationId'];
        }

        if (requestParameters['sourceId'] != null) {
            queryParameters['source-id'] = requestParameters['sourceId'];
        }

        if (requestParameters['timeseriesId'] != null) {
            queryParameters['timeseries-id'] = requestParameters['timeseriesId'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/status-update/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publishes a message on the office\'s STATUS queue that a project has been updated for a specified application
     * Post swtData projects statusUpdate with name
     */
    async postSwtDataProjectsStatusUpdateWithName(requestParameters: PostSwtDataProjectsStatusUpdateWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsStatusUpdateWithNameRaw(requestParameters, initOverrides);
    }

}
