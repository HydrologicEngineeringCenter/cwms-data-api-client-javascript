/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  Turbine,
  TurbineChange,
  UnitSystem,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    TurbineFromJSON,
    TurbineToJSON,
    TurbineChangeFromJSON,
    TurbineChangeToJSON,
    UnitSystemFromJSON,
    UnitSystemToJSON,
} from '../models/index';

export interface DeleteSwtDataProjectsTurbinesWithNameRequest {
    name: string;
    office: string;
    method?: DeleteMethod;
}

export interface DeleteSwtDataProjectsWithOfficeWithNameTurbineChangesRequest {
    office: string;
    name: string;
    begin: string;
    end: string;
    overrideProtection?: boolean;
}

export interface GetSwtDataProjectsTurbinesRequest {
    office: string;
    projectId: string;
}

export interface GetSwtDataProjectsTurbinesWithNameRequest {
    name: string;
    office: string;
}

export interface GetSwtDataProjectsWithOfficeWithNameTurbineChangesRequest {
    office: string;
    name: string;
    begin: string;
    end: string;
    startTimeInclusive?: boolean;
    endTimeInclusive?: boolean;
    unitSystem?: UnitSystem;
    pageSize?: number;
}

export interface PatchSwtDataProjectsTurbinesWithNameRequest {
    name: string;
    name2: string;
    office: string;
}

export interface PostSwtDataProjectsTurbinesRequest {
    turbine: Turbine;
    failIfExists?: boolean;
}

export interface PostSwtDataProjectsWithOfficeWithNameTurbineChangesRequest {
    office: string;
    name: string;
    turbineChange: TurbineChange;
    overrideProtection?: boolean;
}

/**
 * 
 */
export class TurbinesApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Turbine
     * Delete swtData projects turbines with name
     */
    async deleteSwtDataProjectsTurbinesWithNameRaw(requestParameters: DeleteSwtDataProjectsTurbinesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectsTurbinesWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsTurbinesWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/turbines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Turbine
     * Delete swtData projects turbines with name
     */
    async deleteSwtDataProjectsTurbinesWithName(requestParameters: DeleteSwtDataProjectsTurbinesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsTurbinesWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Delete CWMS Turbine Changes
     * Delete swtData projects with office with name turbineChanges
     */
    async deleteSwtDataProjectsWithOfficeWithNameTurbineChangesRaw(requestParameters: DeleteSwtDataProjectsWithOfficeWithNameTurbineChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['overrideProtection'] != null) {
            queryParameters['override-protection'] = requestParameters['overrideProtection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{name}/turbine-changes`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Turbine Changes
     * Delete swtData projects with office with name turbineChanges
     */
    async deleteSwtDataProjectsWithOfficeWithNameTurbineChanges(requestParameters: DeleteSwtDataProjectsWithOfficeWithNameTurbineChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithOfficeWithNameTurbineChangesRaw(requestParameters, initOverrides);
    }

    /**
     * Returns matching CWMS Turbine Data for a Reservoir Project.
     * Get swtData projects turbines
     */
    async getSwtDataProjectsTurbinesRaw(requestParameters: GetSwtDataProjectsTurbinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Turbine>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsTurbines().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsTurbines().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['project-id'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/turbines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TurbineFromJSON));
    }

    /**
     * Returns matching CWMS Turbine Data for a Reservoir Project.
     * Get swtData projects turbines
     */
    async getSwtDataProjectsTurbines(requestParameters: GetSwtDataProjectsTurbinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Turbine>> {
        const response = await this.getSwtDataProjectsTurbinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Turbine Data
     * Get swtData projects turbines with name
     */
    async getSwtDataProjectsTurbinesWithNameRaw(requestParameters: GetSwtDataProjectsTurbinesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Turbine>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataProjectsTurbinesWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsTurbinesWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/turbines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TurbineFromJSON(jsonValue));
    }

    /**
     * Returns CWMS Turbine Data
     * Get swtData projects turbines with name
     */
    async getSwtDataProjectsTurbinesWithName(requestParameters: GetSwtDataProjectsTurbinesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Turbine> {
        const response = await this.getSwtDataProjectsTurbinesWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns matching CWMS Turbine Change Data for a Reservoir Project.
     * Get swtData projects with office with name turbineChanges
     */
    async getSwtDataProjectsWithOfficeWithNameTurbineChangesRaw(requestParameters: GetSwtDataProjectsWithOfficeWithNameTurbineChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TurbineChange>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling getSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['startTimeInclusive'] != null) {
            queryParameters['start-time-inclusive'] = requestParameters['startTimeInclusive'];
        }

        if (requestParameters['endTimeInclusive'] != null) {
            queryParameters['end-time-inclusive'] = requestParameters['endTimeInclusive'];
        }

        if (requestParameters['unitSystem'] != null) {
            queryParameters['unit-system'] = requestParameters['unitSystem'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{name}/turbine-changes`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TurbineChangeFromJSON));
    }

    /**
     * Returns matching CWMS Turbine Change Data for a Reservoir Project.
     * Get swtData projects with office with name turbineChanges
     */
    async getSwtDataProjectsWithOfficeWithNameTurbineChanges(requestParameters: GetSwtDataProjectsWithOfficeWithNameTurbineChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TurbineChange>> {
        const response = await this.getSwtDataProjectsWithOfficeWithNameTurbineChangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename CWMS Turbine
     * Patch swtData projects turbines with name
     */
    async patchSwtDataProjectsTurbinesWithNameRaw(requestParameters: PatchSwtDataProjectsTurbinesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataProjectsTurbinesWithName().'
            );
        }

        if (requestParameters['name2'] == null) {
            throw new runtime.RequiredError(
                'name2',
                'Required parameter "name2" was null or undefined when calling patchSwtDataProjectsTurbinesWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataProjectsTurbinesWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name2'] != null) {
            queryParameters['name'] = requestParameters['name2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/turbines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename CWMS Turbine
     * Patch swtData projects turbines with name
     */
    async patchSwtDataProjectsTurbinesWithName(requestParameters: PatchSwtDataProjectsTurbinesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataProjectsTurbinesWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Turbine
     * Post swtData projects turbines
     */
    async postSwtDataProjectsTurbinesRaw(requestParameters: PostSwtDataProjectsTurbinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['turbine'] == null) {
            throw new runtime.RequiredError(
                'turbine',
                'Required parameter "turbine" was null or undefined when calling postSwtDataProjectsTurbines().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/turbines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TurbineToJSON(requestParameters['turbine']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Turbine
     * Post swtData projects turbines
     */
    async postSwtDataProjectsTurbines(requestParameters: PostSwtDataProjectsTurbinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsTurbinesRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Turbine Changes
     * Post swtData projects with office with name turbineChanges
     */
    async postSwtDataProjectsWithOfficeWithNameTurbineChangesRaw(requestParameters: PostSwtDataProjectsWithOfficeWithNameTurbineChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling postSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        if (requestParameters['turbineChange'] == null) {
            throw new runtime.RequiredError(
                'turbineChange',
                'Required parameter "turbineChange" was null or undefined when calling postSwtDataProjectsWithOfficeWithNameTurbineChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['overrideProtection'] != null) {
            queryParameters['override-protection'] = requestParameters['overrideProtection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{name}/turbine-changes`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TurbineChangeToJSON(requestParameters['turbineChange']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Turbine Changes
     * Post swtData projects with office with name turbineChanges
     */
    async postSwtDataProjectsWithOfficeWithNameTurbineChanges(requestParameters: PostSwtDataProjectsWithOfficeWithNameTurbineChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsWithOfficeWithNameTurbineChangesRaw(requestParameters, initOverrides);
    }

}
