/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DatabaseLoadMethod,
  DeleteMethod,
  RatingSpec,
  RatingSpecs,
  RatingTemplate,
  RatingTemplates,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DatabaseLoadMethodFromJSON,
    DatabaseLoadMethodToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    RatingSpecFromJSON,
    RatingSpecToJSON,
    RatingSpecsFromJSON,
    RatingSpecsToJSON,
    RatingTemplateFromJSON,
    RatingTemplateToJSON,
    RatingTemplatesFromJSON,
    RatingTemplatesToJSON,
} from '../models/index';

export interface DeleteCwmsDataRatingsSpecWithRatingIdRequest {
    ratingId: string;
    office: string;
    method: DeleteMethod;
}

export interface DeleteCwmsDataRatingsTemplateWithTemplateIdRequest {
    templateId: string;
    office: string;
    method: DeleteMethod;
}

export interface DeleteCwmsDataRatingsWithRatingIdRequest {
    ratingId: string;
    office: string;
    begin: string;
    end: string;
    timezone?: string;
}

export interface GetCwmsDataRatingsRequest {
    name?: string;
    office?: string;
    unit?: string;
    datum?: string;
    at?: string;
    end?: string;
    timezone?: string;
    format?: string;
}

export interface GetCwmsDataRatingsSpecRequest {
    office?: string;
    ratingIdMask?: string;
    page?: string;
    pageSize?: number;
}

export interface GetCwmsDataRatingsSpecWithRatingIdRequest {
    ratingId: string;
    office: string;
}

export interface GetCwmsDataRatingsTemplateRequest {
    office?: string;
    templateIdMask?: string;
    page?: string;
    pageSize?: number;
}

export interface GetCwmsDataRatingsTemplateWithTemplateIdRequest {
    templateId: string;
    office: string;
}

export interface GetCwmsDataRatingsWithRatingIdRequest {
    ratingId: string;
    office: string;
    begin?: string;
    end?: string;
    timezone?: string;
    method?: DatabaseLoadMethod;
}

export interface PatchCwmsDataRatingsWithRatingIdRequest {
    ratingId: string;
    body: object;
    storeTemplate?: boolean;
}

export interface PostCwmsDataRatingsRequest {
    body: object;
    storeTemplate?: boolean;
}

export interface PostCwmsDataRatingsSpecRequest {
    ratingSpec: RatingSpec;
    failIfExists?: boolean;
}

export interface PostCwmsDataRatingsTemplateRequest {
    ratingTemplate: RatingTemplate;
    failIfExists?: boolean;
}

/**
 * 
 */
export class RatingsApi extends runtime.BaseAPI {

    /**
     * Deletes requested rating specification
     * Delete cwmsData ratings spec with ratingId
     */
    async deleteCwmsDataRatingsSpecWithRatingIdRaw(requestParameters: DeleteCwmsDataRatingsSpecWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling deleteCwmsDataRatingsSpecWithRatingId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataRatingsSpecWithRatingId().'
            );
        }

        if (requestParameters['method'] == null) {
            throw new runtime.RequiredError(
                'method',
                'Required parameter "method" was null or undefined when calling deleteCwmsDataRatingsSpecWithRatingId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/ratings/spec/{rating-id}`.replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested rating specification
     * Delete cwmsData ratings spec with ratingId
     */
    async deleteCwmsDataRatingsSpecWithRatingId(requestParameters: DeleteCwmsDataRatingsSpecWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataRatingsSpecWithRatingIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes requested rating specification
     * Delete cwmsData ratings template with templateId
     */
    async deleteCwmsDataRatingsTemplateWithTemplateIdRaw(requestParameters: DeleteCwmsDataRatingsTemplateWithTemplateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling deleteCwmsDataRatingsTemplateWithTemplateId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataRatingsTemplateWithTemplateId().'
            );
        }

        if (requestParameters['method'] == null) {
            throw new runtime.RequiredError(
                'method',
                'Required parameter "method" was null or undefined when calling deleteCwmsDataRatingsTemplateWithTemplateId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/ratings/template/{template-id}`.replace(`{${"template-id"}}`, encodeURIComponent(String(requestParameters['templateId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested rating specification
     * Delete cwmsData ratings template with templateId
     */
    async deleteCwmsDataRatingsTemplateWithTemplateId(requestParameters: DeleteCwmsDataRatingsTemplateWithTemplateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataRatingsTemplateWithTemplateIdRaw(requestParameters, initOverrides);
    }

    /**
     * Delete cwmsData ratings with ratingId
     */
    async deleteCwmsDataRatingsWithRatingIdRaw(requestParameters: DeleteCwmsDataRatingsWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling deleteCwmsDataRatingsWithRatingId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataRatingsWithRatingId().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling deleteCwmsDataRatingsWithRatingId().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling deleteCwmsDataRatingsWithRatingId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/ratings/{rating-id}`.replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete cwmsData ratings with ratingId
     */
    async deleteCwmsDataRatingsWithRatingId(requestParameters: DeleteCwmsDataRatingsWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataRatingsWithRatingIdRaw(requestParameters, initOverrides);
    }

    /**
     * Get cwmsData ratings
     */
    async getCwmsDataRatingsRaw(requestParameters: GetCwmsDataRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['datum'] != null) {
            queryParameters['datum'] = requestParameters['datum'];
        }

        if (requestParameters['at'] != null) {
            queryParameters['at'] = requestParameters['at'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ratings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get cwmsData ratings
     */
    async getCwmsDataRatings(requestParameters: GetCwmsDataRatingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getCwmsDataRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cwmsData ratings spec
     */
    async getCwmsDataRatingsSpecRaw(requestParameters: GetCwmsDataRatingsSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingSpecs>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['ratingIdMask'] != null) {
            queryParameters['rating-id-mask'] = requestParameters['ratingIdMask'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ratings/spec`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingSpecsFromJSON(jsonValue));
    }

    /**
     * Get cwmsData ratings spec
     */
    async getCwmsDataRatingsSpec(requestParameters: GetCwmsDataRatingsSpecRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingSpecs> {
        const response = await this.getCwmsDataRatingsSpecRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cwmsData ratings spec with ratingId
     */
    async getCwmsDataRatingsSpecWithRatingIdRaw(requestParameters: GetCwmsDataRatingsSpecWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingSpec>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling getCwmsDataRatingsSpecWithRatingId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataRatingsSpecWithRatingId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ratings/spec/{rating-id}`.replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingSpecFromJSON(jsonValue));
    }

    /**
     * Get cwmsData ratings spec with ratingId
     */
    async getCwmsDataRatingsSpecWithRatingId(requestParameters: GetCwmsDataRatingsSpecWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingSpec> {
        const response = await this.getCwmsDataRatingsSpecWithRatingIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cwmsData ratings template
     */
    async getCwmsDataRatingsTemplateRaw(requestParameters: GetCwmsDataRatingsTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatingTemplates>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['templateIdMask'] != null) {
            queryParameters['template-id-mask'] = requestParameters['templateIdMask'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ratings/template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingTemplatesFromJSON(jsonValue));
    }

    /**
     * Get cwmsData ratings template
     */
    async getCwmsDataRatingsTemplate(requestParameters: GetCwmsDataRatingsTemplateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatingTemplates> {
        const response = await this.getCwmsDataRatingsTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cwmsData ratings template with templateId
     */
    async getCwmsDataRatingsTemplateWithTemplateIdRaw(requestParameters: GetCwmsDataRatingsTemplateWithTemplateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatingTemplate>>> {
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling getCwmsDataRatingsTemplateWithTemplateId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataRatingsTemplateWithTemplateId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ratings/template/{template-id}`.replace(`{${"template-id"}}`, encodeURIComponent(String(requestParameters['templateId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingTemplateFromJSON));
    }

    /**
     * Get cwmsData ratings template with templateId
     */
    async getCwmsDataRatingsTemplateWithTemplateId(requestParameters: GetCwmsDataRatingsTemplateWithTemplateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatingTemplate>> {
        const response = await this.getCwmsDataRatingsTemplateWithTemplateIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Rating Data
     * Get cwmsData ratings with ratingId
     */
    async getCwmsDataRatingsWithRatingIdRaw(requestParameters: GetCwmsDataRatingsWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling getCwmsDataRatingsWithRatingId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataRatingsWithRatingId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ratings/{rating-id}`.replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns CWMS Rating Data
     * Get cwmsData ratings with ratingId
     */
    async getCwmsDataRatingsWithRatingId(requestParameters: GetCwmsDataRatingsWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getCwmsDataRatingsWithRatingIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a RatingSet
     * Patch cwmsData ratings with ratingId
     */
    async patchCwmsDataRatingsWithRatingIdRaw(requestParameters: PatchCwmsDataRatingsWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingId'] == null) {
            throw new runtime.RequiredError(
                'ratingId',
                'Required parameter "ratingId" was null or undefined when calling patchCwmsDataRatingsWithRatingId().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchCwmsDataRatingsWithRatingId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['storeTemplate'] != null) {
            queryParameters['store-template'] = requestParameters['storeTemplate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/xml;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/ratings/{rating-id}`.replace(`{${"rating-id"}}`, encodeURIComponent(String(requestParameters['ratingId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a RatingSet
     * Patch cwmsData ratings with ratingId
     */
    async patchCwmsDataRatingsWithRatingId(requestParameters: PatchCwmsDataRatingsWithRatingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataRatingsWithRatingIdRaw(requestParameters, initOverrides);
    }

    /**
     * Create new RatingSet
     * Post cwmsData ratings
     */
    async postCwmsDataRatingsRaw(requestParameters: PostCwmsDataRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postCwmsDataRatings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['storeTemplate'] != null) {
            queryParameters['store-template'] = requestParameters['storeTemplate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/xml;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/ratings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new RatingSet
     * Post cwmsData ratings
     */
    async postCwmsDataRatings(requestParameters: PostCwmsDataRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataRatingsRaw(requestParameters, initOverrides);
    }

    /**
     * Create new Rating Specification
     * Post cwmsData ratings spec
     */
    async postCwmsDataRatingsSpecRaw(requestParameters: PostCwmsDataRatingsSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingSpec'] == null) {
            throw new runtime.RequiredError(
                'ratingSpec',
                'Required parameter "ratingSpec" was null or undefined when calling postCwmsDataRatingsSpec().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/xml;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/ratings/spec`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatingSpecToJSON(requestParameters['ratingSpec']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new Rating Specification
     * Post cwmsData ratings spec
     */
    async postCwmsDataRatingsSpec(requestParameters: PostCwmsDataRatingsSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataRatingsSpecRaw(requestParameters, initOverrides);
    }

    /**
     * Create new Rating Template
     * Post cwmsData ratings template
     */
    async postCwmsDataRatingsTemplateRaw(requestParameters: PostCwmsDataRatingsTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ratingTemplate'] == null) {
            throw new runtime.RequiredError(
                'ratingTemplate',
                'Required parameter "ratingTemplate" was null or undefined when calling postCwmsDataRatingsTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/xml;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/ratings/template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatingTemplateToJSON(requestParameters['ratingTemplate']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new Rating Template
     * Post cwmsData ratings template
     */
    async postCwmsDataRatingsTemplate(requestParameters: PostCwmsDataRatingsTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataRatingsTemplateRaw(requestParameters, initOverrides);
    }

}
