/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Basin,
  CdaError,
  DeleteMethod,
} from '../models/index';
import {
    BasinFromJSON,
    BasinToJSON,
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
} from '../models/index';

export interface DeleteCwmsDataBasinsWithNameRequest {
    name: string;
    office: string;
    method: DeleteMethod;
}

export interface GetBasinsRequest {
    office?: string;
    unit?: string;
}

export interface GetBasinsWithNameRequest {
    name: string;
    office: string;
    unit?: string;
}

export interface PatchCwmsDataBasinsWithNameRequest {
    name: string;
    name2: string;
    office: string;
}

/**
 * 
 */
export class BasinsApi extends runtime.BaseAPI {

    /**
     * Renames CWMS Basin
     * Delete CwmsData basins with name
     */
    async deleteCwmsDataBasinsWithNameRaw(requestParameters: DeleteCwmsDataBasinsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataBasinsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataBasinsWithName().'
            );
        }

        if (requestParameters['method'] == null) {
            throw new runtime.RequiredError(
                'method',
                'Required parameter "method" was null or undefined when calling deleteCwmsDataBasinsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/basins/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames CWMS Basin
     * Delete CwmsData basins with name
     */
    async deleteCwmsDataBasinsWithName(requestParameters: DeleteCwmsDataBasinsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataBasinsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns CWMS Basin Data
     * Get CwmsData basins
     */
    async getBasinsRaw(requestParameters: GetBasinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Basin>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/basins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasinFromJSON(jsonValue));
    }

    /**
     * Returns CWMS Basin Data
     * Get CwmsData basins
     */
    async getBasins(requestParameters: GetBasinsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Basin> {
        const response = await this.getBasinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Basin Data
     * Get CwmsData basins with name
     */
    async getBasinsWithNameRaw(requestParameters: GetBasinsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Basin>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getBasinsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getBasinsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/basins/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasinFromJSON(jsonValue));
    }

    /**
     * Returns CWMS Basin Data
     * Get CwmsData basins with name
     */
    async getBasinsWithName(requestParameters: GetBasinsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Basin> {
        const response = await this.getBasinsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Renames CWMS Basin
     * Patch CwmsData basins with name
     */
    async patchCwmsDataBasinsWithNameRaw(requestParameters: PatchCwmsDataBasinsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataBasinsWithName().'
            );
        }

        if (requestParameters['name2'] == null) {
            throw new runtime.RequiredError(
                'name2',
                'Required parameter "name2" was null or undefined when calling patchCwmsDataBasinsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchCwmsDataBasinsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name2'] != null) {
            queryParameters['name'] = requestParameters['name2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/basins/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames CWMS Basin
     * Patch CwmsData basins with name
     */
    async patchCwmsDataBasinsWithName(requestParameters: PatchCwmsDataBasinsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataBasinsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Creates CWMS Basin
     * Post CwmsData basins
     */
    async postCwmsDataBasinsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/basins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates CWMS Basin
     * Post CwmsData basins
     */
    async postCwmsDataBasins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataBasinsRaw(initOverrides);
    }

}
