/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  StoreRule,
  Timeseries,
  Tsv,
  UnitSystem,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    StoreRuleFromJSON,
    StoreRuleToJSON,
    TimeseriesFromJSON,
    TimeseriesToJSON,
    TsvFromJSON,
    TsvToJSON,
    UnitSystemFromJSON,
    UnitSystemToJSON,
} from '../models/index';

export interface DeleteCwmsDataTimeseriesWithTimeseriesRequest {
    timeseries: string;
    office: string;
    begin: string;
    end: string;
    timezone?: string;
    versionDate?: string;
    startTimeInclusive?: boolean;
    endTimeInclusive?: boolean;
    maxVersion?: boolean;
    overrideProtection?: boolean;
}

export interface GetCwmsDataTimeseriesRequest {
    name: string;
    office?: string;
    unit?: string;
    versionDate?: string;
    datum?: string;
    begin?: string;
    end?: string;
    timezone?: string;
    trim?: boolean;
    format?: string;
    page?: string;
    pageSize?: number;
}

export interface GetCwmsDataTimeseriesRecentRequest {
    office?: string;
    categoryId?: string;
    groupId?: string;
    tsIds?: string;
    unitSystem?: UnitSystem;
}

export interface PatchCwmsDataTimeseriesWithTimeseriesRequest {
    timeseries: string;
    timeseries2: Timeseries;
    timezone?: string;
    createAsLrts?: boolean;
    storeRule?: StoreRule;
    overrideProtection?: boolean;
}

export interface PostCwmsDataTimeseriesRequest {
    timeseries: Timeseries;
    timezone?: string;
    createAsLrts?: boolean;
    storeRule?: StoreRule;
    overrideProtection?: boolean;
}

/**
 * 
 */
export class TimeseriesApi extends runtime.BaseAPI {

    /**
     * Delete cwmsData timeseries with timeseries
     */
    async deleteCwmsDataTimeseriesWithTimeseriesRaw(requestParameters: DeleteCwmsDataTimeseriesWithTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseries'] == null) {
            throw new runtime.RequiredError(
                'timeseries',
                'Required parameter "timeseries" was null or undefined when calling deleteCwmsDataTimeseriesWithTimeseries().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataTimeseriesWithTimeseries().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling deleteCwmsDataTimeseriesWithTimeseries().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling deleteCwmsDataTimeseriesWithTimeseries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['versionDate'] != null) {
            queryParameters['version-date'] = requestParameters['versionDate'];
        }

        if (requestParameters['startTimeInclusive'] != null) {
            queryParameters['start-time-inclusive'] = requestParameters['startTimeInclusive'];
        }

        if (requestParameters['endTimeInclusive'] != null) {
            queryParameters['end-time-inclusive'] = requestParameters['endTimeInclusive'];
        }

        if (requestParameters['maxVersion'] != null) {
            queryParameters['max-version'] = requestParameters['maxVersion'];
        }

        if (requestParameters['overrideProtection'] != null) {
            queryParameters['override-protection'] = requestParameters['overrideProtection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/{timeseries}`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters['timeseries']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete cwmsData timeseries with timeseries
     */
    async deleteCwmsDataTimeseriesWithTimeseries(requestParameters: DeleteCwmsDataTimeseriesWithTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataTimeseriesWithTimeseriesRaw(requestParameters, initOverrides);
    }

    /**
     * Get cwmsData timeseries
     */
    async getCwmsDataTimeseriesRaw(requestParameters: GetCwmsDataTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timeseries>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataTimeseries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['versionDate'] != null) {
            queryParameters['version-date'] = requestParameters['versionDate'];
        }

        if (requestParameters['datum'] != null) {
            queryParameters['datum'] = requestParameters['datum'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['trim'] != null) {
            queryParameters['trim'] = requestParameters['trim'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeseries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesFromJSON(jsonValue));
    }

    /**
     * Get cwmsData timeseries
     */
    async getCwmsDataTimeseries(requestParameters: GetCwmsDataTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timeseries> {
        const response = await this.getCwmsDataTimeseriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Timeseries Groups Data
     * Get cwmsData timeseries recent
     */
    async getCwmsDataTimeseriesRecentRaw(requestParameters: GetCwmsDataTimeseriesRecentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tsv>>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['category-id'] = requestParameters['categoryId'];
        }

        if (requestParameters['groupId'] != null) {
            queryParameters['group-id'] = requestParameters['groupId'];
        }

        if (requestParameters['tsIds'] != null) {
            queryParameters['ts-ids'] = requestParameters['tsIds'];
        }

        if (requestParameters['unitSystem'] != null) {
            queryParameters['unit-system'] = requestParameters['unitSystem'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeseries/recent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TsvFromJSON));
    }

    /**
     * Returns CWMS Timeseries Groups Data
     * Get cwmsData timeseries recent
     */
    async getCwmsDataTimeseriesRecent(requestParameters: GetCwmsDataTimeseriesRecentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tsv>> {
        const response = await this.getCwmsDataTimeseriesRecentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a Timeseries with provided values
     * Patch cwmsData timeseries with timeseries
     */
    async patchCwmsDataTimeseriesWithTimeseriesRaw(requestParameters: PatchCwmsDataTimeseriesWithTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseries'] == null) {
            throw new runtime.RequiredError(
                'timeseries',
                'Required parameter "timeseries" was null or undefined when calling patchCwmsDataTimeseriesWithTimeseries().'
            );
        }

        if (requestParameters['timeseries2'] == null) {
            throw new runtime.RequiredError(
                'timeseries2',
                'Required parameter "timeseries2" was null or undefined when calling patchCwmsDataTimeseriesWithTimeseries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['createAsLrts'] != null) {
            queryParameters['create-as-lrts'] = requestParameters['createAsLrts'];
        }

        if (requestParameters['storeRule'] != null) {
            queryParameters['store-rule'] = requestParameters['storeRule'];
        }

        if (requestParameters['overrideProtection'] != null) {
            queryParameters['override-protection'] = requestParameters['overrideProtection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/{timeseries}`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters['timeseries']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesToJSON(requestParameters['timeseries2']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a Timeseries with provided values
     * Patch cwmsData timeseries with timeseries
     */
    async patchCwmsDataTimeseriesWithTimeseries(requestParameters: PatchCwmsDataTimeseriesWithTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataTimeseriesWithTimeseriesRaw(requestParameters, initOverrides);
    }

    /**
     * Used to create and save time-series data. Data to be stored must have time stamps in UTC represented as epoch milliseconds 
     * Post cwmsData timeseries
     */
    async postCwmsDataTimeseriesRaw(requestParameters: PostCwmsDataTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseries'] == null) {
            throw new runtime.RequiredError(
                'timeseries',
                'Required parameter "timeseries" was null or undefined when calling postCwmsDataTimeseries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['createAsLrts'] != null) {
            queryParameters['create-as-lrts'] = requestParameters['createAsLrts'];
        }

        if (requestParameters['storeRule'] != null) {
            queryParameters['store-rule'] = requestParameters['storeRule'];
        }

        if (requestParameters['overrideProtection'] != null) {
            queryParameters['override-protection'] = requestParameters['overrideProtection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesToJSON(requestParameters['timeseries']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to create and save time-series data. Data to be stored must have time stamps in UTC represented as epoch milliseconds 
     * Post cwmsData timeseries
     */
    async postCwmsDataTimeseries(requestParameters: PostCwmsDataTimeseriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataTimeseriesRaw(requestParameters, initOverrides);
    }

}
