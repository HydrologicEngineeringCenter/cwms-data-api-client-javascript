/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  LookupType,
  PumpType,
  WaterUser,
  WaterUserContract,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    LookupTypeFromJSON,
    LookupTypeToJSON,
    PumpTypeFromJSON,
    PumpTypeToJSON,
    WaterUserFromJSON,
    WaterUserToJSON,
    WaterUserContractFromJSON,
    WaterUserContractToJSON,
} from '../models/index';

export interface DeleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValueRequest {
    office: string;
    displayValue: string;
}

export interface DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: string;
    method?: DeleteMethod;
}

export interface DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
    method?: DeleteMethod;
}

export interface DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
    name: string;
    pumpType: PumpType;
    deleteAccounting?: boolean;
}

export interface GetProjectsWithOfficeContractTypesRequest {
    office: string;
}

export interface GetProjectsWithOfficeWithProjectIdWaterUserRequest {
    office: string;
    projectId: string;
}

export interface GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: string;
}

export interface GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest {
    office: string;
    projectId: string;
    waterUser: string;
}

export interface GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
}

export interface PatchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: string;
    name: string;
    waterUser2: WaterUser;
}

export interface PatchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
    contractName2: string;
    waterUserContract: WaterUserContract;
}

export interface PostCwmsDataProjectsWithOfficeContractTypesRequest {
    office: string;
    lookupType: LookupType;
    failIfExists?: boolean;
}

export interface PostCwmsDataProjectsWithOfficeWithProjectIdWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: WaterUser;
    failIfExists?: boolean;
}

export interface PostCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest {
    office: string;
    projectId: string;
    waterUser: string;
    waterUserContract: WaterUserContract;
    failIfExists?: boolean;
    ignoreNulls?: boolean;
}

/**
 * 
 */
export class WaterContractsApi extends runtime.BaseAPI {

    /**
     * Delete a water contract type
     * Delete CwmsData projects with office contractTypes with displayValue
     */
    async deleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValueRaw(requestParameters: DeleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValue().'
            );
        }

        if (requestParameters['displayValue'] == null) {
            throw new runtime.RequiredError(
                'displayValue',
                'Required parameter "displayValue" was null or undefined when calling deleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/contract-types/{display-value}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"display-value"}}`, encodeURIComponent(String(requestParameters['displayValue']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a water contract type
     * Delete CwmsData projects with office contractTypes with displayValue
     */
    async deleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValue(requestParameters: DeleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsWithOfficeContractTypesWithDisplayValueRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a water user from CWMS.
     * Delete CwmsData projects with office with projectId waterUser with waterUser
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a water user from CWMS.
     * Delete CwmsData projects with office with projectId waterUser with waterUser
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a specified water contract
     * Delete CwmsData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specified water contract
     * Delete CwmsData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociate a pump from a contract
     * Delete CwmsData projects with office with projectId waterUser with waterUser contracts with contractName pumps with name
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRaw(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['pumpType'] == null) {
            throw new runtime.RequiredError(
                'pumpType',
                'Required parameter "pumpType" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pumpType'] != null) {
            queryParameters['pump-type'] = requestParameters['pumpType'];
        }

        if (requestParameters['deleteAccounting'] != null) {
            queryParameters['delete-accounting'] = requestParameters['deleteAccounting'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}/pumps/{name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociate a pump from a contract
     * Delete CwmsData projects with office with projectId waterUser with waterUser contracts with contractName pumps with name
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Get all water contract types
     * Get CwmsData projects with office contractTypes
     */
    async getProjectsWithOfficeContractTypesRaw(requestParameters: GetProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupType>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeContractTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/contract-types`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LookupTypeFromJSON(jsonValue));
    }

    /**
     * Get all water contract types
     * Get CwmsData projects with office contractTypes
     */
    async getProjectsWithOfficeContractTypes(requestParameters: GetProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupType> {
        const response = await this.getProjectsWithOfficeContractTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all water users.
     * Get CwmsData projects with office with projectId waterUser
     */
    async getProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUser>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserFromJSON(jsonValue));
    }

    /**
     * Gets all water users.
     * Get CwmsData projects with office with projectId waterUser
     */
    async getProjectsWithOfficeWithProjectIdWaterUser(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUser> {
        const response = await this.getProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specified water user.
     * Get CwmsData projects with office with projectId waterUser with waterUser
     */
    async getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUserContract>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserContractFromJSON(jsonValue));
    }

    /**
     * Gets a specified water user.
     * Get CwmsData projects with office with projectId waterUser with waterUser
     */
    async getProjectsWithOfficeWithProjectIdWaterUserWithWaterUser(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUserContract> {
        const response = await this.getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return all water contracts
     * Get CwmsData projects with office with projectId waterUser with waterUser contracts
     */
    async getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUserContract>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserContractFromJSON(jsonValue));
    }

    /**
     * Return all water contracts
     * Get CwmsData projects with office with projectId waterUser with waterUser contracts
     */
    async getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUserContract> {
        const response = await this.getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a specified water contract
     * Get CwmsData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUserContract>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserContractFromJSON(jsonValue));
    }

    /**
     * Return a specified water contract
     * Get CwmsData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName(requestParameters: GetProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUserContract> {
        const response = await this.getProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a water user in CWMS.
     * Patch CwmsData projects with office with projectId waterUser with waterUser
     */
    async patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters: PatchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser2'] == null) {
            throw new runtime.RequiredError(
                'waterUser2',
                'Required parameter "waterUser2" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserToJSON(requestParameters['waterUser2']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a water user in CWMS.
     * Patch CwmsData projects with office with projectId waterUser with waterUser
     */
    async patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser(requestParameters: PatchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters, initOverrides);
    }

    /**
     * Renames a water contract
     * Patch CwmsData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters: PatchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName2'] == null) {
            throw new runtime.RequiredError(
                'contractName2',
                'Required parameter "contractName2" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUserContract'] == null) {
            throw new runtime.RequiredError(
                'waterUserContract',
                'Required parameter "waterUserContract" was null or undefined when calling patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contractName2'] != null) {
            queryParameters['contract-name'] = requestParameters['contractName2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserContractToJSON(requestParameters['waterUserContract']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames a water contract
     * Patch CwmsData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName(requestParameters: PatchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new water contract type
     * Post CwmsData projects with office contractTypes
     */
    async postCwmsDataProjectsWithOfficeContractTypesRaw(requestParameters: PostCwmsDataProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postCwmsDataProjectsWithOfficeContractTypes().'
            );
        }

        if (requestParameters['lookupType'] == null) {
            throw new runtime.RequiredError(
                'lookupType',
                'Required parameter "lookupType" was null or undefined when calling postCwmsDataProjectsWithOfficeContractTypes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/contract-types`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookupTypeToJSON(requestParameters['lookupType']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new water contract type
     * Post CwmsData projects with office contractTypes
     */
    async postCwmsDataProjectsWithOfficeContractTypes(requestParameters: PostCwmsDataProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataProjectsWithOfficeContractTypesRaw(requestParameters, initOverrides);
    }

    /**
     * Stores a water user to CWMS.
     * Post CwmsData projects with office with projectId waterUser
     */
    async postCwmsDataProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters: PostCwmsDataProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postCwmsDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling postCwmsDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling postCwmsDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserToJSON(requestParameters['waterUser']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stores a water user to CWMS.
     * Post CwmsData projects with office with projectId waterUser
     */
    async postCwmsDataProjectsWithOfficeWithProjectIdWaterUser(requestParameters: PostCwmsDataProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new water contract
     * Post CwmsData projects with office with projectId waterUser with waterUser contracts
     */
    async postCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters: PostCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling postCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling postCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['waterUserContract'] == null) {
            throw new runtime.RequiredError(
                'waterUserContract',
                'Required parameter "waterUserContract" was null or undefined when calling postCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        if (requestParameters['ignoreNulls'] != null) {
            queryParameters['ignore-nulls'] = requestParameters['ignoreNulls'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserContractToJSON(requestParameters['waterUserContract']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new water contract
     * Post CwmsData projects with office with projectId waterUser with waterUser contracts
     */
    async postCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts(requestParameters: PostCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters, initOverrides);
    }

}
