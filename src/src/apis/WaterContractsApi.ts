/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  LookupType,
  PumpType,
  WaterUser,
  WaterUserContract,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    LookupTypeFromJSON,
    LookupTypeToJSON,
    PumpTypeFromJSON,
    PumpTypeToJSON,
    WaterUserFromJSON,
    WaterUserToJSON,
    WaterUserContractFromJSON,
    WaterUserContractToJSON,
} from '../models/index';

export interface DeleteSwtDataProjectsWithOfficeContractTypesWithDisplayValueRequest {
    office: string;
    displayValue: string;
}

export interface DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: string;
    method?: DeleteMethod;
}

export interface DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
    method?: DeleteMethod;
}

export interface DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
    name: string;
    pumpType: PumpType;
    deleteAccounting?: boolean;
}

export interface GetSwtDataProjectsWithOfficeContractTypesRequest {
    office: string;
}

export interface GetSwtDataProjectsWithOfficeWithProjectIdWaterUserRequest {
    office: string;
    projectId: string;
}

export interface GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: string;
}

export interface GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest {
    office: string;
    projectId: string;
    waterUser: string;
}

export interface GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
}

export interface PatchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: string;
    name: string;
    waterUser2: WaterUser;
}

export interface PatchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest {
    office: string;
    projectId: string;
    waterUser: string;
    contractName: string;
    contractName2: string;
    waterUserContract: WaterUserContract;
}

export interface PostSwtDataProjectsWithOfficeContractTypesRequest {
    office: string;
    lookupType: LookupType;
    failIfExists?: boolean;
}

export interface PostSwtDataProjectsWithOfficeWithProjectIdWaterUserRequest {
    office: string;
    projectId: string;
    waterUser: WaterUser;
    failIfExists?: boolean;
}

export interface PostSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest {
    office: string;
    projectId: string;
    waterUser: string;
    waterUserContract: WaterUserContract;
    failIfExists?: boolean;
    ignoreNulls?: boolean;
}

/**
 * 
 */
export class WaterContractsApi extends runtime.BaseAPI {

    /**
     * Delete a water contract type
     * Delete swtData projects with office contractTypes with displayValue
     */
    async deleteSwtDataProjectsWithOfficeContractTypesWithDisplayValueRaw(requestParameters: DeleteSwtDataProjectsWithOfficeContractTypesWithDisplayValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithOfficeContractTypesWithDisplayValue().'
            );
        }

        if (requestParameters['displayValue'] == null) {
            throw new runtime.RequiredError(
                'displayValue',
                'Required parameter "displayValue" was null or undefined when calling deleteSwtDataProjectsWithOfficeContractTypesWithDisplayValue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/contract-types/{display-value}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"display-value"}}`, encodeURIComponent(String(requestParameters['displayValue']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a water contract type
     * Delete swtData projects with office contractTypes with displayValue
     */
    async deleteSwtDataProjectsWithOfficeContractTypesWithDisplayValue(requestParameters: DeleteSwtDataProjectsWithOfficeContractTypesWithDisplayValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithOfficeContractTypesWithDisplayValueRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a water user from CWMS.
     * Delete swtData projects with office with projectId waterUser with waterUser
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a water user from CWMS.
     * Delete swtData projects with office with projectId waterUser with waterUser
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a specified water contract
     * Delete swtData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specified water contract
     * Delete swtData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters, initOverrides);
    }

    /**
     * Disassociate a pump from a contract
     * Delete swtData projects with office with projectId waterUser with waterUser contracts with contractName pumps with name
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRaw(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        if (requestParameters['pumpType'] == null) {
            throw new runtime.RequiredError(
                'pumpType',
                'Required parameter "pumpType" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pumpType'] != null) {
            queryParameters['pump-type'] = requestParameters['pumpType'];
        }

        if (requestParameters['deleteAccounting'] != null) {
            queryParameters['delete-accounting'] = requestParameters['deleteAccounting'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}/pumps/{name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disassociate a pump from a contract
     * Delete swtData projects with office with projectId waterUser with waterUser contracts with contractName pumps with name
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithName(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNamePumpsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Get all water contract types
     * Get swtData projects with office contractTypes
     */
    async getSwtDataProjectsWithOfficeContractTypesRaw(requestParameters: GetSwtDataProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupType>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeContractTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/contract-types`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LookupTypeFromJSON(jsonValue));
    }

    /**
     * Get all water contract types
     * Get swtData projects with office contractTypes
     */
    async getSwtDataProjectsWithOfficeContractTypes(requestParameters: GetSwtDataProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupType> {
        const response = await this.getSwtDataProjectsWithOfficeContractTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all water users.
     * Get swtData projects with office with projectId waterUser
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUser>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserFromJSON(jsonValue));
    }

    /**
     * Gets all water users.
     * Get swtData projects with office with projectId waterUser
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUser(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUser> {
        const response = await this.getSwtDataProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specified water user.
     * Get swtData projects with office with projectId waterUser with waterUser
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUserContract>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserContractFromJSON(jsonValue));
    }

    /**
     * Gets a specified water user.
     * Get swtData projects with office with projectId waterUser with waterUser
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUserContract> {
        const response = await this.getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return all water contracts
     * Get swtData projects with office with projectId waterUser with waterUser contracts
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUserContract>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserContractFromJSON(jsonValue));
    }

    /**
     * Return all water contracts
     * Get swtData projects with office with projectId waterUser with waterUser contracts
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUserContract> {
        const response = await this.getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a specified water contract
     * Get swtData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaterUserContract>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaterUserContractFromJSON(jsonValue));
    }

    /**
     * Return a specified water contract
     * Get swtData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaterUserContract> {
        const response = await this.getSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a water user in CWMS.
     * Patch swtData projects with office with projectId waterUser with waterUser
     */
    async patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters: PatchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        if (requestParameters['waterUser2'] == null) {
            throw new runtime.RequiredError(
                'waterUser2',
                'Required parameter "waterUser2" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserToJSON(requestParameters['waterUser2']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a water user in CWMS.
     * Patch swtData projects with office with projectId waterUser with waterUser
     */
    async patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUser(requestParameters: PatchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserRaw(requestParameters, initOverrides);
    }

    /**
     * Renames a water contract
     * Patch swtData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters: PatchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName'] == null) {
            throw new runtime.RequiredError(
                'contractName',
                'Required parameter "contractName" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['contractName2'] == null) {
            throw new runtime.RequiredError(
                'contractName2',
                'Required parameter "contractName2" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        if (requestParameters['waterUserContract'] == null) {
            throw new runtime.RequiredError(
                'waterUserContract',
                'Required parameter "waterUserContract" was null or undefined when calling patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contractName2'] != null) {
            queryParameters['contract-name'] = requestParameters['contractName2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts/{contract-name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))).replace(`{${"contract-name"}}`, encodeURIComponent(String(requestParameters['contractName']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserContractToJSON(requestParameters['waterUserContract']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames a water contract
     * Patch swtData projects with office with projectId waterUser with waterUser contracts with contractName
     */
    async patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractName(requestParameters: PatchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsWithContractNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new water contract type
     * Post swtData projects with office contractTypes
     */
    async postSwtDataProjectsWithOfficeContractTypesRaw(requestParameters: PostSwtDataProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postSwtDataProjectsWithOfficeContractTypes().'
            );
        }

        if (requestParameters['lookupType'] == null) {
            throw new runtime.RequiredError(
                'lookupType',
                'Required parameter "lookupType" was null or undefined when calling postSwtDataProjectsWithOfficeContractTypes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/contract-types`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookupTypeToJSON(requestParameters['lookupType']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new water contract type
     * Post swtData projects with office contractTypes
     */
    async postSwtDataProjectsWithOfficeContractTypes(requestParameters: PostSwtDataProjectsWithOfficeContractTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsWithOfficeContractTypesRaw(requestParameters, initOverrides);
    }

    /**
     * Stores a water user to CWMS.
     * Post swtData projects with office with projectId waterUser
     */
    async postSwtDataProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters: PostSwtDataProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postSwtDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling postSwtDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling postSwtDataProjectsWithOfficeWithProjectIdWaterUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserToJSON(requestParameters['waterUser']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stores a water user to CWMS.
     * Post swtData projects with office with projectId waterUser
     */
    async postSwtDataProjectsWithOfficeWithProjectIdWaterUser(requestParameters: PostSwtDataProjectsWithOfficeWithProjectIdWaterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsWithOfficeWithProjectIdWaterUserRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new water contract
     * Post swtData projects with office with projectId waterUser with waterUser contracts
     */
    async postSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters: PostSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling postSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['waterUser'] == null) {
            throw new runtime.RequiredError(
                'waterUser',
                'Required parameter "waterUser" was null or undefined when calling postSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        if (requestParameters['waterUserContract'] == null) {
            throw new runtime.RequiredError(
                'waterUserContract',
                'Required parameter "waterUserContract" was null or undefined when calling postSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        if (requestParameters['ignoreNulls'] != null) {
            queryParameters['ignore-nulls'] = requestParameters['ignoreNulls'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/water-user/{water-user}/contracts`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"water-user"}}`, encodeURIComponent(String(requestParameters['waterUser']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaterUserContractToJSON(requestParameters['waterUserContract']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new water contract
     * Post swtData projects with office with projectId waterUser with waterUser contracts
     */
    async postSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContracts(requestParameters: PostSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsWithOfficeWithProjectIdWaterUserWithWaterUserContractsRaw(requestParameters, initOverrides);
    }

}
