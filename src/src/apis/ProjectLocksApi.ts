/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  ProjectLock,
  ProjectLockId,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    ProjectLockFromJSON,
    ProjectLockToJSON,
    ProjectLockIdFromJSON,
    ProjectLockIdToJSON,
} from '../models/index';

export interface DeleteSwtDataProjectLocksWithNameRequest {
    name: string;
    office: string;
    revokeTimeout?: number;
}

export interface GetSwtDataProjectLocksRequest {
    officeMask: string;
    projectMask?: string;
    applicationMask?: string;
}

export interface GetSwtDataProjectLocksWithNameRequest {
    name: string;
    office: string;
    applicationId: string;
}

export interface PostSwtDataProjectLocksRequest {
    projectLock: ProjectLock;
    revokeExisting?: boolean;
    revokeTimeout?: number;
}

export interface PostSwtDataProjectLocksDenyRequest {
    lockId: string;
}

export interface PostSwtDataProjectLocksReleaseRequest {
    office: string;
    lockId: string;
}

/**
 * 
 */
export class ProjectLocksApi extends runtime.BaseAPI {

    /**
     * Revokes a project lock, if successful the lock is deleted
     * Delete swtData projectLocks with name
     */
    async deleteSwtDataProjectLocksWithNameRaw(requestParameters: DeleteSwtDataProjectLocksWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectLocksWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectLocksWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['revokeTimeout'] != null) {
            queryParameters['revoke-timeout'] = requestParameters['revokeTimeout'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/project-locks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes a project lock, if successful the lock is deleted
     * Delete swtData projectLocks with name
     */
    async deleteSwtDataProjectLocksWithName(requestParameters: DeleteSwtDataProjectLocksWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectLocksWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of project locks
     * Get swtData projectLocks
     */
    async getSwtDataProjectLocksRaw(requestParameters: GetSwtDataProjectLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectLock>> {
        if (requestParameters['officeMask'] == null) {
            throw new runtime.RequiredError(
                'officeMask',
                'Required parameter "officeMask" was null or undefined when calling getSwtDataProjectLocks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['officeMask'] != null) {
            queryParameters['office-mask'] = requestParameters['officeMask'];
        }

        if (requestParameters['projectMask'] != null) {
            queryParameters['project-mask'] = requestParameters['projectMask'];
        }

        if (requestParameters['applicationMask'] != null) {
            queryParameters['application-mask'] = requestParameters['applicationMask'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/project-locks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectLockFromJSON(jsonValue));
    }

    /**
     * Get a list of project locks
     * Get swtData projectLocks
     */
    async getSwtDataProjectLocks(requestParameters: GetSwtDataProjectLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectLock> {
        const response = await this.getSwtDataProjectLocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a lock if the specified project is locked. Otherwise 404
     * Get swtData projectLocks with name
     */
    async getSwtDataProjectLocksWithNameRaw(requestParameters: GetSwtDataProjectLocksWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectLock>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataProjectLocksWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectLocksWithName().'
            );
        }

        if (requestParameters['applicationId'] == null) {
            throw new runtime.RequiredError(
                'applicationId',
                'Required parameter "applicationId" was null or undefined when calling getSwtDataProjectLocksWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['applicationId'] != null) {
            queryParameters['application-id'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/project-locks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectLockFromJSON(jsonValue));
    }

    /**
     * Return a lock if the specified project is locked. Otherwise 404
     * Get swtData projectLocks with name
     */
    async getSwtDataProjectLocksWithName(requestParameters: GetSwtDataProjectLocksWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectLock> {
        const response = await this.getSwtDataProjectLocksWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Requests the creation of a new Reservoir Project Lock
     * Post swtData projectLocks
     */
    async postSwtDataProjectLocksRaw(requestParameters: PostSwtDataProjectLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectLockId>> {
        if (requestParameters['projectLock'] == null) {
            throw new runtime.RequiredError(
                'projectLock',
                'Required parameter "projectLock" was null or undefined when calling postSwtDataProjectLocks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['revokeExisting'] != null) {
            queryParameters['revoke-existing'] = requestParameters['revokeExisting'];
        }

        if (requestParameters['revokeTimeout'] != null) {
            queryParameters['revoke-timeout'] = requestParameters['revokeTimeout'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/project-locks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectLockToJSON(requestParameters['projectLock']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectLockIdFromJSON(jsonValue));
    }

    /**
     * Requests the creation of a new Reservoir Project Lock
     * Post swtData projectLocks
     */
    async postSwtDataProjectLocks(requestParameters: PostSwtDataProjectLocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectLockId> {
        const response = await this.postSwtDataProjectLocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deny a Lock revoke request.
     * Post swtData projectLocks deny
     */
    async postSwtDataProjectLocksDenyRaw(requestParameters: PostSwtDataProjectLocksDenyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['lockId'] == null) {
            throw new runtime.RequiredError(
                'lockId',
                'Required parameter "lockId" was null or undefined when calling postSwtDataProjectLocksDeny().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['lockId'] != null) {
            queryParameters['lock-id'] = requestParameters['lockId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/project-locks/deny`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deny a Lock revoke request.
     * Post swtData projectLocks deny
     */
    async postSwtDataProjectLocksDeny(requestParameters: PostSwtDataProjectLocksDenyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectLocksDenyRaw(requestParameters, initOverrides);
    }

    /**
     * Releases a project lock
     * Post swtData projectLocks release
     */
    async postSwtDataProjectLocksReleaseRaw(requestParameters: PostSwtDataProjectLocksReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling postSwtDataProjectLocksRelease().'
            );
        }

        if (requestParameters['lockId'] == null) {
            throw new runtime.RequiredError(
                'lockId',
                'Required parameter "lockId" was null or undefined when calling postSwtDataProjectLocksRelease().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['lockId'] != null) {
            queryParameters['lock-id'] = requestParameters['lockId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/project-locks/release`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Releases a project lock
     * Post swtData projectLocks release
     */
    async postSwtDataProjectLocksRelease(requestParameters: PostSwtDataProjectLocksReleaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectLocksReleaseRaw(requestParameters, initOverrides);
    }

}
