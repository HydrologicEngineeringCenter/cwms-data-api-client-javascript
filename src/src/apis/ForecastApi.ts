/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  ForecastInstance,
  ForecastSpec,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    ForecastInstanceFromJSON,
    ForecastInstanceToJSON,
    ForecastSpecFromJSON,
    ForecastSpecToJSON,
} from '../models/index';

export interface DeleteCwmsDataForecastInstanceWithNameRequest {
    name: string;
    forecastDate: string;
    issueDate: string;
    office: string;
    designator: string;
}

export interface DeleteCwmsDataForecastSpecWithNameRequest {
    name: string;
    office: string;
    designator: string;
    method?: DeleteMethod;
}

export interface GetCwmsDataForecastInstanceRequest {
    office?: string;
    name?: string;
    designator?: string;
}

export interface GetCwmsDataForecastInstanceWithNameRequest {
    name: string;
    forecastDate: string;
    issueDate: string;
    office: string;
    designator: string;
}

export interface GetCwmsDataForecastInstanceWithNameFileDataRequest {
    name: string;
    forecastDate: string;
    issueDate: string;
    office: string;
    designator: string;
}

export interface GetCwmsDataForecastSpecRequest {
    office?: string;
    idMask?: string;
    designatorMask?: string;
    sourceEntity?: string;
}

export interface GetCwmsDataForecastSpecWithNameRequest {
    name: string;
    office: string;
    designator: string;
}

export interface PatchCwmsDataForecastInstanceWithNameRequest {
    name: string;
    forecastInstance: ForecastInstance;
}

export interface PatchCwmsDataForecastSpecWithNameRequest {
    name: string;
    forecastSpec: ForecastSpec;
}

export interface PostCwmsDataForecastInstanceRequest {
    forecastInstance: ForecastInstance;
}

export interface PostCwmsDataForecastSpecRequest {
    forecastSpec: ForecastSpec;
}

/**
 * 
 */
export class ForecastApi extends runtime.BaseAPI {

    /**
     * Used to delete forecast instance data based on unique fields
     * Delete cwmsData forecastInstance with name
     */
    async deleteCwmsDataForecastInstanceWithNameRaw(requestParameters: DeleteCwmsDataForecastInstanceWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['forecastDate'] == null) {
            throw new runtime.RequiredError(
                'forecastDate',
                'Required parameter "forecastDate" was null or undefined when calling deleteCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['issueDate'] == null) {
            throw new runtime.RequiredError(
                'issueDate',
                'Required parameter "issueDate" was null or undefined when calling deleteCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['designator'] == null) {
            throw new runtime.RequiredError(
                'designator',
                'Required parameter "designator" was null or undefined when calling deleteCwmsDataForecastInstanceWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['forecastDate'] != null) {
            queryParameters['forecast-date'] = requestParameters['forecastDate'];
        }

        if (requestParameters['issueDate'] != null) {
            queryParameters['issue-date'] = requestParameters['issueDate'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['designator'] != null) {
            queryParameters['designator'] = requestParameters['designator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/forecast-instance/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to delete forecast instance data based on unique fields
     * Delete cwmsData forecastInstance with name
     */
    async deleteCwmsDataForecastInstanceWithName(requestParameters: DeleteCwmsDataForecastInstanceWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataForecastInstanceWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Used to delete forecast spec data based on unique fields
     * Delete cwmsData forecastSpec with name
     */
    async deleteCwmsDataForecastSpecWithNameRaw(requestParameters: DeleteCwmsDataForecastSpecWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataForecastSpecWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataForecastSpecWithName().'
            );
        }

        if (requestParameters['designator'] == null) {
            throw new runtime.RequiredError(
                'designator',
                'Required parameter "designator" was null or undefined when calling deleteCwmsDataForecastSpecWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['designator'] != null) {
            queryParameters['designator'] = requestParameters['designator'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/forecast-spec/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to delete forecast spec data based on unique fields
     * Delete cwmsData forecastSpec with name
     */
    async deleteCwmsDataForecastSpecWithName(requestParameters: DeleteCwmsDataForecastSpecWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataForecastSpecWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Used to get all forecast instances for a given forecast spec
     * Get cwmsData forecastInstance
     */
    async getCwmsDataForecastInstanceRaw(requestParameters: GetCwmsDataForecastInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForecastInstance>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['designator'] != null) {
            queryParameters['designator'] = requestParameters['designator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forecast-instance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForecastInstanceFromJSON(jsonValue));
    }

    /**
     * Used to get all forecast instances for a given forecast spec
     * Get cwmsData forecastInstance
     */
    async getCwmsDataForecastInstance(requestParameters: GetCwmsDataForecastInstanceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForecastInstance> {
        const response = await this.getCwmsDataForecastInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to get all forecast instances for a given forecast spec
     * Get cwmsData forecastInstance with name
     */
    async getCwmsDataForecastInstanceWithNameRaw(requestParameters: GetCwmsDataForecastInstanceWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForecastInstance>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['forecastDate'] == null) {
            throw new runtime.RequiredError(
                'forecastDate',
                'Required parameter "forecastDate" was null or undefined when calling getCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['issueDate'] == null) {
            throw new runtime.RequiredError(
                'issueDate',
                'Required parameter "issueDate" was null or undefined when calling getCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['designator'] == null) {
            throw new runtime.RequiredError(
                'designator',
                'Required parameter "designator" was null or undefined when calling getCwmsDataForecastInstanceWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['forecastDate'] != null) {
            queryParameters['forecast-date'] = requestParameters['forecastDate'];
        }

        if (requestParameters['issueDate'] != null) {
            queryParameters['issue-date'] = requestParameters['issueDate'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['designator'] != null) {
            queryParameters['designator'] = requestParameters['designator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forecast-instance/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForecastInstanceFromJSON(jsonValue));
    }

    /**
     * Used to get all forecast instances for a given forecast spec
     * Get cwmsData forecastInstance with name
     */
    async getCwmsDataForecastInstanceWithName(requestParameters: GetCwmsDataForecastInstanceWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForecastInstance> {
        const response = await this.getCwmsDataForecastInstanceWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to download forecast file for the given parameters
     * Get cwmsData forecastInstance with name fileData
     */
    async getCwmsDataForecastInstanceWithNameFileDataRaw(requestParameters: GetCwmsDataForecastInstanceWithNameFileDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataForecastInstanceWithNameFileData().'
            );
        }

        if (requestParameters['forecastDate'] == null) {
            throw new runtime.RequiredError(
                'forecastDate',
                'Required parameter "forecastDate" was null or undefined when calling getCwmsDataForecastInstanceWithNameFileData().'
            );
        }

        if (requestParameters['issueDate'] == null) {
            throw new runtime.RequiredError(
                'issueDate',
                'Required parameter "issueDate" was null or undefined when calling getCwmsDataForecastInstanceWithNameFileData().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataForecastInstanceWithNameFileData().'
            );
        }

        if (requestParameters['designator'] == null) {
            throw new runtime.RequiredError(
                'designator',
                'Required parameter "designator" was null or undefined when calling getCwmsDataForecastInstanceWithNameFileData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['forecastDate'] != null) {
            queryParameters['forecast-date'] = requestParameters['forecastDate'];
        }

        if (requestParameters['issueDate'] != null) {
            queryParameters['issue-date'] = requestParameters['issueDate'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['designator'] != null) {
            queryParameters['designator'] = requestParameters['designator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forecast-instance/{name}/file-data`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Used to download forecast file for the given parameters
     * Get cwmsData forecastInstance with name fileData
     */
    async getCwmsDataForecastInstanceWithNameFileData(requestParameters: GetCwmsDataForecastInstanceWithNameFileDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getCwmsDataForecastInstanceWithNameFileDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to query multiple forecast specs
     * Get cwmsData forecastSpec
     */
    async getCwmsDataForecastSpecRaw(requestParameters: GetCwmsDataForecastSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForecastSpec>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['idMask'] != null) {
            queryParameters['id-mask'] = requestParameters['idMask'];
        }

        if (requestParameters['designatorMask'] != null) {
            queryParameters['designator-mask'] = requestParameters['designatorMask'];
        }

        if (requestParameters['sourceEntity'] != null) {
            queryParameters['source-entity'] = requestParameters['sourceEntity'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forecast-spec`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForecastSpecFromJSON(jsonValue));
    }

    /**
     * Used to query multiple forecast specs
     * Get cwmsData forecastSpec
     */
    async getCwmsDataForecastSpec(requestParameters: GetCwmsDataForecastSpecRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForecastSpec> {
        const response = await this.getCwmsDataForecastSpecRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used to query a single forecast spec record
     * Get cwmsData forecastSpec with name
     */
    async getCwmsDataForecastSpecWithNameRaw(requestParameters: GetCwmsDataForecastSpecWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForecastSpec>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataForecastSpecWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataForecastSpecWithName().'
            );
        }

        if (requestParameters['designator'] == null) {
            throw new runtime.RequiredError(
                'designator',
                'Required parameter "designator" was null or undefined when calling getCwmsDataForecastSpecWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['designator'] != null) {
            queryParameters['designator'] = requestParameters['designator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forecast-spec/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForecastSpecFromJSON(jsonValue));
    }

    /**
     * Used to query a single forecast spec record
     * Get cwmsData forecastSpec with name
     */
    async getCwmsDataForecastSpecWithName(requestParameters: GetCwmsDataForecastSpecWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForecastSpec> {
        const response = await this.getCwmsDataForecastSpecWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a forecast instance with new max age, notes, forecast fileand forecast info key/value pairs.
     * Patch cwmsData forecastInstance with name
     */
    async patchCwmsDataForecastInstanceWithNameRaw(requestParameters: PatchCwmsDataForecastInstanceWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataForecastInstanceWithName().'
            );
        }

        if (requestParameters['forecastInstance'] == null) {
            throw new runtime.RequiredError(
                'forecastInstance',
                'Required parameter "forecastInstance" was null or undefined when calling patchCwmsDataForecastInstanceWithName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/forecast-instance/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ForecastInstanceToJSON(requestParameters['forecastInstance']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a forecast instance with new max age, notes, forecast fileand forecast info key/value pairs.
     * Patch cwmsData forecastInstance with name
     */
    async patchCwmsDataForecastInstanceWithName(requestParameters: PatchCwmsDataForecastInstanceWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataForecastInstanceWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Update a forecast spec with provided values
     * Patch cwmsData forecastSpec with name
     */
    async patchCwmsDataForecastSpecWithNameRaw(requestParameters: PatchCwmsDataForecastSpecWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataForecastSpecWithName().'
            );
        }

        if (requestParameters['forecastSpec'] == null) {
            throw new runtime.RequiredError(
                'forecastSpec',
                'Required parameter "forecastSpec" was null or undefined when calling patchCwmsDataForecastSpecWithName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/forecast-spec/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ForecastSpecToJSON(requestParameters['forecastSpec']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a forecast spec with provided values
     * Patch cwmsData forecastSpec with name
     */
    async patchCwmsDataForecastSpecWithName(requestParameters: PatchCwmsDataForecastSpecWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataForecastSpecWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Used to create and save a forecast instance
     * Post cwmsData forecastInstance
     */
    async postCwmsDataForecastInstanceRaw(requestParameters: PostCwmsDataForecastInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['forecastInstance'] == null) {
            throw new runtime.RequiredError(
                'forecastInstance',
                'Required parameter "forecastInstance" was null or undefined when calling postCwmsDataForecastInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/forecast-instance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForecastInstanceToJSON(requestParameters['forecastInstance']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to create and save a forecast instance
     * Post cwmsData forecastInstance
     */
    async postCwmsDataForecastInstance(requestParameters: PostCwmsDataForecastInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataForecastInstanceRaw(requestParameters, initOverrides);
    }

    /**
     * Used to create and save forecast spec data
     * Post cwmsData forecastSpec
     */
    async postCwmsDataForecastSpecRaw(requestParameters: PostCwmsDataForecastSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['forecastSpec'] == null) {
            throw new runtime.RequiredError(
                'forecastSpec',
                'Required parameter "forecastSpec" was null or undefined when calling postCwmsDataForecastSpec().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/forecast-spec`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForecastSpecToJSON(requestParameters['forecastSpec']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to create and save forecast spec data
     * Post cwmsData forecastSpec
     */
    async postCwmsDataForecastSpec(requestParameters: PostCwmsDataForecastSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataForecastSpecRaw(requestParameters, initOverrides);
    }

}
