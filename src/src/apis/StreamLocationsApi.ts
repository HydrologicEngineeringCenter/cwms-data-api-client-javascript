/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  StreamLocation,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    StreamLocationFromJSON,
    StreamLocationToJSON,
} from '../models/index';

export interface DeleteSwtDataStreamLocationsWithNameRequest {
    name: string;
    office: string;
    streamId: string;
}

export interface GetSwtDataStreamLocationsRequest {
    officeMask?: string;
    streamIdMask?: string;
    nameMask?: string;
    stationUnit?: string;
    stageUnit?: string;
    areaUnit?: string;
}

export interface GetSwtDataStreamLocationsWithNameRequest {
    name: string;
    office: string;
    streamId: string;
    stationUnit?: string;
    stageUnit?: string;
    areaUnit?: string;
}

export interface GetSwtDataStreamLocationsWithOfficeWithNameDownstreamLocationsRequest {
    office: string;
    name: string;
    allDownstream?: boolean;
    sameStreamOnly?: boolean;
    stationUnit?: string;
    stageUnit?: string;
    areaUnit?: string;
}

export interface GetSwtDataStreamLocationsWithOfficeWithNameUpstreamLocationsRequest {
    office: string;
    name: string;
    allUpstream?: boolean;
    sameStreamOnly?: boolean;
    stationUnit?: string;
    stageUnit?: string;
    areaUnit?: string;
}

export interface PatchSwtDataStreamLocationsWithNameRequest {
    name: string;
    streamLocation: StreamLocation;
}

export interface PostSwtDataStreamLocationsRequest {
    streamLocation: StreamLocation;
    failIfExists?: boolean;
}

/**
 * 
 */
export class StreamLocationsApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Stream Location
     * Delete swtData streamLocations with name
     */
    async deleteSwtDataStreamLocationsWithNameRaw(requestParameters: DeleteSwtDataStreamLocationsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataStreamLocationsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataStreamLocationsWithName().'
            );
        }

        if (requestParameters['streamId'] == null) {
            throw new runtime.RequiredError(
                'streamId',
                'Required parameter "streamId" was null or undefined when calling deleteSwtDataStreamLocationsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['streamId'] != null) {
            queryParameters['stream-id'] = requestParameters['streamId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/stream-locations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Stream Location
     * Delete swtData streamLocations with name
     */
    async deleteSwtDataStreamLocationsWithName(requestParameters: DeleteSwtDataStreamLocationsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataStreamLocationsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns matching CWMS Stream Location Data for a Reservoir Project.
     * Get swtData streamLocations
     */
    async getSwtDataStreamLocationsRaw(requestParameters: GetSwtDataStreamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StreamLocation>>> {
        const queryParameters: any = {};

        if (requestParameters['officeMask'] != null) {
            queryParameters['office-mask'] = requestParameters['officeMask'];
        }

        if (requestParameters['streamIdMask'] != null) {
            queryParameters['stream-id-mask'] = requestParameters['streamIdMask'];
        }

        if (requestParameters['nameMask'] != null) {
            queryParameters['name-mask'] = requestParameters['nameMask'];
        }

        if (requestParameters['stationUnit'] != null) {
            queryParameters['station-unit'] = requestParameters['stationUnit'];
        }

        if (requestParameters['stageUnit'] != null) {
            queryParameters['stage-unit'] = requestParameters['stageUnit'];
        }

        if (requestParameters['areaUnit'] != null) {
            queryParameters['area-unit'] = requestParameters['areaUnit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/stream-locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamLocationFromJSON));
    }

    /**
     * Returns matching CWMS Stream Location Data for a Reservoir Project.
     * Get swtData streamLocations
     */
    async getSwtDataStreamLocations(requestParameters: GetSwtDataStreamLocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StreamLocation>> {
        const response = await this.getSwtDataStreamLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Stream Location Data
     * Get swtData streamLocations with name
     */
    async getSwtDataStreamLocationsWithNameRaw(requestParameters: GetSwtDataStreamLocationsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StreamLocation>>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataStreamLocationsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataStreamLocationsWithName().'
            );
        }

        if (requestParameters['streamId'] == null) {
            throw new runtime.RequiredError(
                'streamId',
                'Required parameter "streamId" was null or undefined when calling getSwtDataStreamLocationsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['streamId'] != null) {
            queryParameters['stream-id'] = requestParameters['streamId'];
        }

        if (requestParameters['stationUnit'] != null) {
            queryParameters['station-unit'] = requestParameters['stationUnit'];
        }

        if (requestParameters['stageUnit'] != null) {
            queryParameters['stage-unit'] = requestParameters['stageUnit'];
        }

        if (requestParameters['areaUnit'] != null) {
            queryParameters['area-unit'] = requestParameters['areaUnit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/stream-locations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamLocationFromJSON));
    }

    /**
     * Returns CWMS Stream Location Data
     * Get swtData streamLocations with name
     */
    async getSwtDataStreamLocationsWithName(requestParameters: GetSwtDataStreamLocationsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StreamLocation>> {
        const response = await this.getSwtDataStreamLocationsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns matching downstream stream locations.
     * Get swtData streamLocations with office with name downstreamLocations
     */
    async getSwtDataStreamLocationsWithOfficeWithNameDownstreamLocationsRaw(requestParameters: GetSwtDataStreamLocationsWithOfficeWithNameDownstreamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StreamLocation>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataStreamLocationsWithOfficeWithNameDownstreamLocations().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataStreamLocationsWithOfficeWithNameDownstreamLocations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['allDownstream'] != null) {
            queryParameters['all-downstream'] = requestParameters['allDownstream'];
        }

        if (requestParameters['sameStreamOnly'] != null) {
            queryParameters['same-stream-only'] = requestParameters['sameStreamOnly'];
        }

        if (requestParameters['stationUnit'] != null) {
            queryParameters['station-unit'] = requestParameters['stationUnit'];
        }

        if (requestParameters['stageUnit'] != null) {
            queryParameters['stage-unit'] = requestParameters['stageUnit'];
        }

        if (requestParameters['areaUnit'] != null) {
            queryParameters['area-unit'] = requestParameters['areaUnit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/stream-locations/{office}/{name}/downstream-locations`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamLocationFromJSON));
    }

    /**
     * Returns matching downstream stream locations.
     * Get swtData streamLocations with office with name downstreamLocations
     */
    async getSwtDataStreamLocationsWithOfficeWithNameDownstreamLocations(requestParameters: GetSwtDataStreamLocationsWithOfficeWithNameDownstreamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StreamLocation>> {
        const response = await this.getSwtDataStreamLocationsWithOfficeWithNameDownstreamLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns matching upstream stream locations.
     * Get swtData streamLocations with office with name upstreamLocations
     */
    async getSwtDataStreamLocationsWithOfficeWithNameUpstreamLocationsRaw(requestParameters: GetSwtDataStreamLocationsWithOfficeWithNameUpstreamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StreamLocation>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataStreamLocationsWithOfficeWithNameUpstreamLocations().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataStreamLocationsWithOfficeWithNameUpstreamLocations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['allUpstream'] != null) {
            queryParameters['all-upstream'] = requestParameters['allUpstream'];
        }

        if (requestParameters['sameStreamOnly'] != null) {
            queryParameters['same-stream-only'] = requestParameters['sameStreamOnly'];
        }

        if (requestParameters['stationUnit'] != null) {
            queryParameters['station-unit'] = requestParameters['stationUnit'];
        }

        if (requestParameters['stageUnit'] != null) {
            queryParameters['stage-unit'] = requestParameters['stageUnit'];
        }

        if (requestParameters['areaUnit'] != null) {
            queryParameters['area-unit'] = requestParameters['areaUnit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/stream-locations/{office}/{name}/upstream-locations`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StreamLocationFromJSON));
    }

    /**
     * Returns matching upstream stream locations.
     * Get swtData streamLocations with office with name upstreamLocations
     */
    async getSwtDataStreamLocationsWithOfficeWithNameUpstreamLocations(requestParameters: GetSwtDataStreamLocationsWithOfficeWithNameUpstreamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StreamLocation>> {
        const response = await this.getSwtDataStreamLocationsWithOfficeWithNameUpstreamLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update CWMS Stream Location
     * Patch swtData streamLocations with name
     */
    async patchSwtDataStreamLocationsWithNameRaw(requestParameters: PatchSwtDataStreamLocationsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataStreamLocationsWithName().'
            );
        }

        if (requestParameters['streamLocation'] == null) {
            throw new runtime.RequiredError(
                'streamLocation',
                'Required parameter "streamLocation" was null or undefined when calling patchSwtDataStreamLocationsWithName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/stream-locations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StreamLocationToJSON(requestParameters['streamLocation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update CWMS Stream Location
     * Patch swtData streamLocations with name
     */
    async patchSwtDataStreamLocationsWithName(requestParameters: PatchSwtDataStreamLocationsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataStreamLocationsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Stream Location
     * Post swtData streamLocations
     */
    async postSwtDataStreamLocationsRaw(requestParameters: PostSwtDataStreamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['streamLocation'] == null) {
            throw new runtime.RequiredError(
                'streamLocation',
                'Required parameter "streamLocation" was null or undefined when calling postSwtDataStreamLocations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/stream-locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StreamLocationToJSON(requestParameters['streamLocation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Stream Location
     * Post swtData streamLocations
     */
    async postSwtDataStreamLocations(requestParameters: PostSwtDataStreamLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataStreamLocationsRaw(requestParameters, initOverrides);
    }

}
