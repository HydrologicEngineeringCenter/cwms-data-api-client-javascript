/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  LookupType,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    LookupTypeFromJSON,
    LookupTypeToJSON,
} from '../models/index';

export interface DeleteCwmsDataLookupTypesWithNameRequest {
    name: string;
    category: string;
    prefix: string;
    office: string;
}

export interface GetCwmsDataLookupTypesRequest {
    category: string;
    prefix: string;
    office: string;
}

export interface PatchCwmsDataLookupTypesWithNameRequest {
    name: string;
    category: string;
    prefix: string;
    lookupType: LookupType;
}

export interface PostCwmsDataLookupTypesRequest {
    category: string;
    prefix: string;
    lookupType: LookupType;
}

/**
 * 
 */
export class LookupTypesApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Lookup Type
     * Delete cwmsData lookupTypes with name
     */
    async deleteCwmsDataLookupTypesWithNameRaw(requestParameters: DeleteCwmsDataLookupTypesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataLookupTypesWithName().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling deleteCwmsDataLookupTypesWithName().'
            );
        }

        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling deleteCwmsDataLookupTypesWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataLookupTypesWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/lookup-types/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Lookup Type
     * Delete cwmsData lookupTypes with name
     */
    async deleteCwmsDataLookupTypesWithName(requestParameters: DeleteCwmsDataLookupTypesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataLookupTypesWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns matching CWMS Lookup Type Data.
     * Get cwmsData lookupTypes
     */
    async getCwmsDataLookupTypesRaw(requestParameters: GetCwmsDataLookupTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LookupType>>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling getCwmsDataLookupTypes().'
            );
        }

        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling getCwmsDataLookupTypes().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataLookupTypes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lookup-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LookupTypeFromJSON));
    }

    /**
     * Returns matching CWMS Lookup Type Data.
     * Get cwmsData lookupTypes
     */
    async getCwmsDataLookupTypes(requestParameters: GetCwmsDataLookupTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LookupType>> {
        const response = await this.getCwmsDataLookupTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update CWMS Lookup Type
     * Patch cwmsData lookupTypes with name
     */
    async patchCwmsDataLookupTypesWithNameRaw(requestParameters: PatchCwmsDataLookupTypesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataLookupTypesWithName().'
            );
        }

        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling patchCwmsDataLookupTypesWithName().'
            );
        }

        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling patchCwmsDataLookupTypesWithName().'
            );
        }

        if (requestParameters['lookupType'] == null) {
            throw new runtime.RequiredError(
                'lookupType',
                'Required parameter "lookupType" was null or undefined when calling patchCwmsDataLookupTypesWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/lookup-types/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LookupTypeToJSON(requestParameters['lookupType']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update CWMS Lookup Type
     * Patch cwmsData lookupTypes with name
     */
    async patchCwmsDataLookupTypesWithName(requestParameters: PatchCwmsDataLookupTypesWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataLookupTypesWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Lookup Type
     * Post cwmsData lookupTypes
     */
    async postCwmsDataLookupTypesRaw(requestParameters: PostCwmsDataLookupTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling postCwmsDataLookupTypes().'
            );
        }

        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling postCwmsDataLookupTypes().'
            );
        }

        if (requestParameters['lookupType'] == null) {
            throw new runtime.RequiredError(
                'lookupType',
                'Required parameter "lookupType" was null or undefined when calling postCwmsDataLookupTypes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/lookup-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookupTypeToJSON(requestParameters['lookupType']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Lookup Type
     * Post cwmsData lookupTypes
     */
    async postCwmsDataLookupTypes(requestParameters: PostCwmsDataLookupTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataLookupTypesRaw(requestParameters, initOverrides);
    }

}
