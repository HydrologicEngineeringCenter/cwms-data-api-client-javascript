/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  Embankment,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    EmbankmentFromJSON,
    EmbankmentToJSON,
} from '../models/index';

export interface DeleteSwtDataProjectsEmbankmentsWithNameRequest {
    name: string;
    office: string;
    method?: DeleteMethod;
}

export interface GetSwtDataProjectsEmbankmentsRequest {
    projectId: string;
    office?: string;
}

export interface GetSwtDataProjectsEmbankmentsWithNameRequest {
    name: string;
    office: string;
}

export interface PatchSwtDataProjectsEmbankmentsWithNameRequest {
    name: string;
    name2: string;
    office: string;
}

export interface PostSwtDataProjectsEmbankmentsRequest {
    embankment: Embankment;
    failIfExists?: boolean;
}

/**
 * 
 */
export class EmbankmentsApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Embankment
     * Delete swtData projects embankments with name
     */
    async deleteSwtDataProjectsEmbankmentsWithNameRaw(requestParameters: DeleteSwtDataProjectsEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectsEmbankmentsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsEmbankmentsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/embankments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Embankment
     * Delete swtData projects embankments with name
     */
    async deleteSwtDataProjectsEmbankmentsWithName(requestParameters: DeleteSwtDataProjectsEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsEmbankmentsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns matching CWMS Embankment Data for a Reservoir Project.
     * Get swtData projects embankments
     */
    async getSwtDataProjectsEmbankmentsRaw(requestParameters: GetSwtDataProjectsEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Embankment>>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsEmbankments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['project-id'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/embankments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbankmentFromJSON));
    }

    /**
     * Returns matching CWMS Embankment Data for a Reservoir Project.
     * Get swtData projects embankments
     */
    async getSwtDataProjectsEmbankments(requestParameters: GetSwtDataProjectsEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Embankment>> {
        const response = await this.getSwtDataProjectsEmbankmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Embankment Data
     * Get swtData projects embankments with name
     */
    async getSwtDataProjectsEmbankmentsWithNameRaw(requestParameters: GetSwtDataProjectsEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Embankment>>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataProjectsEmbankmentsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsEmbankmentsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/embankments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbankmentFromJSON));
    }

    /**
     * Returns CWMS Embankment Data
     * Get swtData projects embankments with name
     */
    async getSwtDataProjectsEmbankmentsWithName(requestParameters: GetSwtDataProjectsEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Embankment>> {
        const response = await this.getSwtDataProjectsEmbankmentsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename CWMS Embankment
     * Patch swtData projects embankments with name
     */
    async patchSwtDataProjectsEmbankmentsWithNameRaw(requestParameters: PatchSwtDataProjectsEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataProjectsEmbankmentsWithName().'
            );
        }

        if (requestParameters['name2'] == null) {
            throw new runtime.RequiredError(
                'name2',
                'Required parameter "name2" was null or undefined when calling patchSwtDataProjectsEmbankmentsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataProjectsEmbankmentsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name2'] != null) {
            queryParameters['name'] = requestParameters['name2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/embankments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename CWMS Embankment
     * Patch swtData projects embankments with name
     */
    async patchSwtDataProjectsEmbankmentsWithName(requestParameters: PatchSwtDataProjectsEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataProjectsEmbankmentsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Embankment
     * Post swtData projects embankments
     */
    async postSwtDataProjectsEmbankmentsRaw(requestParameters: PostSwtDataProjectsEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['embankment'] == null) {
            throw new runtime.RequiredError(
                'embankment',
                'Required parameter "embankment" was null or undefined when calling postSwtDataProjectsEmbankments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/embankments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmbankmentToJSON(requestParameters['embankment']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Embankment
     * Post swtData projects embankments
     */
    async postSwtDataProjectsEmbankments(requestParameters: PostSwtDataProjectsEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsEmbankmentsRaw(requestParameters, initOverrides);
    }

}
