/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  Embankment,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    EmbankmentFromJSON,
    EmbankmentToJSON,
} from '../models/index';

export interface DeleteCwmsDataEmbankmentsWithNameRequest {
    name: string;
    office: string;
    method?: DeleteMethod;
}

export interface GetCwmsDataEmbankmentsRequest {
    projectId: string;
    office?: string;
}

export interface GetCwmsDataEmbankmentsWithNameRequest {
    name: string;
    office: string;
}

export interface PatchCwmsDataEmbankmentsWithNameRequest {
    name: string;
    name2: string;
    office: string;
}

export interface PostCwmsDataEmbankmentsRequest {
    embankment: Embankment;
    failIfExists?: boolean;
}

/**
 * 
 */
export class EmbankmentsApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Embankment
     * Delete cwmsData embankments with name
     */
    async deleteCwmsDataEmbankmentsWithNameRaw(requestParameters: DeleteCwmsDataEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataEmbankmentsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataEmbankmentsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/embankments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Embankment
     * Delete cwmsData embankments with name
     */
    async deleteCwmsDataEmbankmentsWithName(requestParameters: DeleteCwmsDataEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataEmbankmentsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns matching CWMS Embankment Data for a Reservoir Project.
     * Get cwmsData embankments
     */
    async getCwmsDataEmbankmentsRaw(requestParameters: GetCwmsDataEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Embankment>>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getCwmsDataEmbankments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['project-id'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/embankments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbankmentFromJSON));
    }

    /**
     * Returns matching CWMS Embankment Data for a Reservoir Project.
     * Get cwmsData embankments
     */
    async getCwmsDataEmbankments(requestParameters: GetCwmsDataEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Embankment>> {
        const response = await this.getCwmsDataEmbankmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Embankment Data
     * Get cwmsData embankments with name
     */
    async getCwmsDataEmbankmentsWithNameRaw(requestParameters: GetCwmsDataEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Embankment>>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataEmbankmentsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataEmbankmentsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/embankments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbankmentFromJSON));
    }

    /**
     * Returns CWMS Embankment Data
     * Get cwmsData embankments with name
     */
    async getCwmsDataEmbankmentsWithName(requestParameters: GetCwmsDataEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Embankment>> {
        const response = await this.getCwmsDataEmbankmentsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename CWMS Embankment
     * Patch cwmsData embankments with name
     */
    async patchCwmsDataEmbankmentsWithNameRaw(requestParameters: PatchCwmsDataEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataEmbankmentsWithName().'
            );
        }

        if (requestParameters['name2'] == null) {
            throw new runtime.RequiredError(
                'name2',
                'Required parameter "name2" was null or undefined when calling patchCwmsDataEmbankmentsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchCwmsDataEmbankmentsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name2'] != null) {
            queryParameters['name'] = requestParameters['name2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/embankments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename CWMS Embankment
     * Patch cwmsData embankments with name
     */
    async patchCwmsDataEmbankmentsWithName(requestParameters: PatchCwmsDataEmbankmentsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataEmbankmentsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Embankment
     * Post cwmsData embankments
     */
    async postCwmsDataEmbankmentsRaw(requestParameters: PostCwmsDataEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['embankment'] == null) {
            throw new runtime.RequiredError(
                'embankment',
                'Required parameter "embankment" was null or undefined when calling postCwmsDataEmbankments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/embankments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmbankmentToJSON(requestParameters['embankment']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Embankment
     * Post cwmsData embankments
     */
    async postCwmsDataEmbankments(requestParameters: PostCwmsDataEmbankmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataEmbankmentsRaw(requestParameters, initOverrides);
    }

}
