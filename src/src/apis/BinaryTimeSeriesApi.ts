/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BinaryTimeSeries,
  CdaError,
} from '../models/index';
import {
    BinaryTimeSeriesFromJSON,
    BinaryTimeSeriesToJSON,
    CdaErrorFromJSON,
    CdaErrorToJSON,
} from '../models/index';

export interface DeleteSwtDataTimeSeriesBinaryWithNameRequest {
    name: string;
    office: string;
    begin: string;
    end: string;
    binaryTypeMask?: string;
    timezone?: string;
    versionDate?: string;
}

export interface GetSwtDataTimeSeriesBinaryRequest {
    office: string;
    name: string;
    begin: string;
    end: string;
    binaryTypeMask?: string;
    timezone?: string;
    versionDate?: string;
}

export interface GetSwtDataTimeSeriesBinaryWithNameValueRequest {
    name: string;
    office: string;
    date: string;
    timezone?: string;
    versionDate?: string;
    blobId?: string;
}

export interface PatchSwtDataTimeSeriesBinaryWithNameRequest {
    name: string;
    binaryTimeSeries: BinaryTimeSeries;
    replaceAll?: boolean;
}

export interface PostSwtDataTimeSeriesBinaryRequest {
    binaryTimeSeries: BinaryTimeSeries;
    replaceAll?: boolean;
}

/**
 * 
 */
export class BinaryTimeSeriesApi extends runtime.BaseAPI {

    /**
     * Deletes requested binary timeseries id
     * Delete swtData timeseries binary with name
     */
    async deleteSwtDataTimeSeriesBinaryWithNameRaw(requestParameters: DeleteSwtDataTimeSeriesBinaryWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataTimeSeriesBinaryWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataTimeSeriesBinaryWithName().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling deleteSwtDataTimeSeriesBinaryWithName().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling deleteSwtDataTimeSeriesBinaryWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['binaryTypeMask'] != null) {
            queryParameters['binary-type-mask'] = requestParameters['binaryTypeMask'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['versionDate'] != null) {
            queryParameters['version-date'] = requestParameters['versionDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/binary/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested binary timeseries id
     * Delete swtData timeseries binary with name
     */
    async deleteSwtDataTimeSeriesBinaryWithName(requestParameters: DeleteSwtDataTimeSeriesBinaryWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataTimeSeriesBinaryWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve binary time series values for a provided time window and date version.If individual values exceed 64 kilobytes, a URL to a separate download is provided instead of being included in the returned payload from this request.
     */
    async getSwtDataTimeSeriesBinaryRaw(requestParameters: GetSwtDataTimeSeriesBinaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BinaryTimeSeries>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataTimeSeriesBinary().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataTimeSeriesBinary().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling getSwtDataTimeSeriesBinary().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getSwtDataTimeSeriesBinary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['binaryTypeMask'] != null) {
            queryParameters['binary-type-mask'] = requestParameters['binaryTypeMask'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['versionDate'] != null) {
            queryParameters['version-date'] = requestParameters['versionDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/binary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BinaryTimeSeriesFromJSON(jsonValue));
    }

    /**
     * Retrieve binary time series values for a provided time window and date version.If individual values exceed 64 kilobytes, a URL to a separate download is provided instead of being included in the returned payload from this request.
     */
    async getSwtDataTimeSeriesBinary(requestParameters: GetSwtDataTimeSeriesBinaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BinaryTimeSeries> {
        const response = await this.getSwtDataTimeSeriesBinaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get swtData timeseries binary with name value
     */
    async getSwtDataTimeSeriesBinaryWithNameValueRaw(requestParameters: GetSwtDataTimeSeriesBinaryWithNameValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataTimeSeriesBinaryWithNameValue().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataTimeSeriesBinaryWithNameValue().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getSwtDataTimeSeriesBinaryWithNameValue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['versionDate'] != null) {
            queryParameters['version-date'] = requestParameters['versionDate'];
        }

        if (requestParameters['blobId'] != null) {
            queryParameters['blob-id'] = requestParameters['blobId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/binary/{name}/value`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get swtData timeseries binary with name value
     */
    async getSwtDataTimeSeriesBinaryWithNameValue(requestParameters: GetSwtDataTimeSeriesBinaryWithNameValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getSwtDataTimeSeriesBinaryWithNameValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a binary timeseries
     * Patch swtData timeseries binary with name
     */
    async patchSwtDataTimeSeriesBinaryWithNameRaw(requestParameters: PatchSwtDataTimeSeriesBinaryWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataTimeSeriesBinaryWithName().'
            );
        }

        if (requestParameters['binaryTimeSeries'] == null) {
            throw new runtime.RequiredError(
                'binaryTimeSeries',
                'Required parameter "binaryTimeSeries" was null or undefined when calling patchSwtDataTimeSeriesBinaryWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceAll'] != null) {
            queryParameters['replace-all'] = requestParameters['replaceAll'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/binary/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BinaryTimeSeriesToJSON(requestParameters['binaryTimeSeries']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a binary timeseries
     * Patch swtData timeseries binary with name
     */
    async patchSwtDataTimeSeriesBinaryWithName(requestParameters: PatchSwtDataTimeSeriesBinaryWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataTimeSeriesBinaryWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create new BinaryTimeSeries
     * Post swtData timeseries binary
     */
    async postSwtDataTimeSeriesBinaryRaw(requestParameters: PostSwtDataTimeSeriesBinaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['binaryTimeSeries'] == null) {
            throw new runtime.RequiredError(
                'binaryTimeSeries',
                'Required parameter "binaryTimeSeries" was null or undefined when calling postSwtDataTimeSeriesBinary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceAll'] != null) {
            queryParameters['replace-all'] = requestParameters['replaceAll'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/binary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BinaryTimeSeriesToJSON(requestParameters['binaryTimeSeries']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new BinaryTimeSeries
     * Post swtData timeseries binary
     */
    async postSwtDataTimeSeriesBinary(requestParameters: PostSwtDataTimeSeriesBinaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataTimeSeriesBinaryRaw(requestParameters, initOverrides);
    }

}
