/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  TextTimeseries,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    TextTimeseriesFromJSON,
    TextTimeseriesToJSON,
} from '../models/index';

export interface DeleteCwmsDataTimeseriesTextWithNameRequest {
    name: string;
    timeseries: string;
    office: string;
    textMask: string;
    begin: string;
    end: string;
    timezone?: string;
    versionDate?: string;
}

export interface GetCwmsDataTimeseriesTextRequest {
    office: string;
    name: string;
    begin: string;
    end: string;
    timezone?: string;
}

export interface GetCwmsDataTimeseriesTextWithNameValueRequest {
    name: string;
    office: string;
    date: string;
    timezone?: string;
    versionDate?: string;
    clobId?: string;
}

export interface PatchCwmsDataTimeseriesTextWithNameRequest {
    name: string;
    timeseries: string;
    textTimeseries: TextTimeseries;
    replaceAll?: boolean;
}

export interface PostCwmsDataTimeseriesTextRequest {
    textTimeseries: TextTimeseries;
    replaceAll?: boolean;
}

/**
 * 
 */
export class TextTimeseriesApi extends runtime.BaseAPI {

    /**
     * Deletes requested text timeseries id
     * Delete cwmsData timeseries text with name
     */
    async deleteCwmsDataTimeseriesTextWithNameRaw(requestParameters: DeleteCwmsDataTimeseriesTextWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataTimeseriesTextWithName().'
            );
        }

        if (requestParameters['timeseries'] == null) {
            throw new runtime.RequiredError(
                'timeseries',
                'Required parameter "timeseries" was null or undefined when calling deleteCwmsDataTimeseriesTextWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataTimeseriesTextWithName().'
            );
        }

        if (requestParameters['textMask'] == null) {
            throw new runtime.RequiredError(
                'textMask',
                'Required parameter "textMask" was null or undefined when calling deleteCwmsDataTimeseriesTextWithName().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling deleteCwmsDataTimeseriesTextWithName().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling deleteCwmsDataTimeseriesTextWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['textMask'] != null) {
            queryParameters['text-mask'] = requestParameters['textMask'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['versionDate'] != null) {
            queryParameters['version-date'] = requestParameters['versionDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/text/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters['timeseries']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested text timeseries id
     * Delete cwmsData timeseries text with name
     */
    async deleteCwmsDataTimeseriesTextWithName(requestParameters: DeleteCwmsDataTimeseriesTextWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataTimeseriesTextWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve text time series values for a provided time window and date version.If individual values exceed 64 kilobytes, a URL to a separate download is provided instead of being included in the returned payload from this request.
     */
    async getCwmsDataTimeseriesTextRaw(requestParameters: GetCwmsDataTimeseriesTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TextTimeseries>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataTimeseriesText().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataTimeseriesText().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling getCwmsDataTimeseriesText().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getCwmsDataTimeseriesText().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeseries/text`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TextTimeseriesFromJSON(jsonValue));
    }

    /**
     * Retrieve text time series values for a provided time window and date version.If individual values exceed 64 kilobytes, a URL to a separate download is provided instead of being included in the returned payload from this request.
     */
    async getCwmsDataTimeseriesText(requestParameters: GetCwmsDataTimeseriesTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TextTimeseries> {
        const response = await this.getCwmsDataTimeseriesTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cwmsData timeseries text with name value
     */
    async getCwmsDataTimeseriesTextWithNameValueRaw(requestParameters: GetCwmsDataTimeseriesTextWithNameValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getCwmsDataTimeseriesTextWithNameValue().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataTimeseriesTextWithNameValue().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getCwmsDataTimeseriesTextWithNameValue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['versionDate'] != null) {
            queryParameters['version-date'] = requestParameters['versionDate'];
        }

        if (requestParameters['clobId'] != null) {
            queryParameters['clob-id'] = requestParameters['clobId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/timeseries/text/{name}/value`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get cwmsData timeseries text with name value
     */
    async getCwmsDataTimeseriesTextWithNameValue(requestParameters: GetCwmsDataTimeseriesTextWithNameValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getCwmsDataTimeseriesTextWithNameValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a text timeseries
     * Patch cwmsData timeseries text with name
     */
    async patchCwmsDataTimeseriesTextWithNameRaw(requestParameters: PatchCwmsDataTimeseriesTextWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataTimeseriesTextWithName().'
            );
        }

        if (requestParameters['timeseries'] == null) {
            throw new runtime.RequiredError(
                'timeseries',
                'Required parameter "timeseries" was null or undefined when calling patchCwmsDataTimeseriesTextWithName().'
            );
        }

        if (requestParameters['textTimeseries'] == null) {
            throw new runtime.RequiredError(
                'textTimeseries',
                'Required parameter "textTimeseries" was null or undefined when calling patchCwmsDataTimeseriesTextWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceAll'] != null) {
            queryParameters['replace-all'] = requestParameters['replaceAll'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/text/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters['timeseries']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TextTimeseriesToJSON(requestParameters['textTimeseries']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a text timeseries
     * Patch cwmsData timeseries text with name
     */
    async patchCwmsDataTimeseriesTextWithName(requestParameters: PatchCwmsDataTimeseriesTextWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataTimeseriesTextWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create new TextTimeseries
     * Post cwmsData timeseries text
     */
    async postCwmsDataTimeseriesTextRaw(requestParameters: PostCwmsDataTimeseriesTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['textTimeseries'] == null) {
            throw new runtime.RequiredError(
                'textTimeseries',
                'Required parameter "textTimeseries" was null or undefined when calling postCwmsDataTimeseriesText().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceAll'] != null) {
            queryParameters['replace-all'] = requestParameters['replaceAll'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/text`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TextTimeseriesToJSON(requestParameters['textTimeseries']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new TextTimeseries
     * Post cwmsData timeseries text
     */
    async postCwmsDataTimeseriesText(requestParameters: PostCwmsDataTimeseriesTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataTimeseriesTextRaw(requestParameters, initOverrides);
    }

}
