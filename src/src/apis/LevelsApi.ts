/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  LocationLevel,
  LocationLevels,
  SpecifiedLevel,
  TimeSeries,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    LocationLevelFromJSON,
    LocationLevelToJSON,
    LocationLevelsFromJSON,
    LocationLevelsToJSON,
    SpecifiedLevelFromJSON,
    SpecifiedLevelToJSON,
    TimeSeriesFromJSON,
    TimeSeriesToJSON,
} from '../models/index';

export interface DeleteSwtDataLevelsWithLevelIdRequest {
    levelId: string;
    cascadeDelete?: boolean;
    office?: string;
    effectiveDate?: string;
    timezone?: string;
}

export interface DeleteSwtDataSpecifiedLevelsWithSpecifiedLevelIdRequest {
    specifiedLevelId: string;
    office: string;
}

export interface GetSwtDataLevelsRequest {
    levelIdMask?: string;
    office?: string;
    unit?: string;
    datum?: string;
    begin?: string;
    end?: string;
    timezone?: string;
    format?: string;
    page?: string;
    pageSize?: number;
}

export interface GetSwtDataLevelsWithLevelIdRequest {
    levelId: string;
    office: string;
    effectiveDate: string;
    timezone?: string;
    unit?: string;
}

export interface GetSwtDataLevelsWithLevelIdTimeSeriesRequest {
    levelId: string;
    office: string;
    unit: string;
    interval?: string;
    begin?: string;
    end?: string;
    timezone?: string;
}

export interface GetSwtDataSpecifiedLevelsRequest {
    office?: string;
    templateIdMask?: string;
}

export interface PatchSwtDataLevelsWithLevelIdRequest {
    levelId: string;
    locationLevel: LocationLevel;
    effectiveDate?: string;
}

export interface PatchSwtDataSpecifiedLevelsWithSpecifiedLevelIdRequest {
    specifiedLevelId: string;
    specifiedLevelId2: string;
    office: string;
}

export interface PostSwtDataLevelsRequest {
    locationLevel: LocationLevel;
}

export interface PostSwtDataSpecifiedLevelsRequest {
    specifiedLevel: SpecifiedLevel;
    failIfExists?: boolean;
}

/**
 * 
 */
export class LevelsApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Location Level
     * Delete swtData levels with levelId
     */
    async deleteSwtDataLevelsWithLevelIdRaw(requestParameters: DeleteSwtDataLevelsWithLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['levelId'] == null) {
            throw new runtime.RequiredError(
                'levelId',
                'Required parameter "levelId" was null or undefined when calling deleteSwtDataLevelsWithLevelId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cascadeDelete'] != null) {
            queryParameters['cascade-delete'] = requestParameters['cascadeDelete'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['effectiveDate'] != null) {
            queryParameters['effective-date'] = requestParameters['effectiveDate'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/levels/{level-id}`.replace(`{${"level-id"}}`, encodeURIComponent(String(requestParameters['levelId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Location Level
     * Delete swtData levels with levelId
     */
    async deleteSwtDataLevelsWithLevelId(requestParameters: DeleteSwtDataLevelsWithLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataLevelsWithLevelIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes requested specified level id
     * Delete swtData specifiedLevels with specifiedLevelId
     */
    async deleteSwtDataSpecifiedLevelsWithSpecifiedLevelIdRaw(requestParameters: DeleteSwtDataSpecifiedLevelsWithSpecifiedLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['specifiedLevelId'] == null) {
            throw new runtime.RequiredError(
                'specifiedLevelId',
                'Required parameter "specifiedLevelId" was null or undefined when calling deleteSwtDataSpecifiedLevelsWithSpecifiedLevelId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataSpecifiedLevelsWithSpecifiedLevelId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/specified-levels/{specified-level-id}`.replace(`{${"specified-level-id"}}`, encodeURIComponent(String(requestParameters['specifiedLevelId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested specified level id
     * Delete swtData specifiedLevels with specifiedLevelId
     */
    async deleteSwtDataSpecifiedLevelsWithSpecifiedLevelId(requestParameters: DeleteSwtDataSpecifiedLevelsWithSpecifiedLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataSpecifiedLevelsWithSpecifiedLevelIdRaw(requestParameters, initOverrides);
    }

    /**
     * Get swtData levels
     */
    async getSwtDataLevelsRaw(requestParameters: GetSwtDataLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['levelIdMask'] != null) {
            queryParameters['level-id-mask'] = requestParameters['levelIdMask'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        if (requestParameters['datum'] != null) {
            queryParameters['datum'] = requestParameters['datum'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get swtData levels
     */
    async getSwtDataLevels(requestParameters: GetSwtDataLevelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getSwtDataLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested Location Level
     * Get swtData levels with levelId
     */
    async getSwtDataLevelsWithLevelIdRaw(requestParameters: GetSwtDataLevelsWithLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationLevel>> {
        if (requestParameters['levelId'] == null) {
            throw new runtime.RequiredError(
                'levelId',
                'Required parameter "levelId" was null or undefined when calling getSwtDataLevelsWithLevelId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataLevelsWithLevelId().'
            );
        }

        if (requestParameters['effectiveDate'] == null) {
            throw new runtime.RequiredError(
                'effectiveDate',
                'Required parameter "effectiveDate" was null or undefined when calling getSwtDataLevelsWithLevelId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['effectiveDate'] != null) {
            queryParameters['effective-date'] = requestParameters['effectiveDate'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/levels/{level-id}`.replace(`{${"level-id"}}`, encodeURIComponent(String(requestParameters['levelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationLevelFromJSON(jsonValue));
    }

    /**
     * Retrieves requested Location Level
     * Get swtData levels with levelId
     */
    async getSwtDataLevelsWithLevelId(requestParameters: GetSwtDataLevelsWithLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationLevel> {
        const response = await this.getSwtDataLevelsWithLevelIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested Location Level
     * Get swtData levels with levelId timeseries
     */
    async getSwtDataLevelsWithLevelIdTimeSeriesRaw(requestParameters: GetSwtDataLevelsWithLevelIdTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSeries>> {
        if (requestParameters['levelId'] == null) {
            throw new runtime.RequiredError(
                'levelId',
                'Required parameter "levelId" was null or undefined when calling getSwtDataLevelsWithLevelIdTimeSeries().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataLevelsWithLevelIdTimeSeries().'
            );
        }

        if (requestParameters['unit'] == null) {
            throw new runtime.RequiredError(
                'unit',
                'Required parameter "unit" was null or undefined when calling getSwtDataLevelsWithLevelIdTimeSeries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['unit'] != null) {
            queryParameters['unit'] = requestParameters['unit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/levels/{level-id}/timeseries`.replace(`{${"level-id"}}`, encodeURIComponent(String(requestParameters['levelId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesFromJSON(jsonValue));
    }

    /**
     * Retrieves requested Location Level
     * Get swtData levels with levelId timeseries
     */
    async getSwtDataLevelsWithLevelIdTimeSeries(requestParameters: GetSwtDataLevelsWithLevelIdTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSeries> {
        const response = await this.getSwtDataLevelsWithLevelIdTimeSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get swtData specifiedLevels
     */
    async getSwtDataSpecifiedLevelsRaw(requestParameters: GetSwtDataSpecifiedLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpecifiedLevel>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['templateIdMask'] != null) {
            queryParameters['template-id-mask'] = requestParameters['templateIdMask'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/specified-levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpecifiedLevelFromJSON(jsonValue));
    }

    /**
     * Get swtData specifiedLevels
     */
    async getSwtDataSpecifiedLevels(requestParameters: GetSwtDataSpecifiedLevelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpecifiedLevel> {
        const response = await this.getSwtDataSpecifiedLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update CWMS Location Level
     * Patch swtData levels with levelId
     */
    async patchSwtDataLevelsWithLevelIdRaw(requestParameters: PatchSwtDataLevelsWithLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['levelId'] == null) {
            throw new runtime.RequiredError(
                'levelId',
                'Required parameter "levelId" was null or undefined when calling patchSwtDataLevelsWithLevelId().'
            );
        }

        if (requestParameters['locationLevel'] == null) {
            throw new runtime.RequiredError(
                'locationLevel',
                'Required parameter "locationLevel" was null or undefined when calling patchSwtDataLevelsWithLevelId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['effectiveDate'] != null) {
            queryParameters['effective-date'] = requestParameters['effectiveDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/levels/{level-id}`.replace(`{${"level-id"}}`, encodeURIComponent(String(requestParameters['levelId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationLevelToJSON(requestParameters['locationLevel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update CWMS Location Level
     * Patch swtData levels with levelId
     */
    async patchSwtDataLevelsWithLevelId(requestParameters: PatchSwtDataLevelsWithLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataLevelsWithLevelIdRaw(requestParameters, initOverrides);
    }

    /**
     * Renames the requested specified level id
     * Patch swtData specifiedLevels with specifiedLevelId
     */
    async patchSwtDataSpecifiedLevelsWithSpecifiedLevelIdRaw(requestParameters: PatchSwtDataSpecifiedLevelsWithSpecifiedLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['specifiedLevelId'] == null) {
            throw new runtime.RequiredError(
                'specifiedLevelId',
                'Required parameter "specifiedLevelId" was null or undefined when calling patchSwtDataSpecifiedLevelsWithSpecifiedLevelId().'
            );
        }

        if (requestParameters['specifiedLevelId2'] == null) {
            throw new runtime.RequiredError(
                'specifiedLevelId2',
                'Required parameter "specifiedLevelId2" was null or undefined when calling patchSwtDataSpecifiedLevelsWithSpecifiedLevelId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataSpecifiedLevelsWithSpecifiedLevelId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['specifiedLevelId2'] != null) {
            queryParameters['specified-level-id'] = requestParameters['specifiedLevelId2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/specified-levels/{specified-level-id}`.replace(`{${"specified-level-id"}}`, encodeURIComponent(String(requestParameters['specifiedLevelId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames the requested specified level id
     * Patch swtData specifiedLevels with specifiedLevelId
     */
    async patchSwtDataSpecifiedLevelsWithSpecifiedLevelId(requestParameters: PatchSwtDataSpecifiedLevelsWithSpecifiedLevelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataSpecifiedLevelsWithSpecifiedLevelIdRaw(requestParameters, initOverrides);
    }

    /**
     * Create new CWMS Location Level
     * Post swtData levels
     */
    async postSwtDataLevelsRaw(requestParameters: PostSwtDataLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['locationLevel'] == null) {
            throw new runtime.RequiredError(
                'locationLevel',
                'Required parameter "locationLevel" was null or undefined when calling postSwtDataLevels().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/levels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationLevelToJSON(requestParameters['locationLevel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new CWMS Location Level
     * Post swtData levels
     */
    async postSwtDataLevels(requestParameters: PostSwtDataLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataLevelsRaw(requestParameters, initOverrides);
    }

    /**
     * Create new SpecifiedLevel
     * Post swtData specifiedLevels
     */
    async postSwtDataSpecifiedLevelsRaw(requestParameters: PostSwtDataSpecifiedLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['specifiedLevel'] == null) {
            throw new runtime.RequiredError(
                'specifiedLevel',
                'Required parameter "specifiedLevel" was null or undefined when calling postSwtDataSpecifiedLevels().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/specified-levels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpecifiedLevelToJSON(requestParameters['specifiedLevel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new SpecifiedLevel
     * Post swtData specifiedLevels
     */
    async postSwtDataSpecifiedLevels(requestParameters: PostSwtDataSpecifiedLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataSpecifiedLevelsRaw(requestParameters, initOverrides);
    }

}
