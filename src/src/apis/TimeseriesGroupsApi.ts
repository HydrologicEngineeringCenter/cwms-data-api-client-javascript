/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  TimeseriesGroup,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    TimeseriesGroupFromJSON,
    TimeseriesGroupToJSON,
} from '../models/index';

export interface DeleteSwtDataTimeseriesGroupWithGroupIdRequest {
    groupId: string;
    categoryId: string;
    office: string;
}

export interface GetSwtDataTimeseriesGroupRequest {
    office?: string;
    includeAssigned?: boolean;
    timeseriesCategoryLike?: string;
    timeseriesGroupLike?: string;
}

export interface GetSwtDataTimeseriesGroupWithGroupIdRequest {
    groupId: string;
    office: string;
    categoryId: string;
}

export interface PatchSwtDataTimeseriesGroupWithGroupIdRequest {
    groupId: string;
    office: string;
    timeseriesGroup: TimeseriesGroup;
    replaceAssignedTs?: boolean;
}

export interface PostSwtDataTimeseriesGroupRequest {
    timeseriesGroup: TimeseriesGroup;
    failIfExists?: boolean;
}

/**
 * 
 */
export class TimeseriesGroupsApi extends runtime.BaseAPI {

    /**
     * Deletes requested time series group
     * Delete swtData timeseries group with groupId
     */
    async deleteSwtDataTimeseriesGroupWithGroupIdRaw(requestParameters: DeleteSwtDataTimeseriesGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling deleteSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling deleteSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['categoryId'] != null) {
            queryParameters['category-id'] = requestParameters['categoryId'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested time series group
     * Delete swtData timeseries group with groupId
     */
    async deleteSwtDataTimeseriesGroupWithGroupId(requestParameters: DeleteSwtDataTimeseriesGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataTimeseriesGroupWithGroupIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns CWMS Timeseries Groups Data
     * Get swtData timeseries group
     */
    async getSwtDataTimeseriesGroupRaw(requestParameters: GetSwtDataTimeseriesGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeseriesGroup>>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['includeAssigned'] != null) {
            queryParameters['include-assigned'] = requestParameters['includeAssigned'];
        }

        if (requestParameters['timeseriesCategoryLike'] != null) {
            queryParameters['timeseries-category-like'] = requestParameters['timeseriesCategoryLike'];
        }

        if (requestParameters['timeseriesGroupLike'] != null) {
            queryParameters['timeseries-group-like'] = requestParameters['timeseriesGroupLike'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeseriesGroupFromJSON));
    }

    /**
     * Returns CWMS Timeseries Groups Data
     * Get swtData timeseries group
     */
    async getSwtDataTimeseriesGroup(requestParameters: GetSwtDataTimeseriesGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeseriesGroup>> {
        const response = await this.getSwtDataTimeseriesGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested timeseries group
     * Get swtData timeseries group with groupId
     */
    async getSwtDataTimeseriesGroupWithGroupIdRaw(requestParameters: GetSwtDataTimeseriesGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeseriesGroup>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['category-id'] = requestParameters['categoryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesGroupFromJSON(jsonValue));
    }

    /**
     * Retrieves requested timeseries group
     * Get swtData timeseries group with groupId
     */
    async getSwtDataTimeseriesGroupWithGroupId(requestParameters: GetSwtDataTimeseriesGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeseriesGroup> {
        const response = await this.getSwtDataTimeseriesGroupWithGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing TimeseriesGroup. Allows for renaming of the group, assigning new time series, and unassigning all time series from the group.
     * Patch swtData timeseries group with groupId
     */
    async patchSwtDataTimeseriesGroupWithGroupIdRaw(requestParameters: PatchSwtDataTimeseriesGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling patchSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        if (requestParameters['timeseriesGroup'] == null) {
            throw new runtime.RequiredError(
                'timeseriesGroup',
                'Required parameter "timeseriesGroup" was null or undefined when calling patchSwtDataTimeseriesGroupWithGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceAssignedTs'] != null) {
            queryParameters['replace-assigned-ts'] = requestParameters['replaceAssignedTs'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesGroupToJSON(requestParameters['timeseriesGroup']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update existing TimeseriesGroup. Allows for renaming of the group, assigning new time series, and unassigning all time series from the group.
     * Patch swtData timeseries group with groupId
     */
    async patchSwtDataTimeseriesGroupWithGroupId(requestParameters: PatchSwtDataTimeseriesGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataTimeseriesGroupWithGroupIdRaw(requestParameters, initOverrides);
    }

    /**
     * Create new TimeseriesGroup
     * Post swtData timeseries group
     */
    async postSwtDataTimeseriesGroupRaw(requestParameters: PostSwtDataTimeseriesGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseriesGroup'] == null) {
            throw new runtime.RequiredError(
                'timeseriesGroup',
                'Required parameter "timeseriesGroup" was null or undefined when calling postSwtDataTimeseriesGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesGroupToJSON(requestParameters['timeseriesGroup']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new TimeseriesGroup
     * Post swtData timeseries group
     */
    async postSwtDataTimeseriesGroup(requestParameters: PostSwtDataTimeseriesGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataTimeseriesGroupRaw(requestParameters, initOverrides);
    }

}
