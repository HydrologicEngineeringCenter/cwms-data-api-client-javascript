/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  GateChange,
  Outlet,
  UnitSystem,
  VirtualOutlet,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    GateChangeFromJSON,
    GateChangeToJSON,
    OutletFromJSON,
    OutletToJSON,
    UnitSystemFromJSON,
    UnitSystemToJSON,
    VirtualOutletFromJSON,
    VirtualOutletToJSON,
} from '../models/index';

export interface DeleteCwmsDataProjectsOutletsWithNameRequest {
    name: string;
    office: string;
    method?: DeleteMethod;
}

export interface DeleteCwmsDataProjectsWithOfficeWithProjectIdGateChangesRequest {
    office: string;
    projectId: string;
    begin: string;
    end: string;
    overrideProtection?: boolean;
}

export interface DeleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest {
    office: string;
    projectId: string;
    name: string;
    method?: DeleteMethod;
}

export interface GetProjectsOutletsRequest {
    office: string;
    projectId: string;
}

export interface GetProjectsOutletsWithNameRequest {
    name: string;
    office: string;
}

export interface GetProjectsWithOfficeWithProjectIdGateChangesRequest {
    office: string;
    projectId: string;
    begin: string;
    end: string;
    startTimeInclusive?: boolean;
    endTimeInclusive?: boolean;
    unitSystem?: UnitSystem;
    pageSize?: number;
}

export interface GetProjectsWithOfficeWithProjectIdVirtualOutletsRequest {
    office: string;
    projectId: string;
}

export interface GetProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest {
    office: string;
    projectId: string;
    name: string;
}

export interface PatchCwmsDataProjectsOutletsWithNameRequest {
    name: string;
    name2: string;
    office: string;
}

export interface PostCwmsDataProjectsGateChangesRequest {
    gateChange: Array<GateChange>;
    failIfExists?: boolean;
}

export interface PostCwmsDataProjectsOutletsRequest {
    outlet: Outlet;
    failIfExists?: boolean;
}

export interface PostCwmsDataProjectsVirtualOutletsRequest {
    virtualOutlet: VirtualOutlet;
    failIfExists?: boolean;
}

/**
 * 
 */
export class OutletsApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Outlet
     * Delete CwmsData projects outlets with name
     */
    async deleteCwmsDataProjectsOutletsWithNameRaw(requestParameters: DeleteCwmsDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataProjectsOutletsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Outlet
     * Delete CwmsData projects outlets with name
     */
    async deleteCwmsDataProjectsOutletsWithName(requestParameters: DeleteCwmsDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsOutletsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes matching CWMS gate change data for a Reservoir Project.
     * Delete CwmsData projects with office with projectId gateChanges
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['overrideProtection'] != null) {
            queryParameters['override-protection'] = requestParameters['overrideProtection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/gate-changes`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes matching CWMS gate change data for a Reservoir Project.
     * Delete CwmsData projects with office with projectId gateChanges
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdGateChanges(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters, initOverrides);
    }

    /**
     * Delete CWMS Virtual Outlet
     * Delete CwmsData projects with office with projectId virtualOutlets with name
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/virtual-outlets/{name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Virtual Outlet
     * Delete CwmsData projects with office with projectId virtualOutlets with name
     */
    async deleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName(requestParameters: DeleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns matching CWMS Outlet Data for a Reservoir Project.
     * Get CwmsData projects outlets
     */
    async getProjectsOutletsRaw(requestParameters: GetProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Outlet>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsOutlets().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsOutlets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['project-id'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OutletFromJSON));
    }

    /**
     * Returns matching CWMS Outlet Data for a Reservoir Project.
     * Get CwmsData projects outlets
     */
    async getProjectsOutlets(requestParameters: GetProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Outlet>> {
        const response = await this.getProjectsOutletsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Outlet Data
     * Get CwmsData projects outlets with name
     */
    async getProjectsOutletsWithNameRaw(requestParameters: GetProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Outlet>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getProjectsOutletsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutletFromJSON(jsonValue));
    }

    /**
     * Returns CWMS Outlet Data
     * Get CwmsData projects outlets with name
     */
    async getProjectsOutletsWithName(requestParameters: GetProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Outlet> {
        const response = await this.getProjectsOutletsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns matching CWMS gate change data for a Reservoir Project.
     * Get CwmsData projects with office with projectId gateChanges
     */
    async getProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters: GetProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GateChange>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling getProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['startTimeInclusive'] != null) {
            queryParameters['start-time-inclusive'] = requestParameters['startTimeInclusive'];
        }

        if (requestParameters['endTimeInclusive'] != null) {
            queryParameters['end-time-inclusive'] = requestParameters['endTimeInclusive'];
        }

        if (requestParameters['unitSystem'] != null) {
            queryParameters['unit-system'] = requestParameters['unitSystem'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/gate-changes`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GateChangeFromJSON));
    }

    /**
     * Returns matching CWMS gate change data for a Reservoir Project.
     * Get CwmsData projects with office with projectId gateChanges
     */
    async getProjectsWithOfficeWithProjectIdGateChanges(requestParameters: GetProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GateChange>> {
        const response = await this.getProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns matching CWMS Virtual Outlet Data for a Reservoir Project.
     * Get CwmsData projects with office with projectId virtualOutlets
     */
    async getProjectsWithOfficeWithProjectIdVirtualOutletsRaw(requestParameters: GetProjectsWithOfficeWithProjectIdVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VirtualOutlet>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeWithProjectIdVirtualOutlets().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsWithOfficeWithProjectIdVirtualOutlets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/virtual-outlets`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirtualOutletFromJSON));
    }

    /**
     * Returns matching CWMS Virtual Outlet Data for a Reservoir Project.
     * Get CwmsData projects with office with projectId virtualOutlets
     */
    async getProjectsWithOfficeWithProjectIdVirtualOutlets(requestParameters: GetProjectsWithOfficeWithProjectIdVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VirtualOutlet>> {
        const response = await this.getProjectsWithOfficeWithProjectIdVirtualOutletsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Virtual Outlet Data
     * Get CwmsData projects with office with projectId virtualOutlets with name
     */
    async getProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters: GetProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VirtualOutlet>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/virtual-outlets/{name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VirtualOutletFromJSON(jsonValue));
    }

    /**
     * Returns CWMS Virtual Outlet Data
     * Get CwmsData projects with office with projectId virtualOutlets with name
     */
    async getProjectsWithOfficeWithProjectIdVirtualOutletsWithName(requestParameters: GetProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VirtualOutlet> {
        const response = await this.getProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename CWMS Outlet
     * Patch CwmsData projects outlets with name
     */
    async patchCwmsDataProjectsOutletsWithNameRaw(requestParameters: PatchCwmsDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchCwmsDataProjectsOutletsWithName().'
            );
        }

        if (requestParameters['name2'] == null) {
            throw new runtime.RequiredError(
                'name2',
                'Required parameter "name2" was null or undefined when calling patchCwmsDataProjectsOutletsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchCwmsDataProjectsOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name2'] != null) {
            queryParameters['name'] = requestParameters['name2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename CWMS Outlet
     * Patch CwmsData projects outlets with name
     */
    async patchCwmsDataProjectsOutletsWithName(requestParameters: PatchCwmsDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataProjectsOutletsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Gate Changes
     * Post CwmsData projects gateChanges
     */
    async postCwmsDataProjectsGateChangesRaw(requestParameters: PostCwmsDataProjectsGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gateChange'] == null) {
            throw new runtime.RequiredError(
                'gateChange',
                'Required parameter "gateChange" was null or undefined when calling postCwmsDataProjectsGateChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/gate-changes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['gateChange']!.map(GateChangeToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Gate Changes
     * Post CwmsData projects gateChanges
     */
    async postCwmsDataProjectsGateChanges(requestParameters: PostCwmsDataProjectsGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataProjectsGateChangesRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Outlet
     * Post CwmsData projects outlets
     */
    async postCwmsDataProjectsOutletsRaw(requestParameters: PostCwmsDataProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['outlet'] == null) {
            throw new runtime.RequiredError(
                'outlet',
                'Required parameter "outlet" was null or undefined when calling postCwmsDataProjectsOutlets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OutletToJSON(requestParameters['outlet']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Outlet
     * Post CwmsData projects outlets
     */
    async postCwmsDataProjectsOutlets(requestParameters: PostCwmsDataProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataProjectsOutletsRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Virtual Outlet
     * Post CwmsData projects virtualOutlets
     */
    async postCwmsDataProjectsVirtualOutletsRaw(requestParameters: PostCwmsDataProjectsVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['virtualOutlet'] == null) {
            throw new runtime.RequiredError(
                'virtualOutlet',
                'Required parameter "virtualOutlet" was null or undefined when calling postCwmsDataProjectsVirtualOutlets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/virtual-outlets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VirtualOutletToJSON(requestParameters['virtualOutlet']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Virtual Outlet
     * Post CwmsData projects virtualOutlets
     */
    async postCwmsDataProjectsVirtualOutlets(requestParameters: PostCwmsDataProjectsVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataProjectsVirtualOutletsRaw(requestParameters, initOverrides);
    }

}
