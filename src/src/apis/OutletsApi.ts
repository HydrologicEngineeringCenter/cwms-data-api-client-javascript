/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  GateChange,
  Outlet,
  UnitSystem,
  VirtualOutlet,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    GateChangeFromJSON,
    GateChangeToJSON,
    OutletFromJSON,
    OutletToJSON,
    UnitSystemFromJSON,
    UnitSystemToJSON,
    VirtualOutletFromJSON,
    VirtualOutletToJSON,
} from '../models/index';

export interface DeleteSwtDataProjectsOutletsWithNameRequest {
    name: string;
    office: string;
    method?: DeleteMethod;
}

export interface DeleteSwtDataProjectsWithOfficeWithProjectIdGateChangesRequest {
    office: string;
    projectId: string;
    begin: string;
    end: string;
    overrideProtection?: boolean;
}

export interface DeleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest {
    office: string;
    projectId: string;
    name: string;
    method?: DeleteMethod;
}

export interface GetSwtDataProjectsOutletsRequest {
    office: string;
    projectId: string;
}

export interface GetSwtDataProjectsOutletsWithNameRequest {
    name: string;
    office: string;
}

export interface GetSwtDataProjectsWithOfficeWithProjectIdGateChangesRequest {
    office: string;
    projectId: string;
    begin: string;
    end: string;
    startTimeInclusive?: boolean;
    endTimeInclusive?: boolean;
    unitSystem?: UnitSystem;
    pageSize?: number;
}

export interface GetSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsRequest {
    office: string;
    projectId: string;
}

export interface GetSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest {
    office: string;
    projectId: string;
    name: string;
}

export interface PatchSwtDataProjectsOutletsWithNameRequest {
    name: string;
    name2: string;
    office: string;
}

export interface PostSwtDataProjectsGateChangesRequest {
    gateChange: Array<GateChange>;
    failIfExists?: boolean;
}

export interface PostSwtDataProjectsOutletsRequest {
    outlet: Outlet;
    failIfExists?: boolean;
}

export interface PostSwtDataProjectsVirtualOutletsRequest {
    virtualOutlet: VirtualOutlet;
    failIfExists?: boolean;
}

/**
 * 
 */
export class OutletsApi extends runtime.BaseAPI {

    /**
     * Delete CWMS Outlet
     * Delete swtData projects outlets with name
     */
    async deleteSwtDataProjectsOutletsWithNameRaw(requestParameters: DeleteSwtDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectsOutletsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Outlet
     * Delete swtData projects outlets with name
     */
    async deleteSwtDataProjectsOutletsWithName(requestParameters: DeleteSwtDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsOutletsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes matching CWMS gate change data for a Reservoir Project.
     * Delete swtData projects with office with projectId gateChanges
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['overrideProtection'] != null) {
            queryParameters['override-protection'] = requestParameters['overrideProtection'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/gate-changes`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes matching CWMS gate change data for a Reservoir Project.
     * Delete swtData projects with office with projectId gateChanges
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdGateChanges(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters, initOverrides);
    }

    /**
     * Delete CWMS Virtual Outlet
     * Delete swtData projects with office with projectId virtualOutlets with name
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/virtual-outlets/{name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete CWMS Virtual Outlet
     * Delete swtData projects with office with projectId virtualOutlets with name
     */
    async deleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName(requestParameters: DeleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns matching CWMS Outlet Data for a Reservoir Project.
     * Get swtData projects outlets
     */
    async getSwtDataProjectsOutletsRaw(requestParameters: GetSwtDataProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Outlet>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsOutlets().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsOutlets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['project-id'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OutletFromJSON));
    }

    /**
     * Returns matching CWMS Outlet Data for a Reservoir Project.
     * Get swtData projects outlets
     */
    async getSwtDataProjectsOutlets(requestParameters: GetSwtDataProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Outlet>> {
        const response = await this.getSwtDataProjectsOutletsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Outlet Data
     * Get swtData projects outlets with name
     */
    async getSwtDataProjectsOutletsWithNameRaw(requestParameters: GetSwtDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Outlet>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataProjectsOutletsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutletFromJSON(jsonValue));
    }

    /**
     * Returns CWMS Outlet Data
     * Get swtData projects outlets with name
     */
    async getSwtDataProjectsOutletsWithName(requestParameters: GetSwtDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Outlet> {
        const response = await this.getSwtDataProjectsOutletsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns matching CWMS gate change data for a Reservoir Project.
     * Get swtData projects with office with projectId gateChanges
     */
    async getSwtDataProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GateChange>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['begin'] == null) {
            throw new runtime.RequiredError(
                'begin',
                'Required parameter "begin" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdGateChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['begin'] != null) {
            queryParameters['begin'] = requestParameters['begin'];
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = requestParameters['end'];
        }

        if (requestParameters['startTimeInclusive'] != null) {
            queryParameters['start-time-inclusive'] = requestParameters['startTimeInclusive'];
        }

        if (requestParameters['endTimeInclusive'] != null) {
            queryParameters['end-time-inclusive'] = requestParameters['endTimeInclusive'];
        }

        if (requestParameters['unitSystem'] != null) {
            queryParameters['unit-system'] = requestParameters['unitSystem'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/gate-changes`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GateChangeFromJSON));
    }

    /**
     * Returns matching CWMS gate change data for a Reservoir Project.
     * Get swtData projects with office with projectId gateChanges
     */
    async getSwtDataProjectsWithOfficeWithProjectIdGateChanges(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GateChange>> {
        const response = await this.getSwtDataProjectsWithOfficeWithProjectIdGateChangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns matching CWMS Virtual Outlet Data for a Reservoir Project.
     * Get swtData projects with office with projectId virtualOutlets
     */
    async getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsRaw(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VirtualOutlet>>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdVirtualOutlets().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdVirtualOutlets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/virtual-outlets`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirtualOutletFromJSON));
    }

    /**
     * Returns matching CWMS Virtual Outlet Data for a Reservoir Project.
     * Get swtData projects with office with projectId virtualOutlets
     */
    async getSwtDataProjectsWithOfficeWithProjectIdVirtualOutlets(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VirtualOutlet>> {
        const response = await this.getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns CWMS Virtual Outlet Data
     * Get swtData projects with office with projectId virtualOutlets with name
     */
    async getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VirtualOutlet>> {
        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/{office}/{project-id}/virtual-outlets/{name}`.replace(`{${"office"}}`, encodeURIComponent(String(requestParameters['office']))).replace(`{${"project-id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VirtualOutletFromJSON(jsonValue));
    }

    /**
     * Returns CWMS Virtual Outlet Data
     * Get swtData projects with office with projectId virtualOutlets with name
     */
    async getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithName(requestParameters: GetSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VirtualOutlet> {
        const response = await this.getSwtDataProjectsWithOfficeWithProjectIdVirtualOutletsWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename CWMS Outlet
     * Patch swtData projects outlets with name
     */
    async patchSwtDataProjectsOutletsWithNameRaw(requestParameters: PatchSwtDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataProjectsOutletsWithName().'
            );
        }

        if (requestParameters['name2'] == null) {
            throw new runtime.RequiredError(
                'name2',
                'Required parameter "name2" was null or undefined when calling patchSwtDataProjectsOutletsWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataProjectsOutletsWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name2'] != null) {
            queryParameters['name'] = requestParameters['name2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename CWMS Outlet
     * Patch swtData projects outlets with name
     */
    async patchSwtDataProjectsOutletsWithName(requestParameters: PatchSwtDataProjectsOutletsWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataProjectsOutletsWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Gate Changes
     * Post swtData projects gateChanges
     */
    async postSwtDataProjectsGateChangesRaw(requestParameters: PostSwtDataProjectsGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gateChange'] == null) {
            throw new runtime.RequiredError(
                'gateChange',
                'Required parameter "gateChange" was null or undefined when calling postSwtDataProjectsGateChanges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/gate-changes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['gateChange']!.map(GateChangeToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Gate Changes
     * Post swtData projects gateChanges
     */
    async postSwtDataProjectsGateChanges(requestParameters: PostSwtDataProjectsGateChangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsGateChangesRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Outlet
     * Post swtData projects outlets
     */
    async postSwtDataProjectsOutletsRaw(requestParameters: PostSwtDataProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['outlet'] == null) {
            throw new runtime.RequiredError(
                'outlet',
                'Required parameter "outlet" was null or undefined when calling postSwtDataProjectsOutlets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/outlets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OutletToJSON(requestParameters['outlet']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Outlet
     * Post swtData projects outlets
     */
    async postSwtDataProjectsOutlets(requestParameters: PostSwtDataProjectsOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsOutletsRaw(requestParameters, initOverrides);
    }

    /**
     * Create CWMS Virtual Outlet
     * Post swtData projects virtualOutlets
     */
    async postSwtDataProjectsVirtualOutletsRaw(requestParameters: PostSwtDataProjectsVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['virtualOutlet'] == null) {
            throw new runtime.RequiredError(
                'virtualOutlet',
                'Required parameter "virtualOutlet" was null or undefined when calling postSwtDataProjectsVirtualOutlets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=1';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/projects/virtual-outlets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VirtualOutletToJSON(requestParameters['virtualOutlet']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create CWMS Virtual Outlet
     * Post swtData projects virtualOutlets
     */
    async postSwtDataProjectsVirtualOutlets(requestParameters: PostSwtDataProjectsVirtualOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataProjectsVirtualOutletsRaw(requestParameters, initOverrides);
    }

}
