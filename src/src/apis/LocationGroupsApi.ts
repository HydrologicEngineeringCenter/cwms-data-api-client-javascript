/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  LocationGroup,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    LocationGroupFromJSON,
    LocationGroupToJSON,
} from '../models/index';

export interface DeleteSwtDataLocationGroupWithGroupIdRequest {
    groupId: string;
    categoryId: string;
    office: string;
    cascadeDelete?: boolean;
}

export interface GetSwtDataLocationGroupRequest {
    office?: string;
    includeAssigned?: boolean;
    locationCategoryLike?: string;
}

export interface GetSwtDataLocationGroupWithGroupIdRequest {
    groupId: string;
    office: string;
    categoryId: string;
}

export interface PatchSwtDataLocationGroupWithGroupIdRequest {
    groupId: string;
    office: string;
    locationGroup: LocationGroup;
    replaceAssignedLocs?: boolean;
}

export interface PostSwtDataLocationGroupRequest {
    locationGroup: LocationGroup;
}

/**
 * 
 */
export class LocationGroupsApi extends runtime.BaseAPI {

    /**
     * Deletes requested location group
     * Delete swtData location group with groupId
     */
    async deleteSwtDataLocationGroupWithGroupIdRaw(requestParameters: DeleteSwtDataLocationGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling deleteSwtDataLocationGroupWithGroupId().'
            );
        }

        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling deleteSwtDataLocationGroupWithGroupId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataLocationGroupWithGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['categoryId'] != null) {
            queryParameters['category-id'] = requestParameters['categoryId'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['cascadeDelete'] != null) {
            queryParameters['cascade-delete'] = requestParameters['cascadeDelete'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/location/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested location group
     * Delete swtData location group with groupId
     */
    async deleteSwtDataLocationGroupWithGroupId(requestParameters: DeleteSwtDataLocationGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataLocationGroupWithGroupIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns CWMS Location Groups Data
     * Get swtData location group
     */
    async getSwtDataLocationGroupRaw(requestParameters: GetSwtDataLocationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationGroup>>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['includeAssigned'] != null) {
            queryParameters['include-assigned'] = requestParameters['includeAssigned'];
        }

        if (requestParameters['locationCategoryLike'] != null) {
            queryParameters['location-category-like'] = requestParameters['locationCategoryLike'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/location/group`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationGroupFromJSON));
    }

    /**
     * Returns CWMS Location Groups Data
     * Get swtData location group
     */
    async getSwtDataLocationGroup(requestParameters: GetSwtDataLocationGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationGroup>> {
        const response = await this.getSwtDataLocationGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested Location Group
     * Get swtData location group with groupId
     */
    async getSwtDataLocationGroupWithGroupIdRaw(requestParameters: GetSwtDataLocationGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroup>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getSwtDataLocationGroupWithGroupId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataLocationGroupWithGroupId().'
            );
        }

        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getSwtDataLocationGroupWithGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['category-id'] = requestParameters['categoryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/location/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationGroupFromJSON(jsonValue));
    }

    /**
     * Retrieves requested Location Group
     * Get swtData location group with groupId
     */
    async getSwtDataLocationGroupWithGroupId(requestParameters: GetSwtDataLocationGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroup> {
        const response = await this.getSwtDataLocationGroupWithGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing LocationGroup. Allows for renaming group, assigning new locations, and unassigning all locations from the group.
     * Patch swtData location group with groupId
     */
    async patchSwtDataLocationGroupWithGroupIdRaw(requestParameters: PatchSwtDataLocationGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling patchSwtDataLocationGroupWithGroupId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataLocationGroupWithGroupId().'
            );
        }

        if (requestParameters['locationGroup'] == null) {
            throw new runtime.RequiredError(
                'locationGroup',
                'Required parameter "locationGroup" was null or undefined when calling patchSwtDataLocationGroupWithGroupId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceAssignedLocs'] != null) {
            queryParameters['replace-assigned-locs'] = requestParameters['replaceAssignedLocs'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/location/group/{group-id}`.replace(`{${"group-id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationGroupToJSON(requestParameters['locationGroup']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update existing LocationGroup. Allows for renaming group, assigning new locations, and unassigning all locations from the group.
     * Patch swtData location group with groupId
     */
    async patchSwtDataLocationGroupWithGroupId(requestParameters: PatchSwtDataLocationGroupWithGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataLocationGroupWithGroupIdRaw(requestParameters, initOverrides);
    }

    /**
     * Create new LocationGroup
     * Post swtData location group
     */
    async postSwtDataLocationGroupRaw(requestParameters: PostSwtDataLocationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['locationGroup'] == null) {
            throw new runtime.RequiredError(
                'locationGroup',
                'Required parameter "locationGroup" was null or undefined when calling postSwtDataLocationGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/location/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationGroupToJSON(requestParameters['locationGroup']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new LocationGroup
     * Post swtData location group
     */
    async postSwtDataLocationGroup(requestParameters: PostSwtDataLocationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataLocationGroupRaw(requestParameters, initOverrides);
    }

}
