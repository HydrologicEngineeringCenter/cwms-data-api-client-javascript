/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  TimeseriesIdentifierDescriptor,
  TimeseriesIdentifierDescriptors,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    TimeseriesIdentifierDescriptorFromJSON,
    TimeseriesIdentifierDescriptorToJSON,
    TimeseriesIdentifierDescriptorsFromJSON,
    TimeseriesIdentifierDescriptorsToJSON,
} from '../models/index';

export interface DeleteSwtDataTimeseriesIdentifierDescriptorWithNameRequest {
    name: string;
    timeseriesId: string;
    office: string;
    method: DeleteMethod;
}

export interface GetSwtDataTimeseriesIdentifierDescriptorRequest {
    office?: string;
    timeseriesIdRegex?: string;
    page?: string;
    pageSize?: number;
}

export interface GetSwtDataTimeseriesIdentifierDescriptorWithNameRequest {
    name: string;
    timeseriesId: string;
    office: string;
}

export interface PatchSwtDataTimeseriesIdentifierDescriptorWithNameRequest {
    name: string;
    office: string;
    timeseriesId?: string;
    intervalOffset?: number;
    snapForward?: number;
    snapBackward?: number;
    active?: boolean;
}

export interface PostSwtDataTimeseriesIdentifierDescriptorRequest {
    timeseriesIdentifierDescriptor: TimeseriesIdentifierDescriptor;
    failIfExists?: boolean;
}

/**
 * 
 */
export class TimeseriesIdentifierApi extends runtime.BaseAPI {

    /**
     * Deletes requested timeseries identifier
     * Delete swtData timeseries identifierDescriptor with name
     */
    async deleteSwtDataTimeseriesIdentifierDescriptorWithNameRaw(requestParameters: DeleteSwtDataTimeseriesIdentifierDescriptorWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        if (requestParameters['timeseriesId'] == null) {
            throw new runtime.RequiredError(
                'timeseriesId',
                'Required parameter "timeseriesId" was null or undefined when calling deleteSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        if (requestParameters['method'] == null) {
            throw new runtime.RequiredError(
                'method',
                'Required parameter "method" was null or undefined when calling deleteSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/identifier-descriptor/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"timeseries-id"}}`, encodeURIComponent(String(requestParameters['timeseriesId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested timeseries identifier
     * Delete swtData timeseries identifierDescriptor with name
     */
    async deleteSwtDataTimeseriesIdentifierDescriptorWithName(requestParameters: DeleteSwtDataTimeseriesIdentifierDescriptorWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSwtDataTimeseriesIdentifierDescriptorWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Returns CWMS timeseries identifier descriptorData
     * Get swtData timeseries identifierDescriptor
     */
    async getSwtDataTimeseriesIdentifierDescriptorRaw(requestParameters: GetSwtDataTimeseriesIdentifierDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeseriesIdentifierDescriptors>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['timeseriesIdRegex'] != null) {
            queryParameters['timeseries-id-regex'] = requestParameters['timeseriesIdRegex'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/identifier-descriptor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesIdentifierDescriptorsFromJSON(jsonValue));
    }

    /**
     * Returns CWMS timeseries identifier descriptorData
     * Get swtData timeseries identifierDescriptor
     */
    async getSwtDataTimeseriesIdentifierDescriptor(requestParameters: GetSwtDataTimeseriesIdentifierDescriptorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeseriesIdentifierDescriptors> {
        const response = await this.getSwtDataTimeseriesIdentifierDescriptorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested timeseries identifier descriptor
     * Get swtData timeseries identifierDescriptor with name
     */
    async getSwtDataTimeseriesIdentifierDescriptorWithNameRaw(requestParameters: GetSwtDataTimeseriesIdentifierDescriptorWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeseriesIdentifierDescriptor>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        if (requestParameters['timeseriesId'] == null) {
            throw new runtime.RequiredError(
                'timeseriesId',
                'Required parameter "timeseriesId" was null or undefined when calling getSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/identifier-descriptor/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"timeseries-id"}}`, encodeURIComponent(String(requestParameters['timeseriesId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesIdentifierDescriptorFromJSON(jsonValue));
    }

    /**
     * Retrieves requested timeseries identifier descriptor
     * Get swtData timeseries identifierDescriptor with name
     */
    async getSwtDataTimeseriesIdentifierDescriptorWithName(requestParameters: GetSwtDataTimeseriesIdentifierDescriptorWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeseriesIdentifierDescriptor> {
        const response = await this.getSwtDataTimeseriesIdentifierDescriptorWithNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch swtData timeseries identifierDescriptor with name
     */
    async patchSwtDataTimeseriesIdentifierDescriptorWithNameRaw(requestParameters: PatchSwtDataTimeseriesIdentifierDescriptorWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling patchSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchSwtDataTimeseriesIdentifierDescriptorWithName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['timeseriesId'] != null) {
            queryParameters['timeseries-id'] = requestParameters['timeseriesId'];
        }

        if (requestParameters['intervalOffset'] != null) {
            queryParameters['interval-offset'] = requestParameters['intervalOffset'];
        }

        if (requestParameters['snapForward'] != null) {
            queryParameters['snap-forward'] = requestParameters['snapForward'];
        }

        if (requestParameters['snapBackward'] != null) {
            queryParameters['snap-backward'] = requestParameters['snapBackward'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/identifier-descriptor/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Patch swtData timeseries identifierDescriptor with name
     */
    async patchSwtDataTimeseriesIdentifierDescriptorWithName(requestParameters: PatchSwtDataTimeseriesIdentifierDescriptorWithNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchSwtDataTimeseriesIdentifierDescriptorWithNameRaw(requestParameters, initOverrides);
    }

    /**
     * Create new TimeseriesIdentifierDescriptor
     * Post swtData timeseries identifierDescriptor
     */
    async postSwtDataTimeseriesIdentifierDescriptorRaw(requestParameters: PostSwtDataTimeseriesIdentifierDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseriesIdentifierDescriptor'] == null) {
            throw new runtime.RequiredError(
                'timeseriesIdentifierDescriptor',
                'Required parameter "timeseriesIdentifierDescriptor" was null or undefined when calling postSwtDataTimeseriesIdentifierDescriptor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/timeseries/identifier-descriptor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesIdentifierDescriptorToJSON(requestParameters['timeseriesIdentifierDescriptor']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new TimeseriesIdentifierDescriptor
     * Post swtData timeseries identifierDescriptor
     */
    async postSwtDataTimeseriesIdentifierDescriptor(requestParameters: PostSwtDataTimeseriesIdentifierDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSwtDataTimeseriesIdentifierDescriptorRaw(requestParameters, initOverrides);
    }

}
