/* tslint:disable */
/* eslint-disable */
/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 1.11.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdaError,
  DeleteMethod,
  TimeSeriesIdentifierDescriptor,
  TimeSeriesIdentifierDescriptors,
} from '../models/index';
import {
    CdaErrorFromJSON,
    CdaErrorToJSON,
    DeleteMethodFromJSON,
    DeleteMethodToJSON,
    TimeSeriesIdentifierDescriptorFromJSON,
    TimeSeriesIdentifierDescriptorToJSON,
    TimeSeriesIdentifierDescriptorsFromJSON,
    TimeSeriesIdentifierDescriptorsToJSON,
} from '../models/index';

export interface DeleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest {
    timeseriesId: string;
    office: string;
    method: DeleteMethod;
}

export interface GetCwmsDataTimeseriesIdentifierDescriptorRequest {
    office?: string;
    timeseriesIdRegex?: string;
    page?: string;
    pageSize?: number;
}

export interface GetCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest {
    timeseriesId: string;
    office: string;
}

export interface PatchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest {
    timeseriesId: string;
    timeseriesId2: string;
    office: string;
    intervalOffset?: number;
    snapForward?: number;
    snapBackward?: number;
    active?: boolean;
}

export interface PostCwmsDataTimeseriesIdentifierDescriptorRequest {
    timeSeriesIdentifierDescriptor: TimeSeriesIdentifierDescriptor;
    failIfExists?: boolean;
}

/**
 * 
 */
export class TimeSeriesIdentifierApi extends runtime.BaseAPI {

    /**
     * Deletes requested timeseries identifier
     * Delete cwmsData timeseries identifierDescriptor with timeseriesId
     */
    async deleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRaw(requestParameters: DeleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseriesId'] == null) {
            throw new runtime.RequiredError(
                'timeseriesId',
                'Required parameter "timeseriesId" was null or undefined when calling deleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling deleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        if (requestParameters['method'] == null) {
            throw new runtime.RequiredError(
                'method',
                'Required parameter "method" was null or undefined when calling deleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['method'] != null) {
            queryParameters['method'] = requestParameters['method'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/cwms-data/timeseries/identifier-descriptor/{timeseries-id}`.replace(`{${"timeseries-id"}}`, encodeURIComponent(String(requestParameters['timeseriesId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes requested timeseries identifier
     * Delete cwmsData timeseries identifierDescriptor with timeseriesId
     */
    async deleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId(requestParameters: DeleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns CWMS timeseries identifier descriptorData
     * Get cwmsData timeseries identifierDescriptor
     */
    async getCwmsDataTimeseriesIdentifierDescriptorRaw(requestParameters: GetCwmsDataTimeseriesIdentifierDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSeriesIdentifierDescriptors>> {
        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['timeseriesIdRegex'] != null) {
            queryParameters['timeseries-id-regex'] = requestParameters['timeseriesIdRegex'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page-size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cwms-data/timeseries/identifier-descriptor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesIdentifierDescriptorsFromJSON(jsonValue));
    }

    /**
     * Returns CWMS timeseries identifier descriptorData
     * Get cwmsData timeseries identifierDescriptor
     */
    async getCwmsDataTimeseriesIdentifierDescriptor(requestParameters: GetCwmsDataTimeseriesIdentifierDescriptorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSeriesIdentifierDescriptors> {
        const response = await this.getCwmsDataTimeseriesIdentifierDescriptorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves requested timeseries identifier descriptor
     * Get cwmsData timeseries identifierDescriptor with timeseriesId
     */
    async getCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRaw(requestParameters: GetCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSeriesIdentifierDescriptor>> {
        if (requestParameters['timeseriesId'] == null) {
            throw new runtime.RequiredError(
                'timeseriesId',
                'Required parameter "timeseriesId" was null or undefined when calling getCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling getCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cwms-data/timeseries/identifier-descriptor/{timeseries-id}`.replace(`{${"timeseries-id"}}`, encodeURIComponent(String(requestParameters['timeseriesId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesIdentifierDescriptorFromJSON(jsonValue));
    }

    /**
     * Retrieves requested timeseries identifier descriptor
     * Get cwmsData timeseries identifierDescriptor with timeseriesId
     */
    async getCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId(requestParameters: GetCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSeriesIdentifierDescriptor> {
        const response = await this.getCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch cwmsData timeseries identifierDescriptor with timeseriesId
     */
    async patchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRaw(requestParameters: PatchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeseriesId'] == null) {
            throw new runtime.RequiredError(
                'timeseriesId',
                'Required parameter "timeseriesId" was null or undefined when calling patchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        if (requestParameters['timeseriesId2'] == null) {
            throw new runtime.RequiredError(
                'timeseriesId2',
                'Required parameter "timeseriesId2" was null or undefined when calling patchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        if (requestParameters['office'] == null) {
            throw new runtime.RequiredError(
                'office',
                'Required parameter "office" was null or undefined when calling patchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['timeseriesId2'] != null) {
            queryParameters['timeseries-id'] = requestParameters['timeseriesId2'];
        }

        if (requestParameters['office'] != null) {
            queryParameters['office'] = requestParameters['office'];
        }

        if (requestParameters['intervalOffset'] != null) {
            queryParameters['interval-offset'] = requestParameters['intervalOffset'];
        }

        if (requestParameters['snapForward'] != null) {
            queryParameters['snap-forward'] = requestParameters['snapForward'];
        }

        if (requestParameters['snapBackward'] != null) {
            queryParameters['snap-backward'] = requestParameters['snapBackward'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/cwms-data/timeseries/identifier-descriptor/{timeseries-id}`.replace(`{${"timeseries-id"}}`, encodeURIComponent(String(requestParameters['timeseriesId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Patch cwmsData timeseries identifierDescriptor with timeseriesId
     */
    async patchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesId(requestParameters: PatchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchCwmsDataTimeseriesIdentifierDescriptorWithTimeseriesIdRaw(requestParameters, initOverrides);
    }

    /**
     * Create new TimeSeriesIdentifierDescriptor
     * Post cwmsData timeseries identifierDescriptor
     */
    async postCwmsDataTimeseriesIdentifierDescriptorRaw(requestParameters: PostCwmsDataTimeseriesIdentifierDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['timeSeriesIdentifierDescriptor'] == null) {
            throw new runtime.RequiredError(
                'timeSeriesIdentifierDescriptor',
                'Required parameter "timeSeriesIdentifierDescriptor" was null or undefined when calling postCwmsDataTimeseriesIdentifierDescriptor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['failIfExists'] != null) {
            queryParameters['fail-if-exists'] = requestParameters['failIfExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;version=2';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/cwms-data/timeseries/identifier-descriptor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSeriesIdentifierDescriptorToJSON(requestParameters['timeSeriesIdentifierDescriptor']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create new TimeSeriesIdentifierDescriptor
     * Post cwmsData timeseries identifierDescriptor
     */
    async postCwmsDataTimeseriesIdentifierDescriptor(requestParameters: PostCwmsDataTimeseriesIdentifierDescriptorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postCwmsDataTimeseriesIdentifierDescriptorRaw(requestParameters, initOverrides);
    }

}
