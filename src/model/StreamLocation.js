/**
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StreamLocation model module.
 * @module model/StreamLocation
 * @version 2.5
 */
class StreamLocation {
    /**
     * Constructs a new <code>StreamLocation</code>.
     * @alias module:model/StreamLocation
     */
    constructor() { 
        
        StreamLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamLocation} obj Optional instance to populate.
     * @return {module:model/StreamLocation} The populated <code>StreamLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamLocation();

            if (data.hasOwnProperty('locationName')) {
                obj['locationName'] = ApiClient.convertToType(data['locationName'], 'String');
            }
            if (data.hasOwnProperty('streamName')) {
                obj['streamName'] = ApiClient.convertToType(data['streamName'], 'String');
            }
            if (data.hasOwnProperty('station')) {
                obj['station'] = ApiClient.convertToType(data['station'], 'Number');
            }
            if (data.hasOwnProperty('bank')) {
                obj['bank'] = ApiClient.convertToType(data['bank'], 'String');
            }
            if (data.hasOwnProperty('officeId')) {
                obj['officeId'] = ApiClient.convertToType(data['officeId'], 'String');
            }
            if (data.hasOwnProperty('publishedStation')) {
                obj['publishedStation'] = ApiClient.convertToType(data['publishedStation'], 'Number');
            }
            if (data.hasOwnProperty('lowestMeasurableStage')) {
                obj['lowestMeasurableStage'] = ApiClient.convertToType(data['lowestMeasurableStage'], 'Number');
            }
            if (data.hasOwnProperty('totalDrainageArea')) {
                obj['totalDrainageArea'] = ApiClient.convertToType(data['totalDrainageArea'], 'Number');
            }
            if (data.hasOwnProperty('ungagedDrainageArea')) {
                obj['ungagedDrainageArea'] = ApiClient.convertToType(data['ungagedDrainageArea'], 'Number');
            }
            if (data.hasOwnProperty('nagivationStation')) {
                obj['nagivationStation'] = ApiClient.convertToType(data['nagivationStation'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['locationName'] && !(typeof data['locationName'] === 'string' || data['locationName'] instanceof String)) {
            throw new Error("Expected the field `locationName` to be a primitive type in the JSON string but got " + data['locationName']);
        }
        // ensure the json data is a string
        if (data['streamName'] && !(typeof data['streamName'] === 'string' || data['streamName'] instanceof String)) {
            throw new Error("Expected the field `streamName` to be a primitive type in the JSON string but got " + data['streamName']);
        }
        // ensure the json data is a string
        if (data['bank'] && !(typeof data['bank'] === 'string' || data['bank'] instanceof String)) {
            throw new Error("Expected the field `bank` to be a primitive type in the JSON string but got " + data['bank']);
        }
        // ensure the json data is a string
        if (data['officeId'] && !(typeof data['officeId'] === 'string' || data['officeId'] instanceof String)) {
            throw new Error("Expected the field `officeId` to be a primitive type in the JSON string but got " + data['officeId']);
        }

        return true;
    }


}



/**
 * @member {String} locationName
 */
StreamLocation.prototype['locationName'] = undefined;

/**
 * @member {String} streamName
 */
StreamLocation.prototype['streamName'] = undefined;

/**
 * @member {Number} station
 */
StreamLocation.prototype['station'] = undefined;

/**
 * @member {String} bank
 */
StreamLocation.prototype['bank'] = undefined;

/**
 * @member {String} officeId
 */
StreamLocation.prototype['officeId'] = undefined;

/**
 * @member {Number} publishedStation
 */
StreamLocation.prototype['publishedStation'] = undefined;

/**
 * @member {Number} lowestMeasurableStage
 */
StreamLocation.prototype['lowestMeasurableStage'] = undefined;

/**
 * @member {Number} totalDrainageArea
 */
StreamLocation.prototype['totalDrainageArea'] = undefined;

/**
 * @member {Number} ungagedDrainageArea
 */
StreamLocation.prototype['ungagedDrainageArea'] = undefined;

/**
 * @member {Number} nagivationStation
 */
StreamLocation.prototype['nagivationStation'] = undefined;






export default StreamLocation;

