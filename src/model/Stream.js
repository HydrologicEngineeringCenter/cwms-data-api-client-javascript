/**
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamLocation from './StreamLocation';
import StreamReach from './StreamReach';

/**
 * The Stream model module.
 * @module model/Stream
 * @version 2.5
 */
class Stream {
    /**
     * Constructs a new <code>Stream</code>.
     * @alias module:model/Stream
     */
    constructor() { 
        
        Stream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Stream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stream} obj Optional instance to populate.
     * @return {module:model/Stream} The populated <code>Stream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stream();

            if (data.hasOwnProperty('streamName')) {
                obj['streamName'] = ApiClient.convertToType(data['streamName'], 'String');
            }
            if (data.hasOwnProperty('tributaries')) {
                obj['tributaries'] = ApiClient.convertToType(data['tributaries'], [Stream]);
            }
            if (data.hasOwnProperty('streamReaches')) {
                obj['streamReaches'] = ApiClient.convertToType(data['streamReaches'], [StreamReach]);
            }
            if (data.hasOwnProperty('divertingStreamId')) {
                obj['divertingStreamId'] = ApiClient.convertToType(data['divertingStreamId'], 'String');
            }
            if (data.hasOwnProperty('receivingStreamId')) {
                obj['receivingStreamId'] = ApiClient.convertToType(data['receivingStreamId'], 'String');
            }
            if (data.hasOwnProperty('confluenceBank')) {
                obj['confluenceBank'] = ApiClient.convertToType(data['confluenceBank'], 'String');
            }
            if (data.hasOwnProperty('diversionBank')) {
                obj['diversionBank'] = ApiClient.convertToType(data['diversionBank'], 'String');
            }
            if (data.hasOwnProperty('streamLength')) {
                obj['streamLength'] = ApiClient.convertToType(data['streamLength'], 'Number');
            }
            if (data.hasOwnProperty('confluenceStation')) {
                obj['confluenceStation'] = ApiClient.convertToType(data['confluenceStation'], 'Number');
            }
            if (data.hasOwnProperty('diversionStation')) {
                obj['diversionStation'] = ApiClient.convertToType(data['diversionStation'], 'Number');
            }
            if (data.hasOwnProperty('streamLocations')) {
                obj['streamLocations'] = ApiClient.convertToType(data['streamLocations'], [StreamLocation]);
            }
            if (data.hasOwnProperty('officeId')) {
                obj['officeId'] = ApiClient.convertToType(data['officeId'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('averageSlope')) {
                obj['averageSlope'] = ApiClient.convertToType(data['averageSlope'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['streamName'] && !(typeof data['streamName'] === 'string' || data['streamName'] instanceof String)) {
            throw new Error("Expected the field `streamName` to be a primitive type in the JSON string but got " + data['streamName']);
        }
        if (data['tributaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tributaries'])) {
                throw new Error("Expected the field `tributaries` to be an array in the JSON data but got " + data['tributaries']);
            }
            // validate the optional field `tributaries` (array)
            for (const item of data['tributaries']) {
                Stream.validateJSON(item);
            };
        }
        if (data['streamReaches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['streamReaches'])) {
                throw new Error("Expected the field `streamReaches` to be an array in the JSON data but got " + data['streamReaches']);
            }
            // validate the optional field `streamReaches` (array)
            for (const item of data['streamReaches']) {
                StreamReach.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['divertingStreamId'] && !(typeof data['divertingStreamId'] === 'string' || data['divertingStreamId'] instanceof String)) {
            throw new Error("Expected the field `divertingStreamId` to be a primitive type in the JSON string but got " + data['divertingStreamId']);
        }
        // ensure the json data is a string
        if (data['receivingStreamId'] && !(typeof data['receivingStreamId'] === 'string' || data['receivingStreamId'] instanceof String)) {
            throw new Error("Expected the field `receivingStreamId` to be a primitive type in the JSON string but got " + data['receivingStreamId']);
        }
        // ensure the json data is a string
        if (data['confluenceBank'] && !(typeof data['confluenceBank'] === 'string' || data['confluenceBank'] instanceof String)) {
            throw new Error("Expected the field `confluenceBank` to be a primitive type in the JSON string but got " + data['confluenceBank']);
        }
        // ensure the json data is a string
        if (data['diversionBank'] && !(typeof data['diversionBank'] === 'string' || data['diversionBank'] instanceof String)) {
            throw new Error("Expected the field `diversionBank` to be a primitive type in the JSON string but got " + data['diversionBank']);
        }
        if (data['streamLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['streamLocations'])) {
                throw new Error("Expected the field `streamLocations` to be an array in the JSON data but got " + data['streamLocations']);
            }
            // validate the optional field `streamLocations` (array)
            for (const item of data['streamLocations']) {
                StreamLocation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['officeId'] && !(typeof data['officeId'] === 'string' || data['officeId'] instanceof String)) {
            throw new Error("Expected the field `officeId` to be a primitive type in the JSON string but got " + data['officeId']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}



/**
 * @member {String} streamName
 */
Stream.prototype['streamName'] = undefined;

/**
 * @member {Array.<module:model/Stream>} tributaries
 */
Stream.prototype['tributaries'] = undefined;

/**
 * @member {Array.<module:model/StreamReach>} streamReaches
 */
Stream.prototype['streamReaches'] = undefined;

/**
 * @member {String} divertingStreamId
 */
Stream.prototype['divertingStreamId'] = undefined;

/**
 * @member {String} receivingStreamId
 */
Stream.prototype['receivingStreamId'] = undefined;

/**
 * @member {String} confluenceBank
 */
Stream.prototype['confluenceBank'] = undefined;

/**
 * @member {String} diversionBank
 */
Stream.prototype['diversionBank'] = undefined;

/**
 * @member {Number} streamLength
 */
Stream.prototype['streamLength'] = undefined;

/**
 * @member {Number} confluenceStation
 */
Stream.prototype['confluenceStation'] = undefined;

/**
 * @member {Number} diversionStation
 */
Stream.prototype['diversionStation'] = undefined;

/**
 * @member {Array.<module:model/StreamLocation>} streamLocations
 */
Stream.prototype['streamLocations'] = undefined;

/**
 * @member {String} officeId
 */
Stream.prototype['officeId'] = undefined;

/**
 * @member {String} comment
 */
Stream.prototype['comment'] = undefined;

/**
 * @member {Number} averageSlope
 */
Stream.prototype['averageSlope'] = undefined;






export default Stream;

