/**
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignedLocation from './AssignedLocation';
import LocationCategory from './LocationCategory';

/**
 * The LocationGroup model module.
 * @module model/LocationGroup
 * @version 2.5
 */
class LocationGroup {
    /**
     * Constructs a new <code>LocationGroup</code>.
     * A representation of a location group
     * @alias module:model/LocationGroup
     */
    constructor() { 
        
        LocationGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationGroup} obj Optional instance to populate.
     * @return {module:model/LocationGroup} The populated <code>LocationGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationGroup();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('locationCategory')) {
                obj['locationCategory'] = LocationCategory.constructFromObject(data['locationCategory']);
            }
            if (data.hasOwnProperty('officeId')) {
                obj['officeId'] = ApiClient.convertToType(data['officeId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('sharedLocAliasId')) {
                obj['sharedLocAliasId'] = ApiClient.convertToType(data['sharedLocAliasId'], 'String');
            }
            if (data.hasOwnProperty('sharedRefLocationId')) {
                obj['sharedRefLocationId'] = ApiClient.convertToType(data['sharedRefLocationId'], 'String');
            }
            if (data.hasOwnProperty('locGroupAttribute')) {
                obj['locGroupAttribute'] = ApiClient.convertToType(data['locGroupAttribute'], 'Number');
            }
            if (data.hasOwnProperty('assignedLocations')) {
                obj['assignedLocations'] = ApiClient.convertToType(data['assignedLocations'], [AssignedLocation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `locationCategory`
        if (data['locationCategory']) { // data not null
          LocationCategory.validateJSON(data['locationCategory']);
        }
        // ensure the json data is a string
        if (data['officeId'] && !(typeof data['officeId'] === 'string' || data['officeId'] instanceof String)) {
            throw new Error("Expected the field `officeId` to be a primitive type in the JSON string but got " + data['officeId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['sharedLocAliasId'] && !(typeof data['sharedLocAliasId'] === 'string' || data['sharedLocAliasId'] instanceof String)) {
            throw new Error("Expected the field `sharedLocAliasId` to be a primitive type in the JSON string but got " + data['sharedLocAliasId']);
        }
        // ensure the json data is a string
        if (data['sharedRefLocationId'] && !(typeof data['sharedRefLocationId'] === 'string' || data['sharedRefLocationId'] instanceof String)) {
            throw new Error("Expected the field `sharedRefLocationId` to be a primitive type in the JSON string but got " + data['sharedRefLocationId']);
        }
        if (data['assignedLocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assignedLocations'])) {
                throw new Error("Expected the field `assignedLocations` to be an array in the JSON data but got " + data['assignedLocations']);
            }
            // validate the optional field `assignedLocations` (array)
            for (const item of data['assignedLocations']) {
                AssignedLocation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} id
 */
LocationGroup.prototype['id'] = undefined;

/**
 * @member {module:model/LocationCategory} locationCategory
 */
LocationGroup.prototype['locationCategory'] = undefined;

/**
 * @member {String} officeId
 */
LocationGroup.prototype['officeId'] = undefined;

/**
 * @member {String} description
 */
LocationGroup.prototype['description'] = undefined;

/**
 * @member {String} sharedLocAliasId
 */
LocationGroup.prototype['sharedLocAliasId'] = undefined;

/**
 * @member {String} sharedRefLocationId
 */
LocationGroup.prototype['sharedRefLocationId'] = undefined;

/**
 * @member {Number} locGroupAttribute
 */
LocationGroup.prototype['locGroupAttribute'] = undefined;

/**
 * @member {Array.<module:model/AssignedLocation>} assignedLocations
 */
LocationGroup.prototype['assignedLocations'] = undefined;






export default LocationGroup;

