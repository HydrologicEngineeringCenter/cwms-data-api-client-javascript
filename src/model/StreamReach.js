/**
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StreamReach model module.
 * @module model/StreamReach
 * @version 2.5
 */
class StreamReach {
    /**
     * Constructs a new <code>StreamReach</code>.
     * @alias module:model/StreamReach
     */
    constructor() { 
        
        StreamReach.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamReach</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamReach} obj Optional instance to populate.
     * @return {module:model/StreamReach} The populated <code>StreamReach</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamReach();

            if (data.hasOwnProperty('upstreamLocationName')) {
                obj['upstreamLocationName'] = ApiClient.convertToType(data['upstreamLocationName'], 'String');
            }
            if (data.hasOwnProperty('downstreamLocationName')) {
                obj['downstreamLocationName'] = ApiClient.convertToType(data['downstreamLocationName'], 'String');
            }
            if (data.hasOwnProperty('streamName')) {
                obj['streamName'] = ApiClient.convertToType(data['streamName'], 'String');
            }
            if (data.hasOwnProperty('reachName')) {
                obj['reachName'] = ApiClient.convertToType(data['reachName'], 'String');
            }
            if (data.hasOwnProperty('officeId')) {
                obj['officeId'] = ApiClient.convertToType(data['officeId'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamReach</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamReach</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['upstreamLocationName'] && !(typeof data['upstreamLocationName'] === 'string' || data['upstreamLocationName'] instanceof String)) {
            throw new Error("Expected the field `upstreamLocationName` to be a primitive type in the JSON string but got " + data['upstreamLocationName']);
        }
        // ensure the json data is a string
        if (data['downstreamLocationName'] && !(typeof data['downstreamLocationName'] === 'string' || data['downstreamLocationName'] instanceof String)) {
            throw new Error("Expected the field `downstreamLocationName` to be a primitive type in the JSON string but got " + data['downstreamLocationName']);
        }
        // ensure the json data is a string
        if (data['streamName'] && !(typeof data['streamName'] === 'string' || data['streamName'] instanceof String)) {
            throw new Error("Expected the field `streamName` to be a primitive type in the JSON string but got " + data['streamName']);
        }
        // ensure the json data is a string
        if (data['reachName'] && !(typeof data['reachName'] === 'string' || data['reachName'] instanceof String)) {
            throw new Error("Expected the field `reachName` to be a primitive type in the JSON string but got " + data['reachName']);
        }
        // ensure the json data is a string
        if (data['officeId'] && !(typeof data['officeId'] === 'string' || data['officeId'] instanceof String)) {
            throw new Error("Expected the field `officeId` to be a primitive type in the JSON string but got " + data['officeId']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['configuration'] && !(typeof data['configuration'] === 'string' || data['configuration'] instanceof String)) {
            throw new Error("Expected the field `configuration` to be a primitive type in the JSON string but got " + data['configuration']);
        }

        return true;
    }


}



/**
 * @member {String} upstreamLocationName
 */
StreamReach.prototype['upstreamLocationName'] = undefined;

/**
 * @member {String} downstreamLocationName
 */
StreamReach.prototype['downstreamLocationName'] = undefined;

/**
 * @member {String} streamName
 */
StreamReach.prototype['streamName'] = undefined;

/**
 * @member {String} reachName
 */
StreamReach.prototype['reachName'] = undefined;

/**
 * @member {String} officeId
 */
StreamReach.prototype['officeId'] = undefined;

/**
 * @member {String} comment
 */
StreamReach.prototype['comment'] = undefined;

/**
 * @member {String} configuration
 */
StreamReach.prototype['configuration'] = undefined;






export default StreamReach;

