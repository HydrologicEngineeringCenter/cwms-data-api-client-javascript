/**
 * CWMS Radar
 * CWMS REST API for Data Retrieval
 *
 * The version of the OpenAPI document: 2.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Location model module.
 * @module model/Location
 * @version 2.5
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * @alias module:model/Location
     * @param name {String} 
     */
    constructor(name) { 
        
        Location.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('public-name')) {
                obj['public-name'] = ApiClient.convertToType(data['public-name'], 'String');
            }
            if (data.hasOwnProperty('long-name')) {
                obj['long-name'] = ApiClient.convertToType(data['long-name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('timezone-name')) {
                obj['timezone-name'] = ApiClient.convertToType(data['timezone-name'], 'String');
            }
            if (data.hasOwnProperty('location-type')) {
                obj['location-type'] = ApiClient.convertToType(data['location-type'], 'String');
            }
            if (data.hasOwnProperty('location-kind')) {
                obj['location-kind'] = ApiClient.convertToType(data['location-kind'], 'String');
            }
            if (data.hasOwnProperty('nation')) {
                obj['nation'] = ApiClient.convertToType(data['nation'], 'String');
            }
            if (data.hasOwnProperty('state-initial')) {
                obj['state-initial'] = ApiClient.convertToType(data['state-initial'], 'String');
            }
            if (data.hasOwnProperty('county-name')) {
                obj['county-name'] = ApiClient.convertToType(data['county-name'], 'String');
            }
            if (data.hasOwnProperty('nearest-city')) {
                obj['nearest-city'] = ApiClient.convertToType(data['nearest-city'], 'String');
            }
            if (data.hasOwnProperty('horizontal-datum')) {
                obj['horizontal-datum'] = ApiClient.convertToType(data['horizontal-datum'], 'String');
            }
            if (data.hasOwnProperty('published-longitude')) {
                obj['published-longitude'] = ApiClient.convertToType(data['published-longitude'], 'Number');
            }
            if (data.hasOwnProperty('published-latitude')) {
                obj['published-latitude'] = ApiClient.convertToType(data['published-latitude'], 'Number');
            }
            if (data.hasOwnProperty('vertical-datum')) {
                obj['vertical-datum'] = ApiClient.convertToType(data['vertical-datum'], 'String');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('map-label')) {
                obj['map-label'] = ApiClient.convertToType(data['map-label'], 'String');
            }
            if (data.hasOwnProperty('bounding-office-id')) {
                obj['bounding-office-id'] = ApiClient.convertToType(data['bounding-office-id'], 'String');
            }
            if (data.hasOwnProperty('office-id')) {
                obj['office-id'] = ApiClient.convertToType(data['office-id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Location.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['public-name'] && !(typeof data['public-name'] === 'string' || data['public-name'] instanceof String)) {
            throw new Error("Expected the field `public-name` to be a primitive type in the JSON string but got " + data['public-name']);
        }
        // ensure the json data is a string
        if (data['long-name'] && !(typeof data['long-name'] === 'string' || data['long-name'] instanceof String)) {
            throw new Error("Expected the field `long-name` to be a primitive type in the JSON string but got " + data['long-name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['timezone-name'] && !(typeof data['timezone-name'] === 'string' || data['timezone-name'] instanceof String)) {
            throw new Error("Expected the field `timezone-name` to be a primitive type in the JSON string but got " + data['timezone-name']);
        }
        // ensure the json data is a string
        if (data['location-type'] && !(typeof data['location-type'] === 'string' || data['location-type'] instanceof String)) {
            throw new Error("Expected the field `location-type` to be a primitive type in the JSON string but got " + data['location-type']);
        }
        // ensure the json data is a string
        if (data['location-kind'] && !(typeof data['location-kind'] === 'string' || data['location-kind'] instanceof String)) {
            throw new Error("Expected the field `location-kind` to be a primitive type in the JSON string but got " + data['location-kind']);
        }
        // ensure the json data is a string
        if (data['nation'] && !(typeof data['nation'] === 'string' || data['nation'] instanceof String)) {
            throw new Error("Expected the field `nation` to be a primitive type in the JSON string but got " + data['nation']);
        }
        // ensure the json data is a string
        if (data['state-initial'] && !(typeof data['state-initial'] === 'string' || data['state-initial'] instanceof String)) {
            throw new Error("Expected the field `state-initial` to be a primitive type in the JSON string but got " + data['state-initial']);
        }
        // ensure the json data is a string
        if (data['county-name'] && !(typeof data['county-name'] === 'string' || data['county-name'] instanceof String)) {
            throw new Error("Expected the field `county-name` to be a primitive type in the JSON string but got " + data['county-name']);
        }
        // ensure the json data is a string
        if (data['nearest-city'] && !(typeof data['nearest-city'] === 'string' || data['nearest-city'] instanceof String)) {
            throw new Error("Expected the field `nearest-city` to be a primitive type in the JSON string but got " + data['nearest-city']);
        }
        // ensure the json data is a string
        if (data['horizontal-datum'] && !(typeof data['horizontal-datum'] === 'string' || data['horizontal-datum'] instanceof String)) {
            throw new Error("Expected the field `horizontal-datum` to be a primitive type in the JSON string but got " + data['horizontal-datum']);
        }
        // ensure the json data is a string
        if (data['vertical-datum'] && !(typeof data['vertical-datum'] === 'string' || data['vertical-datum'] instanceof String)) {
            throw new Error("Expected the field `vertical-datum` to be a primitive type in the JSON string but got " + data['vertical-datum']);
        }
        // ensure the json data is a string
        if (data['map-label'] && !(typeof data['map-label'] === 'string' || data['map-label'] instanceof String)) {
            throw new Error("Expected the field `map-label` to be a primitive type in the JSON string but got " + data['map-label']);
        }
        // ensure the json data is a string
        if (data['bounding-office-id'] && !(typeof data['bounding-office-id'] === 'string' || data['bounding-office-id'] instanceof String)) {
            throw new Error("Expected the field `bounding-office-id` to be a primitive type in the JSON string but got " + data['bounding-office-id']);
        }
        // ensure the json data is a string
        if (data['office-id'] && !(typeof data['office-id'] === 'string' || data['office-id'] instanceof String)) {
            throw new Error("Expected the field `office-id` to be a primitive type in the JSON string but got " + data['office-id']);
        }

        return true;
    }


}

Location.RequiredProperties = ["name"];

/**
 * @member {String} name
 */
Location.prototype['name'] = undefined;

/**
 * @member {Number} latitude
 */
Location.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
Location.prototype['longitude'] = undefined;

/**
 * @member {Boolean} active
 */
Location.prototype['active'] = undefined;

/**
 * @member {String} public-name
 */
Location.prototype['public-name'] = undefined;

/**
 * @member {String} long-name
 */
Location.prototype['long-name'] = undefined;

/**
 * @member {String} description
 */
Location.prototype['description'] = undefined;

/**
 * @member {String} timezone-name
 */
Location.prototype['timezone-name'] = undefined;

/**
 * @member {String} location-type
 */
Location.prototype['location-type'] = undefined;

/**
 * @member {String} location-kind
 */
Location.prototype['location-kind'] = undefined;

/**
 * @member {module:model/Location.NationEnum} nation
 */
Location.prototype['nation'] = undefined;

/**
 * @member {String} state-initial
 */
Location.prototype['state-initial'] = undefined;

/**
 * @member {String} county-name
 */
Location.prototype['county-name'] = undefined;

/**
 * @member {String} nearest-city
 */
Location.prototype['nearest-city'] = undefined;

/**
 * @member {String} horizontal-datum
 */
Location.prototype['horizontal-datum'] = undefined;

/**
 * @member {Number} published-longitude
 */
Location.prototype['published-longitude'] = undefined;

/**
 * @member {Number} published-latitude
 */
Location.prototype['published-latitude'] = undefined;

/**
 * @member {String} vertical-datum
 */
Location.prototype['vertical-datum'] = undefined;

/**
 * @member {Number} elevation
 */
Location.prototype['elevation'] = undefined;

/**
 * @member {String} map-label
 */
Location.prototype['map-label'] = undefined;

/**
 * @member {String} bounding-office-id
 */
Location.prototype['bounding-office-id'] = undefined;

/**
 * @member {String} office-id
 */
Location.prototype['office-id'] = undefined;





/**
 * Allowed values for the <code>nation</code> property.
 * @enum {String}
 * @readonly
 */
Location['NationEnum'] = {

    /**
     * value: "US"
     * @const
     */
    "US": "US",

    /**
     * value: "CANADA"
     * @const
     */
    "CANADA": "CANADA",

    /**
     * value: "MEXICO"
     * @const
     */
    "MEXICO": "MEXICO"
};



export default Location;

