/**
 * CWMS Data API
 * CWMS REST API for Data Retrieval
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { SeasonalValueBean } from '../models/SeasonalValueBean';
import { HttpFile } from '../http/http';

export class LocationLevel {
    /**
    * Owning office of object.
    */
    'officeId': string;
    /**
    * Name of the location level
    */
    'locationLevelId': string;
    /**
    * Timeseries ID (e.g. from the times series catalog) to use as the location level. Mutually exclusive with seasonalValues and siParameterUnitsConstantValue
    */
    'seasonalTimeSeriesId'?: string;
    /**
    * List of Repeating seasonal values. The values repeater after the specified interval. A yearly interval seasonable could have 12 different values, one for each month for example. Mutually exclusive with seasonalTimeSeriesId and siParameterUnitsConstantValue
    */
    'seasonalValues'?: Array<SeasonalValueBean>;
    /**
    * Generic name of this location level. Common names are \'Top of Dam\', \'Streambed\', \'Bottom of Dam\'.
    */
    'specifiedLevelId'?: string;
    /**
    * To indicate if single or aggregate value
    */
    'parameterTypeId'?: LocationLevelParameterTypeIdEnum;
    /**
    * Data Type such as Stage, Elevation, or others.
    */
    'parameterId'?: string;
    /**
    * Single value for this location level. Mutually exclusive with seasonableTimeSeriesId and seasonValues.
    */
    'constantValue'?: number;
    /**
    * Units the provided levels are in
    */
    'levelUnitsId'?: string;
    /**
    * The date/time at which this location level configuration takes effect.
    */
    'levelDate'?: Date;
    'levelComment'?: string;
    /**
    * The start point of provided seasonal values
    */
    'intervalOrigin'?: Date;
    'intervalMonths'?: number;
    'intervalMinutes'?: number;
    /**
    * Indicating whether or not to interpolate between seasonal values.
    */
    'interpolateString'?: LocationLevelInterpolateStringEnum;
    /**
    * 0 if parameterTypeId is Inst. Otherwise duration indicating the time window of the aggregate value.
    */
    'durationId'?: string;
    'attributeValue'?: number;
    'attributeUnitsId'?: string;
    'attributeParameterTypeId'?: string;
    'attributeParameterId'?: string;
    'attributeDurationId'?: string;
    'attributeComment'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "officeId",
            "baseName": "office-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "locationLevelId",
            "baseName": "location-level-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "seasonalTimeSeriesId",
            "baseName": "seasonal-time-series-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "seasonalValues",
            "baseName": "seasonal-values",
            "type": "Array<SeasonalValueBean>",
            "format": ""
        },
        {
            "name": "specifiedLevelId",
            "baseName": "specified-level-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "parameterTypeId",
            "baseName": "parameter-type-id",
            "type": "LocationLevelParameterTypeIdEnum",
            "format": ""
        },
        {
            "name": "parameterId",
            "baseName": "parameter-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "constantValue",
            "baseName": "constant-value",
            "type": "number",
            "format": "double"
        },
        {
            "name": "levelUnitsId",
            "baseName": "level-units-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "levelDate",
            "baseName": "level-date",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "levelComment",
            "baseName": "level-comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "intervalOrigin",
            "baseName": "interval-origin",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "intervalMonths",
            "baseName": "interval-months",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "intervalMinutes",
            "baseName": "interval-minutes",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "interpolateString",
            "baseName": "interpolate-string",
            "type": "LocationLevelInterpolateStringEnum",
            "format": ""
        },
        {
            "name": "durationId",
            "baseName": "duration-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "attributeValue",
            "baseName": "attribute-value",
            "type": "number",
            "format": ""
        },
        {
            "name": "attributeUnitsId",
            "baseName": "attribute-units-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "attributeParameterTypeId",
            "baseName": "attribute-parameter-type-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "attributeParameterId",
            "baseName": "attribute-parameter-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "attributeDurationId",
            "baseName": "attribute-duration-id",
            "type": "string",
            "format": ""
        },
        {
            "name": "attributeComment",
            "baseName": "attribute-comment",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return LocationLevel.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum LocationLevelParameterTypeIdEnum {
    Inst = 'Inst',
    Ave = 'Ave',
    Min = 'Min',
    Max = 'Max',
    Total = 'Total'
}
export enum LocationLevelInterpolateStringEnum {
    T = 'T',
    F = 'F'
}

